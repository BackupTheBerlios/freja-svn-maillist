From troelskn at berlios.de  Sun Apr  2 11:28:01 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sun, 2 Apr 2006 11:28:01 +0200
Subject: [Freja-svn] r21 - in trunk: . lib src/auxiliary
Message-ID: <200604020928.k329S1iU020603@sheep.berlios.de>

Author: troelskn
Date: 2006-04-02 11:28:00 +0200 (Sun, 02 Apr 2006)
New Revision: 21

Added:
   trunk/src/auxiliary/minimal.js
Modified:
   trunk/build.wsf
   trunk/lib/Freja.js
   trunk/src/auxiliary/default.js
Log:
added minimal auxiliary and updated build-script

Modified: trunk/build.wsf
===================================================================
--- trunk/build.wsf	2006-03-31 07:14:29 UTC (rev 20)
+++ trunk/build.wsf	2006-04-02 09:28:00 UTC (rev 21)
@@ -5,55 +5,72 @@
 	var Shell = WScript.CreateObject("WScript.Shell");
 	var FileSystem = WScript.CreateObject("Scripting.FileSystemObject");
 	var cwd = FileSystem.GetParentFolderName(WScript.ScriptFullName);
-	var srcDir = cwd + "/src";
-	var outfile = cwd + "/lib/Freja.js";
-	try {
-		FileSystem.deleteFile(outfile);
-	} catch (ex) {}
+	var srcDir = cwd + "\\src";
 
-	var file = FileSystem.openTextFile(srcDir + "/Freja.js", 1, -2);
-	var source = file.readAll();
-	var VERSION = source.match(/Freja.VERSION \= \"(.*)\"/)[1];
-	file.close();
-	source = null;
+	var dialog = WScript.CreateObject("UserAccounts.CommonDialog");
+	dialog.Filter = "JavaScript files (*.js)|*.js| ";
+//	dialog.Title = "Select auxiliary";
+	dialog.InitialDir = srcDir + "\\auxiliary";
+	dialog.FilterIndex = 1
 	
-	var TARGET = "default";
-	var SUBMODULES = [
-		"Freja",
-		"auxiliary/" + TARGET,
-		"QueryEngine",
-		"Model",
-		"View",
-		"UndoHistory",
-		"AssetManager"
-	];
+	
+	if (dialog.ShowOpen()) {
+		var AUXILIARY = dialog.FileName;
 
-	var buildID = (new Date()).toUTCString();
+		var outfile = cwd + "/lib/Freja.js";
+		try {
+			FileSystem.deleteFile(outfile);
+		} catch (ex) {}
 
-	var header = "/" + "***\n" +
-		"\n    Freja " + VERSION +
-		"\n" +
-		"\n    Build $" + buildID + "$" +
-		"\n" +
-		"\n    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please" +
-		"\n    diff against the source tree, not this file." +
-		"\n" +
-		"\n    Copyright (c) 2006 C?dric Savarese <pro at 4213miles.com>, Troels Knak-Nielsen <troelskn at gmail.com>" +
-		"\n    This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>" +
-		"\n" +
-		"\n***" + "/" +
-		"\n";
+		var file = FileSystem.openTextFile(srcDir + "/Freja.js", 1, -2);
+		var source = file.readAll();
+		var VERSION = source.match(/Freja.VERSION \= \"(.*)\"/)[1];
+		file.close();
+		source = null;
 
-	var source = "";
-	for (var i=0; i < SUBMODULES.length; ++i) {
-		var filename = srcDir + "/" + SUBMODULES[i] + ".js";
-		var file = FileSystem.openTextFile(filename, 1, -2);
-		source += "\n" + file.readAll();
-		file.close();
+		var SUBMODULES = [
+			"Freja",
+			"AUXILIARY",
+			"QueryEngine",
+			"Model",
+			"View",
+			"UndoHistory",
+			"AssetManager"
+		];
+
+		var buildID = (new Date()).toUTCString();
+
+		var header = "/" + "***\n" +
+			"\n    Freja " + VERSION +
+			"\n" +
+			"\n    Build $" + buildID + "$" +
+			"\n" +
+			"\n    Target: " + AUXILIARY.match(/([^\\]*).js$/)[1] +
+			"\n" +
+			"\n    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please" +
+			"\n    diff against the source tree, not this file." +
+			"\n" +
+			"\n    Copyright (c) 2006 C?dric Savarese <pro at 4213miles.com>, Troels Knak-Nielsen <troelskn at gmail.com>" +
+			"\n    This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>" +
+			"\n" +
+			"\n***" + "/" +
+			"\n";
+
+		var source = "";
+		for (var i=0; i < SUBMODULES.length; ++i) {
+			if (SUBMODULES[i] == 'AUXILIARY') {
+				var filename = AUXILIARY;
+			} else {
+				var filename = srcDir + "/" + SUBMODULES[i] + ".js";
+			}
+			var file = FileSystem.openTextFile(filename, 1, -2);
+			source += "\n" + file.readAll();
+			file.close();
+		}
+		var out = FileSystem.openTextFile(outfile, 2, -2);
+		out.write(header + source);
+		out.close();
 	}
-	var out = FileSystem.openTextFile(outfile, 2, -2);
-	out.write(header + source);
-	out.close();
 	]]>
 	</script>
 </job>
\ No newline at end of file

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-31 07:14:29 UTC (rev 20)
+++ trunk/lib/Freja.js	2006-04-02 09:28:00 UTC (rev 21)
@@ -2,8 +2,10 @@
 
     Freja 2.0.alpha
 
-    Build $Fri, 31 Mar 2006 07:12:48 UTC$
+    Build $Sun, 2 Apr 2006 09:27:01 UTC$
 
+    Target: default
+
     THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
     diff against the source tree, not this file.
 
@@ -87,18 +89,18 @@
 	Freja = {};
 }
 Freja._aux = {};
-/** bind(func, self[, arg, ...]) : function */
+/** bind(func, self) : function */
 Freja._aux.bind = MochiKit.Base.bind;
 /** formContents(elem) : Array */
 Freja._aux.formContents = MochiKit.DOM.formContents;
-/** getElement() : HTMLElement */
+/** getElement(id) : HTMLElement */
 Freja._aux.getElement = MochiKit.DOM.getElement;
 
 /** registerSignals(src, signals) : void */
 Freja._aux.registerSignals = MochiKit.Signal.registerSignals;
-/** connect(src, signal, dest[, func]) : void */
+/** connect(src, signal, fnc) : void */
 Freja._aux.connect = MochiKit.Signal.connect;
-/** signal(src, signal, ...) : void */
+/** signal(src, signal, arg) : void */
 Freja._aux.signal = MochiKit.Signal.signal;
 /** createDeferred() : Deferred */
 Freja._aux.createDeferred = function() {

Modified: trunk/src/auxiliary/default.js
===================================================================
--- trunk/src/auxiliary/default.js	2006-03-31 07:14:29 UTC (rev 20)
+++ trunk/src/auxiliary/default.js	2006-04-02 09:28:00 UTC (rev 21)
@@ -40,18 +40,18 @@
 	Freja = {};
 }
 Freja._aux = {};
-/** bind(func, self[, arg, ...]) : function */
+/** bind(func, self) : function */
 Freja._aux.bind = MochiKit.Base.bind;
 /** formContents(elem) : Array */
 Freja._aux.formContents = MochiKit.DOM.formContents;
-/** getElement() : HTMLElement */
+/** getElement(id) : HTMLElement */
 Freja._aux.getElement = MochiKit.DOM.getElement;
 
 /** registerSignals(src, signals) : void */
 Freja._aux.registerSignals = MochiKit.Signal.registerSignals;
-/** connect(src, signal, dest[, func]) : void */
+/** connect(src, signal, fnc) : void */
 Freja._aux.connect = MochiKit.Signal.connect;
-/** signal(src, signal, ...) : void */
+/** signal(src, signal, arg) : void */
 Freja._aux.signal = MochiKit.Signal.signal;
 /** createDeferred() : Deferred */
 Freja._aux.createDeferred = function() {

Added: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-03-31 07:14:29 UTC (rev 20)
+++ trunk/src/auxiliary/minimal.js	2006-04-02 09:28:00 UTC (rev 21)
@@ -0,0 +1,217 @@
+/**
+  * Freja._aux
+  * wrapper for external dependencies (frameworks).
+  *
+  * This is the minimal auxiliary adapter. It contains self-sufficient
+  * implementations of all dependencies.
+  *
+  */
+if (typeof(Freja) == "undefined") {
+	Freja = {};
+}
+Freja._aux = {};
+/** bind(func, self) : function */
+Freja._aux.bind = function(func, self) {
+	return function() { func.apply(self, arguments); };
+};
+/** formContents(elem) : Array */
+Freja._aux.formContents = MochiKit.DOM.formContents;
+/** getElement(id) : HTMLElement */
+Freja._aux.getElement = function(id) {
+	if (typeof(id) == "object") {
+		return id;
+	} else {
+		return document.getElementById(id);
+	}
+};
+
+/** registerSignals(src, signals) : void */
+Freja._aux.registerSignals = function(src, signals) { /* void */ };
+/** connect(src, signal, fnc) : void */
+Freja._aux.connect = function(src, signal, fnc) {
+	if(!src) return;
+	if (src.addEventListener) {
+		var wrapper = function(e) {
+			var evt = {
+				stop : function() {
+					if (e.cancelable) {
+						e.preventDefault();
+					}
+					e.stopPropagation();
+				}
+			}
+			fnc(evt);
+		}
+		src.addEventListener(signal.replace(/^(on)/, ""), wrapper, false);
+	} else if (src.attachEvent) {
+		var wrapper = function() {
+			var e = window.event;
+			var evt = {
+				stop : function() {
+					e.cancelBubble = true;
+					e.returnValue = false;
+				}
+			}
+			fnc(evt);
+		}
+		src.attachEvent(signal, wrapper);
+	}
+	if (!src._signals) {
+		src._signals = [];
+	}
+	if (!src._signals[signal]) {
+		src._signals[signal] = [];
+	}
+	src._signals[signal].push(fnc);
+};
+/** signal(src, signal, ...) : void */
+Freja._aux.signal = function(src, signal) {
+	try {
+		var sigs = src._signals[signal];
+		var args = [];
+		for (var i=2; i < arguments.length; i++) {
+			args.push(arguments[i]);
+		}
+		for (var i=0; i < sigs.length; i++) {
+			try {
+				sigs[i].apply(src, args);
+			} catch (e) { /* squelch */ }
+		}
+	} catch (e) { /* squelch */ }
+};
+/** createDeferred() : Deferred */
+Freja._aux.createDeferred = function() {
+	return new Freja._aux.Deferred();
+};
+/** openXMLHttpRequest(method, url, async, user, pass) : XMLHttpRequest */
+Freja._aux.openXMLHttpRequest = function(method, url, async, user, pass) {
+	var req;
+	method = method.toUpperCase();
+	try { req = new ActiveXObject("Msxml2.XMLHTTP"); }
+	catch (e) { try { req = new ActiveXObject("Microsoft.XMLHTTP"); }
+	catch (e) { req = new XMLHttpRequest(); }}
+	if (!req) throw new Error("Can't create XMLHttpRequest");
+	if (user && pass) {
+		req.open(method, url, async, user, pass);
+	} else {
+		req.open(method, url, async);
+	}
+	if (method == "POST" || method == "PUT") {
+		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+	}
+	return req;
+};
+/** sendXMLHttpRequest(req, sendContent) : Deferred */
+Freja._aux.sendXMLHttpRequest = function(req, sendContent) {
+	var d = Freja._aux.createDeferred();
+	var bComplete = false;
+	req.onreadystatechange = function() {
+		if (req.readyState == 4 && !bComplete) {
+			if (req.status == 0 || req.status == 200 || req.status == 304) {
+				d.callback(req);
+			} else {
+				d.errback(req);
+			}
+			bComplete = true;
+		}
+	}
+	if (!sendContent) sendContent = "";
+	req.send(sendContent);
+	return d;
+};
+/** xmlize(anyObject, objectName) : string */
+Freja._aux.xmlize = Sarissa.xmlize;
+/** serializeXML(node) : string */
+Freja._aux.serializeXML = Sarissa.serialize;
+/** loadXML(string) : XMLDocument */
+Freja._aux.loadXML = function(text) {
+	return (new DOMParser()).parseFromString(text, "text/xml");
+};
+/** transformXSL(XMLDocument, XSLDocument) : string */
+Freja._aux.transformXSL = function(xml, xsl) {
+	var processor = new XSLTProcessor();
+	processor.importStylesheet(xsl);
+	return Freja._aux.serializeXML(processor.transformToDocument(xml));
+
+};
+/** cloneXMLDocument(document) : XMLDocument */
+Freja._aux.cloneXMLDocument = function(xmlDoc) {
+	var clone = null;
+	try {
+		clone = xmlDoc.cloneNode(true);
+	} catch(e) { /* squelch */ }
+
+	// Can't clone a DocumentNode in Safari & Opera. Let's try something else.
+	// @note Wouldn't it be easier to serialize the document to string and the parse it to a new document ?
+	if (!clone) {
+		if (document.implementation && document.implementation.createDocument) {
+			clone = document.implementation.createDocument("", xmlDoc.documentElement.nodeName, null);
+			// importNode is not safe in Safari ! the source document is altered. used cloneNode to fix the prblm
+			var data = clone.importNode(xmlDoc.documentElement.cloneNode(true), true);
+			try {
+				clone.appendChild(data);
+			} catch(e) {
+				// Opera has already created a documentElement and can't append another root node
+				var rootNode = clone.documentElement;
+				for (var i = data.childNodes.length; i >= 0; i--) {
+					rootNode.insertBefore(data.childNodes[i], rootNode.firstChild);
+				}
+				// need to copy root node attributes
+				for (var i = 0; i < xmlDoc.documentElement.attributes.length; i++) {
+					var name  = xmlDoc.documentElement.attributes.item(i).name;
+					var value = xmlDoc.documentElement.attributes.item(i).value;
+					clone.documentElement.setAttribute(name, value);
+				}
+			}
+		}
+	}
+	return clone;
+};
+/** hasSupportForXSLT() : boolean */
+Freja._aux.hasSupportForXSLT = function() { return (typeof(XSLTProcessor) != "undefined"); };
+/** createQueryEngine() : Freja.QueryEngine */
+Freja._aux.createQueryEngine = function() {
+	if (Sarissa.IS_ENABLED_SELECT_NODES) {
+		return new Freja.QueryEngine.XPath();
+	} else {
+		return new Freja.QueryEngine.SimplePath();
+	}
+};
+/** A pale replacement for MochiKit.Async.Deferred */
+Freja._aux.Deferred = function() {
+	this._good = [];
+	this._bad = [];
+	this._pending = null;
+};
+Freja._aux.Deferred.prototype.callback = function() {
+	if (this._good.length == 0) {
+		this._pending = [this.callback, arguments];
+		return;
+	}
+	for (var i=0; i < this._good.length; i++) {
+		this._good[i].apply(window, arguments);
+	}
+};
+Freja._aux.Deferred.prototype.errback = function() {
+	if (this._bad.length == 0) {
+		this._pending = [this.errback, arguments];
+		return;
+	}
+	for (var i=0; i < this._bad.length; i++) {
+		this._bad[i].apply(window, arguments);
+	}
+};
+Freja._aux.Deferred.prototype.addCallbacks = function(fncOK, fncError) {
+	if (fncOK) this._good[this._good.length] = fncOK;
+	if (fncError) this._bad[this._bad.length] = fncError;
+
+	if (this._pending) {
+		this._pending[0].apply(this, this._pending[1]);
+	}
+};
+Freja._aux.Deferred.prototype.addCallback = function(fncOK) {
+	this.addCallbacks(fncOK);
+};
+Freja._aux.Deferred.prototype.addErrback = function(fncError) {
+	this.addCallbacks(null, fncOK);
+};



From troelskn at berlios.de  Mon Apr  3 16:43:04 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Mon, 3 Apr 2006 16:43:04 +0200
Subject: [Freja-svn] r22 - in trunk: lib src/auxiliary tests
Message-ID: <200604031443.k33Eh4ms017357@sheep.berlios.de>

Author: troelskn
Date: 2006-04-03 16:43:02 +0200 (Mon, 03 Apr 2006)
New Revision: 22

Modified:
   trunk/lib/Freja.js
   trunk/src/auxiliary/minimal.js
   trunk/tests/test_Freja-Model.html
Log:


Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-04-02 09:28:00 UTC (rev 21)
+++ trunk/lib/Freja.js	2006-04-03 14:43:02 UTC (rev 22)
@@ -2,9 +2,9 @@
 
     Freja 2.0.alpha
 
-    Build $Sun, 2 Apr 2006 09:27:01 UTC$
+    Build $Sun, 2 Apr 2006 18:14:44 UTC$
 
-    Target: default
+    Target: minimal
 
     THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
     diff against the source tree, not this file.
@@ -51,64 +51,134 @@
   * Freja._aux
   * wrapper for external dependencies (frameworks).
   *
-  * This is the default auxiliary adapter. It bridges Freja to MochiKit + Sarissa
+  * This is the minimal auxiliary adapter. It contains self-sufficient
+  * implementations of all dependencies.
   *
-  * You shouldn't rely on this functionality - it's merely a hook for Freja towards
-  * external dependencies. This is the only part of the application you'll need to
-  * adjust, to make Freja play ball with your favourite framework.
   */
-if (typeof(dojo) != "undefined") {
-	dojo.require("MochiKit.Base");
-	dojo.require("MochiKit.Signal");
-	dojo.require("MochiKit.Async");
-	dojo.require("Sarissa");
-}
-if (typeof(JSAN) != "undefined") {
-	JSAN.use("MochiKit.Base", []);
-	JSAN.use("MochiKit.Signal", []);
-	JSAN.use("MochiKit.Async", []);
-	JSAN.use("Sarissa", []);
-}
-try {
-	if (typeof(MochiKit.Base) == "undefined") {
-		throw "";
-	}
-	if (typeof(MochiKit.Signal) == "undefined") {
-		throw "";
-	}
-	if (typeof(MochiKit.Async) == "undefined") {
-		throw "";
-	}
-	if (typeof(Sarissa) == "undefined") {
-		throw "";
-	}
-} catch (e) {
-	throw new Error("Freja depends on MochiKit.Base, MochiKit.Signal, MochiKit.Async and Sarissa!");
-}
 if (typeof(Freja) == "undefined") {
 	Freja = {};
 }
 Freja._aux = {};
 /** bind(func, self) : function */
-Freja._aux.bind = MochiKit.Base.bind;
+Freja._aux.bind = function(func, self) {
+	return function() { func.apply(self, arguments); };
+};
 /** formContents(elem) : Array */
-Freja._aux.formContents = MochiKit.DOM.formContents;
+Freja._aux.formContents = function(elem) {
+	if (!elem) v = document;
+	var names = [];
+	var values = [];
+	var inputs = elem.getElementsByTagNames("INPUT");
+	for (var i = 0; i < inputs.length; ++i) {
+		var input = inputs[i];
+		if (input.name) {
+			if (input.type == "radio" || input.type == "checkbox") {
+				if (input.checked) {
+					names.push(input.name);
+					values.push(input.value);
+				}
+			} else {
+				names.push(input.name);
+				values.push(input.value);
+			}
+		}
+	}
+	var textareas = elem.getElementsByTagNames("TEXTAREA");
+	for (var i = 0; i < textareas.length; ++i) {
+		var input = textareas[i];
+		if (input.name) {
+			names.push(input.name);
+			values.push(input.value);
+		}
+	}
+	var selects = elem.getElementsByTagNames("SELECT");
+	for (var i = 0; i < selects.length; ++i) {
+		var input = textareas[i];
+		if (input.name) {
+			if (input.selectedIndex >= 0) {
+				var opt = input.options[input.selectedIndex];
+				names.push(input.name);
+				values.push((opt.value) ? opt.value : opt.text);
+			}
+		}
+	}
+	return [names, values];
+};
 /** getElement(id) : HTMLElement */
-Freja._aux.getElement = MochiKit.DOM.getElement;
+Freja._aux.getElement = function(id) {
+	if (typeof(id) == "object") {
+		return id;
+	} else {
+		return document.getElementById(id);
+	}
+};
 
 /** registerSignals(src, signals) : void */
-Freja._aux.registerSignals = MochiKit.Signal.registerSignals;
+Freja._aux.registerSignals = function(src, signals) { /* void */ };
 /** connect(src, signal, fnc) : void */
-Freja._aux.connect = MochiKit.Signal.connect;
-/** signal(src, signal, arg) : void */
-Freja._aux.signal = MochiKit.Signal.signal;
+Freja._aux.connect = function(src, signal, fnc) {
+	if(!src) return;
+	if (src.addEventListener) {
+		var wrapper = function(e) {
+			var evt = {
+				stop : function() {
+					if (e.cancelable) {
+						e.preventDefault();
+					}
+					e.stopPropagation();
+				}
+			}
+			fnc(evt);
+		}
+		src.addEventListener(signal.replace(/^(on)/, ""), wrapper, false);
+	} else if (src.attachEvent) {
+		var wrapper = function() {
+			var e = window.event;
+			var evt = {
+				stop : function() {
+					e.cancelBubble = true;
+					e.returnValue = false;
+				}
+			}
+			fnc(evt);
+		}
+		src.attachEvent(signal, wrapper);
+	}
+	if (!src._signals) {
+		src._signals = [];
+	}
+	if (!src._signals[signal]) {
+		src._signals[signal] = [];
+	}
+	src._signals[signal].push(fnc);
+};
+/** signal(src, signal, ...) : void */
+Freja._aux.signal = function(src, signal) {
+	try {
+		var sigs = src._signals[signal];
+		var args = [];
+		for (var i=2; i < arguments.length; i++) {
+			args.push(arguments[i]);
+		}
+		for (var i=0; i < sigs.length; i++) {
+			try {
+				sigs[i].apply(src, args);
+			} catch (e) { /* squelch */ }
+		}
+	} catch (e) { /* squelch */ }
+};
 /** createDeferred() : Deferred */
 Freja._aux.createDeferred = function() {
-	return new MochiKit.Async.Deferred();
+	return new Freja._aux.Deferred();
 };
 /** openXMLHttpRequest(method, url, async, user, pass) : XMLHttpRequest */
 Freja._aux.openXMLHttpRequest = function(method, url, async, user, pass) {
-	var req = new XMLHttpRequest();
+	var req;
+	method = method.toUpperCase();
+	try { req = new ActiveXObject("Msxml2.XMLHTTP"); }
+	catch (e) { try { req = new ActiveXObject("Microsoft.XMLHTTP"); }
+	catch (e) { req = new XMLHttpRequest(); }}
+	if (!req) throw new Error("Can't create XMLHttpRequest");
 	if (user && pass) {
 		req.open(method, url, async, user, pass);
 	} else {
@@ -120,17 +190,69 @@
 	return req;
 };
 /** sendXMLHttpRequest(req, sendContent) : Deferred */
-Freja._aux.sendXMLHttpRequest = MochiKit.Async.sendXMLHttpRequest;
+Freja._aux.sendXMLHttpRequest = function(req, sendContent) {
+	var d = Freja._aux.createDeferred();
+	var bComplete = false;
+	req.onreadystatechange = function() {
+		if (req.readyState == 4 && !bComplete) {
+			if (req.status == 0 || req.status == 200 || req.status == 304) {
+				d.callback(req);
+			} else {
+				d.errback(req);
+			}
+			bComplete = true;
+		}
+	}
+	if (!sendContent) sendContent = "";
+	req.send(sendContent);
+	return d;
+};
 /** xmlize(anyObject, objectName) : string */
-Freja._aux.xmlize = Sarissa.xmlize;
+Freja._aux.xmlize = function(anyObject, objectName, indentSpace) {
+	var escape = function(sXml) {
+		return sXml.replace(/&/g, "&amp;")
+			.replace(/</g, "&lt;")
+			.replace(/>/g, "&gt;")
+			.replace(/"/g, "&quot;")
+			.replace(/'/g, "&apos;");
+	};
+	indentSpace = indentSpace ? indentSpace : '';
+	var s = indentSpace  + '<' + objectName + '>';
+	var isLeaf = false;
+	if(!(anyObject instanceof Object) || anyObject instanceof Number || anyObject instanceof String
+	|| anyObject instanceof Boolean || anyObject instanceof Date){
+		s += escape(""+anyObject);
+		isLeaf = true;
+	} else {
+		s += "\n";
+		var itemKey = '';
+		var isArrayItem = anyObject instanceof Array;
+		for (var name in anyObject) {
+			s += Freja._aux.xmlize(anyObject[name], (isArrayItem ? "array-item key=\""+name+"\"" : name), indentSpace + "   ");
+		};
+		s += indentSpace;
+	};
+	return s += (objectName.indexOf(' ') != -1 ? "</array-item>\n":"</" + objectName + ">\n");
+};
 /** serializeXML(node) : string */
-Freja._aux.serializeXML = Sarissa.serialize;
+Freja._aux.serializeXML = function(node) {
+	if (node.xml) return node.xml;
+	return (new XMLSerializer()).serializeToString(node);
+};
 /** loadXML(string) : XMLDocument */
 Freja._aux.loadXML = function(text) {
+	if (window.ActiveXObject) {
+		var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.4.0");
+		xmlDoc.loadXML(text);
+		return xmlDoc;
+	}
 	return (new DOMParser()).parseFromString(text, "text/xml");
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
 Freja._aux.transformXSL = function(xml, xsl) {
+	if (xml.transformNode) {
+		return xml.transformNode(xsl);
+	};
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
 	return Freja._aux.serializeXML(processor.transformToDocument(xml));
@@ -173,13 +295,95 @@
 Freja._aux.hasSupportForXSLT = function() { return (typeof(XSLTProcessor) != "undefined"); };
 /** createQueryEngine() : Freja.QueryEngine */
 Freja._aux.createQueryEngine = function() {
-	if (Sarissa.IS_ENABLED_SELECT_NODES) {
+	if (window.ActiveXObject || (document.implementation && document.implementation.hasFeature("XPath", "3.0"))) {
 		return new Freja.QueryEngine.XPath();
 	} else {
 		return new Freja.QueryEngine.SimplePath();
 	}
 };
-
+/** A pale replacement for MochiKit.Async.Deferred */
+Freja._aux.Deferred = function() {
+	this._good = [];
+	this._bad = [];
+	this._pending = null;
+};
+Freja._aux.Deferred.prototype.callback = function() {
+	if (this._good.length == 0) {
+		this._pending = [this.callback, arguments];
+		return;
+	}
+	for (var i=0; i < this._good.length; i++) {
+		this._good[i].apply(window, arguments);
+	}
+};
+Freja._aux.Deferred.prototype.errback = function() {
+	if (this._bad.length == 0) {
+		this._pending = [this.errback, arguments];
+		return;
+	}
+	for (var i=0; i < this._bad.length; i++) {
+		this._bad[i].apply(window, arguments);
+	}
+};
+Freja._aux.Deferred.prototype.addCallbacks = function(fncOK, fncError) {
+	if (fncOK) this._good[this._good.length] = fncOK;
+	if (fncError) this._bad[this._bad.length] = fncError;
+
+	if (this._pending) {
+		this._pending[0].apply(this, this._pending[1]);
+	}
+};
+Freja._aux.Deferred.prototype.addCallback = function(fncOK) {
+	this.addCallbacks(fncOK);
+};
+Freja._aux.Deferred.prototype.addErrback = function(fncError) {
+	this.addCallbacks(null, fncOK);
+};
+if (document.implementation && document.implementation.hasFeature("XPath", "3.0")) {
+	XMLDocument.prototype.selectNodes = function(sExpr, contextNode) {
+		var nsDoc = this;
+		var nsresolver = this.createNSResolver(this.documentElement);
+		var oResult = this.evaluate(sExpr,
+			(contextNode ? contextNode : this),
+			nsresolver,
+			XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
+		var nodeList = new Array(oResult.snapshotLength);
+		nodeList.item = function(i) {
+			return (i < 0 || i >= this.length) ? null : this[i];
+		};
+		nodeList.expr = sExpr;
+		for (var i = 0;i < nodeList.length; i++) {
+			nodeList[i] = oResult.snapshotItem(i);
+		};
+		return nodeList;
+	    };
+	Element.prototype.selectNodes = function(sExpr) {
+		var doc = this.ownerDocument;
+		if (doc.selectNodes) {
+			return doc.selectNodes(sExpr, this);
+		} else {
+			throw new Error("Method selectNodes is only supported by XML Elements");
+		};
+	};
+	XMLDocument.prototype.selectSingleNode = function(sExpr, contextNode) {
+		var ctx = contextNode ? contextNode : null;
+		sExpr = "("+sExpr+")[1]";
+		var nodeList = this.selectNodes(sExpr, ctx);
+		if (nodeList.length > 0) {
+			return nodeList.item(0);
+		} else {
+			return null;
+		}
+	};
+	Element.prototype.selectSingleNode = function(sExpr) {
+		var doc = this.ownerDocument;
+		if (doc.selectSingleNode) {
+			return doc.selectSingleNode(sExpr, this);
+		} else {
+			throw new Error("Method selectNodes is only supported by XML Elements");
+		}
+	};
+};
 /**
   * The baseclass for queryengines
   * @abstract

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-02 09:28:00 UTC (rev 21)
+++ trunk/src/auxiliary/minimal.js	2006-04-03 14:43:02 UTC (rev 22)
@@ -15,7 +15,46 @@
 	return function() { func.apply(self, arguments); };
 };
 /** formContents(elem) : Array */
-Freja._aux.formContents = MochiKit.DOM.formContents;
+Freja._aux.formContents = function(elem) {
+	if (!elem) v = document;
+	var names = [];
+	var values = [];
+	var inputs = elem.getElementsByTagNames("INPUT");
+	for (var i = 0; i < inputs.length; ++i) {
+		var input = inputs[i];
+		if (input.name) {
+			if (input.type == "radio" || input.type == "checkbox") {
+				if (input.checked) {
+					names.push(input.name);
+					values.push(input.value);
+				}
+			} else {
+				names.push(input.name);
+				values.push(input.value);
+			}
+		}
+	}
+	var textareas = elem.getElementsByTagNames("TEXTAREA");
+	for (var i = 0; i < textareas.length; ++i) {
+		var input = textareas[i];
+		if (input.name) {
+			names.push(input.name);
+			values.push(input.value);
+		}
+	}
+	var selects = elem.getElementsByTagNames("SELECT");
+	for (var i = 0; i < selects.length; ++i) {
+		var input = textareas[i];
+		if (input.name) {
+			if (input.selectedIndex >= 0) {
+				var opt = input.options[input.selectedIndex];
+				names.push(input.name);
+				values.push((opt.value) ? opt.value : opt.text);
+			}
+		}
+	}
+	return [names, values];
+};
 /** getElement(id) : HTMLElement */
 Freja._aux.getElement = function(id) {
 	if (typeof(id) == "object") {
@@ -120,15 +159,51 @@
 	return d;
 };
 /** xmlize(anyObject, objectName) : string */
-Freja._aux.xmlize = Sarissa.xmlize;
+Freja._aux.xmlize = function(anyObject, objectName, indentSpace) {
+	var escape = function(sXml) {
+		return sXml.replace(/&/g, "&amp;")
+			.replace(/</g, "&lt;")
+			.replace(/>/g, "&gt;")
+			.replace(/"/g, "&quot;")
+			.replace(/'/g, "&apos;");
+	};
+	indentSpace = indentSpace ? indentSpace : '';
+	var s = indentSpace  + '<' + objectName + '>';
+	var isLeaf = false;
+	if(!(anyObject instanceof Object) || anyObject instanceof Number || anyObject instanceof String
+	|| anyObject instanceof Boolean || anyObject instanceof Date){
+		s += escape(""+anyObject);
+		isLeaf = true;
+	} else {
+		s += "\n";
+		var itemKey = '';
+		var isArrayItem = anyObject instanceof Array;
+		for (var name in anyObject) {
+			s += Freja._aux.xmlize(anyObject[name], (isArrayItem ? "array-item key=\""+name+"\"" : name), indentSpace + "   ");
+		};
+		s += indentSpace;
+	};
+	return s += (objectName.indexOf(' ') != -1 ? "</array-item>\n":"</" + objectName + ">\n");
+};
 /** serializeXML(node) : string */
-Freja._aux.serializeXML = Sarissa.serialize;
+Freja._aux.serializeXML = function(node) {
+	if (node.xml) return node.xml;
+	return (new XMLSerializer()).serializeToString(node);
+};
 /** loadXML(string) : XMLDocument */
 Freja._aux.loadXML = function(text) {
+	if (window.ActiveXObject) {
+		var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.4.0");
+		xmlDoc.loadXML(text);
+		return xmlDoc;
+	}
 	return (new DOMParser()).parseFromString(text, "text/xml");
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
 Freja._aux.transformXSL = function(xml, xsl) {
+	if (xml.transformNode) {
+		return xml.transformNode(xsl);
+	};
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
 	return Freja._aux.serializeXML(processor.transformToDocument(xml));
@@ -171,7 +246,7 @@
 Freja._aux.hasSupportForXSLT = function() { return (typeof(XSLTProcessor) != "undefined"); };
 /** createQueryEngine() : Freja.QueryEngine */
 Freja._aux.createQueryEngine = function() {
-	if (Sarissa.IS_ENABLED_SELECT_NODES) {
+	if (window.ActiveXObject || (document.implementation && document.implementation.hasFeature("XPath", "3.0"))) {
 		return new Freja.QueryEngine.XPath();
 	} else {
 		return new Freja.QueryEngine.SimplePath();
@@ -215,3 +290,48 @@
 Freja._aux.Deferred.prototype.addErrback = function(fncError) {
 	this.addCallbacks(null, fncOK);
 };
+if (document.implementation && document.implementation.hasFeature("XPath", "3.0")) {
+	XMLDocument.prototype.selectNodes = function(sExpr, contextNode) {
+		var nsDoc = this;
+		var nsresolver = this.createNSResolver(this.documentElement);
+		var oResult = this.evaluate(sExpr,
+			(contextNode ? contextNode : this),
+			nsresolver,
+			XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
+		var nodeList = new Array(oResult.snapshotLength);
+		nodeList.item = function(i) {
+			return (i < 0 || i >= this.length) ? null : this[i];
+		};
+		nodeList.expr = sExpr;
+		for (var i = 0;i < nodeList.length; i++) {
+			nodeList[i] = oResult.snapshotItem(i);
+		};
+		return nodeList;
+	    };
+	Element.prototype.selectNodes = function(sExpr) {
+		var doc = this.ownerDocument;
+		if (doc.selectNodes) {
+			return doc.selectNodes(sExpr, this);
+		} else {
+			throw new Error("Method selectNodes is only supported by XML Elements");
+		};
+	};
+	XMLDocument.prototype.selectSingleNode = function(sExpr, contextNode) {
+		var ctx = contextNode ? contextNode : null;
+		sExpr = "("+sExpr+")[1]";
+		var nodeList = this.selectNodes(sExpr, ctx);
+		if (nodeList.length > 0) {
+			return nodeList.item(0);
+		} else {
+			return null;
+		}
+	};
+	Element.prototype.selectSingleNode = function(sExpr) {
+		var doc = this.ownerDocument;
+		if (doc.selectSingleNode) {
+			return doc.selectSingleNode(sExpr, this);
+		} else {
+			throw new Error("Method selectNodes is only supported by XML Elements");
+		}
+	};
+};
\ No newline at end of file

Modified: trunk/tests/test_Freja-Model.html
===================================================================
--- trunk/tests/test_Freja-Model.html	2006-04-02 09:28:00 UTC (rev 21)
+++ trunk/tests/test_Freja-Model.html	2006-04-03 14:43:02 UTC (rev 22)
@@ -3,7 +3,9 @@
     <!-- MochiKit is needed by SimpleTest -->
     <script type="text/javascript" src="../lib/MochiKit.js"></script>
     <script type="text/javascript" src="SimpleTest/SimpleTest.js"></script>
+<!--
     <script type="text/javascript" src="../lib/Sarissa.js"></script>
+-->
     <script type="text/javascript" src="../lib/Freja.js"></script>
     <link rel="stylesheet" type="text/css" href="SimpleTest/test.css">
 </head>



From cedsav at berlios.de  Tue Apr  4 23:18:45 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Tue, 4 Apr 2006 23:18:45 +0200
Subject: [Freja-svn] r23 - trunk/src/auxiliary
Message-ID: <200604042118.k34LIjHv002013@sheep.berlios.de>

Author: cedsav
Date: 2006-04-04 23:18:23 +0200 (Tue, 04 Apr 2006)
New Revision: 23

Modified:
   trunk/src/auxiliary/minimal.js
Log:
fixed Freja._aux.bind for typeof (func)=="string"

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-03 14:43:02 UTC (rev 22)
+++ trunk/src/auxiliary/minimal.js	2006-04-04 21:18:23 UTC (rev 23)
@@ -12,6 +12,9 @@
 Freja._aux = {};
 /** bind(func, self) : function */
 Freja._aux.bind = function(func, self) {
+	if(typeof (func)=="string"){
+		func=self[func];
+	}
 	return function() { func.apply(self, arguments); };
 };
 /** formContents(elem) : Array */



From cedsav at berlios.de  Wed Apr  5 18:02:05 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Wed, 5 Apr 2006 18:02:05 +0200
Subject: [Freja-svn] r24 - trunk/src
Message-ID: <200604051602.k35G25XT022938@sheep.berlios.de>

Author: cedsav
Date: 2006-04-05 18:02:02 +0200 (Wed, 05 Apr 2006)
New Revision: 24

Modified:
   trunk/src/View.js
Log:
in applyHandlers changed:
child.getAttribute("handler"); (??)
to 
child.getAttribute("id");


Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-04 21:18:23 UTC (rev 23)
+++ trunk/src/View.js	2006-04-05 16:02:02 UTC (rev 24)
@@ -99,11 +99,12 @@
 			);
 		};
 		var applyHandlers = function(node, handlers) {
+	
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("handler");
-					if (id != "") {
+					var id = child.getAttribute("id");
+					if (id != "") {				
 						var handler = handlers[id];
 						if (handler) {
 							for (var eventType in handler) {



From cedsav at berlios.de  Wed Apr  5 18:26:02 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Wed, 5 Apr 2006 18:26:02 +0200
Subject: [Freja-svn] r25 - trunk/src/auxiliary
Message-ID: <200604051626.k35GQ28a025643@sheep.berlios.de>

Author: cedsav
Date: 2006-04-05 18:25:59 +0200 (Wed, 05 Apr 2006)
New Revision: 25

Modified:
   trunk/src/auxiliary/minimal.js
Log:
Fixed bind again. (window.getView was not returning anything, whereas Freja.AssetManager.getView was ok).

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-05 16:02:02 UTC (rev 24)
+++ trunk/src/auxiliary/minimal.js	2006-04-05 16:25:59 UTC (rev 25)
@@ -11,11 +11,25 @@
 }
 Freja._aux = {};
 /** bind(func, self) : function */
+// from http://blog.ianbicking.org/prototype-and-object-prototype.html
 Freja._aux.bind = function(func, self) {
 	if(typeof (func)=="string"){
 		func=self[func];
 	}
-	return function() { func.apply(self, arguments); };
+		
+	var im_func = null;
+    if (typeof(func.im_func) == 'function') {
+        im_func = func.im_func;
+    } else {
+        im_func = func;
+    }
+    func = function () {
+        return func.im_func.apply(func.im_self, arguments);
+    }
+    func.im_func = im_func;
+    func.im_self = self;
+	return func;
+	
 };
 /** formContents(elem) : Array */
 Freja._aux.formContents = function(elem) {
@@ -108,6 +122,7 @@
 };
 /** signal(src, signal, ...) : void */
 Freja._aux.signal = function(src, signal) {
+	
 	try {
 		var sigs = src._signals[signal];
 		var args = [];
@@ -115,7 +130,7 @@
 			args.push(arguments[i]);
 		}
 		for (var i=0; i < sigs.length; i++) {
-			try {
+			try {							
 				sigs[i].apply(src, args);
 			} catch (e) { /* squelch */ }
 		}



From cedsav at berlios.de  Wed Apr  5 21:41:16 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Wed, 5 Apr 2006 21:41:16 +0200
Subject: [Freja-svn] r26 - trunk/src
Message-ID: <200604051941.k35JfG62025475@sheep.berlios.de>

Author: cedsav
Date: 2006-04-05 21:40:35 +0200 (Wed, 05 Apr 2006)
New Revision: 26

Modified:
   trunk/src/View.js
Log:
added support for xslParameters

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-05 16:25:59 UTC (rev 25)
+++ trunk/src/View.js	2006-04-05 19:40:35 UTC (rev 26)
@@ -18,7 +18,7 @@
   *                                      default placeholder.
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.prototype.render = function(model, placeholder) {
+Freja.View.prototype.render = function(model, placeholder, xslParameters) {
 	if (typeof(placeholder) == "undefined") placeholder = this.placeholder;
 
 	var Handler = function(model, view, deferred) {
@@ -28,6 +28,7 @@
 	};
 
 	Handler.prototype.trigger = function() {
+	
 		try {
 			if (!this.view.ready) {
 				Freja._aux.connect(this.view, "onload", Freja._aux.bind(this.trigger, this));
@@ -47,14 +48,14 @@
 				// wrap pojo's in
 				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
 			}
-			var trans = this.view._renderer.transform(model, this.view);
+			var trans = this.view._renderer.transform(model, this.view, xslParameters);
 			trans.addCallback(Freja._aux.bind(function(html) {
 				this._destination.innerHTML = html;
 			}, this.view));
 			trans.addCallback(Freja._aux.bind(function() {
 				Freja._aux.signal(this, "onrendercomplete", this._destination)
 			}, this.view));
-			trans.addCallback(this.deferred.callback);
+			//trans.addCallback(this.deferred.callback);
 			trans.addErrback(this.deferred.errback);
 		} catch (ex) {
 			this.deferred.errback(ex);
@@ -83,6 +84,7 @@
 Freja.View.prototype._connectBehaviour = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
+		
 			Freja._aux.connect(node, eventType, Freja._aux.bind(
 				function(e) {
 					var allow = false;
@@ -99,7 +101,7 @@
 			);
 		};
 		var applyHandlers = function(node, handlers) {
-	
+			
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
@@ -120,7 +122,14 @@
 				}
 			}
 		};
-		applyHandlers(destination, this.handlers);
+		
+		// Avoid traversing the DOM tree if there's no handler to process.
+		// @note: is there a better way? this.handlers.length is always 0.
+		for (var ids in this.handlers) {
+			applyHandlers(destination, this.handlers);
+			break;
+		}	
+		
 	} catch (ex) {
 		alert(ex.message);
 	}
@@ -143,10 +152,10 @@
 /**
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view) {
+Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view, xslParameters) {
         var d = Freja._aux.createDeferred();
         try {
-		var html = Freja._aux.transformXSL(model.document, view.document);
+		var html = Freja._aux.transformXSL(model.document, view.document, xslParameters);
 		if (!html) {
 			d.errback(new Error("XSL Transformation error."));
 		} else {
@@ -172,14 +181,14 @@
 /**
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.Renderer.RemoteXSLTransformer.prototype.transform = function(model, view) {
+Freja.View.Renderer.RemoteXSLTransformer.prototype.transform = function(model, view, xslParameters) {
         var d = Freja._aux.createDeferred();
 
 	// prepare posted data  (no need to send the XSL document, just its url)
 	var xslUrl = view.url;
 	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja._aux.serializeXML(model.document));
-//	if (xslParams)
-//		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParams.toString());
+	if (xslParameters)
+		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParameters.toString());
 	// send request to the server-side XSL transformation service
 	var req = Freja.AssetManager.openXMLHttpRequest("POST", Freja.AssetManager.XSLT_SERVICE_URL);
 	req.onreadystatechange = function() {



From cedsav at berlios.de  Wed Apr  5 21:44:15 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Wed, 5 Apr 2006 21:44:15 +0200
Subject: [Freja-svn] r27 - trunk/src/auxiliary
Message-ID: <200604051944.k35JiF4N029838@sheep.berlios.de>

Author: cedsav
Date: 2006-04-05 21:44:11 +0200 (Wed, 05 Apr 2006)
New Revision: 27

Modified:
   trunk/src/auxiliary/minimal.js
Log:
Added support for xsl parameters. Used object notation instead of an array in freja 1.0 :

view.render(form, placeholder, {xslParamName: value } );

server-side XSLT script will need to be modified to support the change in notation.

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-05 19:40:35 UTC (rev 26)
+++ trunk/src/auxiliary/minimal.js	2006-04-05 19:44:11 UTC (rev 27)
@@ -85,6 +85,7 @@
 Freja._aux.registerSignals = function(src, signals) { /* void */ };
 /** connect(src, signal, fnc) : void */
 Freja._aux.connect = function(src, signal, fnc) {
+
 	if(!src) return;
 	if (src.addEventListener) {
 		var wrapper = function(e) {
@@ -218,12 +219,15 @@
 	return (new DOMParser()).parseFromString(text, "text/xml");
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
-Freja._aux.transformXSL = function(xml, xsl) {
+Freja._aux.transformXSL = function(xml, xsl, xslParameters) {
 	if (xml.transformNode) {
 		return xml.transformNode(xsl);
 	};
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
+	for(var paramName in xslParameters) {
+		processor.setParameter(null, paramName,xslParameters[paramName]); 
+	}
 	return Freja._aux.serializeXML(processor.transformToDocument(xml));
 
 };



From cedsav at berlios.de  Thu Apr  6 04:49:32 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 04:49:32 +0200
Subject: [Freja-svn] r28 - trunk/src
Message-ID: <200604060249.k362nWsK021123@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 04:49:12 +0200 (Thu, 06 Apr 2006)
New Revision: 28

Modified:
   trunk/src/AssetManager.js
Log:
Fixed regular expression broken in Firefox 1.0.7

Modified: trunk/src/AssetManager.js
===================================================================
--- trunk/src/AssetManager.js	2006-04-05 19:44:11 UTC (rev 27)
+++ trunk/src/AssetManager.js	2006-04-06 02:49:12 UTC (rev 28)
@@ -118,7 +118,7 @@
   * @returns MochiKit.Async.Deferred
   */
 Freja.AssetManager.loadAsset = function(url, preventCaching) {
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}



From cedsav at berlios.de  Thu Apr  6 04:50:12 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 04:50:12 +0200
Subject: [Freja-svn] r29 - trunk/src
Message-ID: <200604060250.k362oCfW021422@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 04:49:56 +0200 (Thu, 06 Apr 2006)
New Revision: 29

Modified:
   trunk/src/Model.js
Log:
Fixed regular expression broken in Firefox 1.0.7

Modified: trunk/src/Model.js
===================================================================
--- trunk/src/Model.js	2006-04-06 02:49:12 UTC (rev 28)
+++ trunk/src/Model.js	2006-04-06 02:49:56 UTC (rev 29)
@@ -50,7 +50,7 @@
   */
 Freja.Model.prototype.save = function() {
 	var url = this.url;
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}
@@ -73,7 +73,7 @@
   */
 Freja.Model.prototype.remove = function() {
 	var url = this.url;
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}
@@ -113,7 +113,7 @@
   */
 Freja.Model.DataSource.prototype.create = function(values) {
 	var url = this.createURL;
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}



From cedsav at berlios.de  Thu Apr  6 04:52:09 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 04:52:09 +0200
Subject: [Freja-svn] r30 - trunk/lib
Message-ID: <200604060252.k362q9t4022281@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 04:51:35 +0200 (Thu, 06 Apr 2006)
New Revision: 30

Modified:
   trunk/lib/Freja.js
Log:


Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-04-06 02:49:56 UTC (rev 29)
+++ trunk/lib/Freja.js	2006-04-06 02:51:35 UTC (rev 30)
@@ -2,7 +2,7 @@
 
     Freja 2.0.alpha
 
-    Build $Sun, 2 Apr 2006 18:14:44 UTC$
+    Build $Thu, 6 Apr 2006 02:50:39 UTC$
 
     Target: minimal
 
@@ -60,8 +60,25 @@
 }
 Freja._aux = {};
 /** bind(func, self) : function */
+// from http://blog.ianbicking.org/prototype-and-object-prototype.html
 Freja._aux.bind = function(func, self) {
-	return function() { func.apply(self, arguments); };
+	if(typeof (func)=="string"){
+		func=self[func];
+	}
+		
+	var im_func = null;
+    if (typeof(func.im_func) == 'function') {
+        im_func = func.im_func;
+    } else {
+        im_func = func;
+    }
+    func = function () {
+        return func.im_func.apply(func.im_self, arguments);
+    }
+    func.im_func = im_func;
+    func.im_self = self;
+	return func;
+	
 };
 /** formContents(elem) : Array */
 Freja._aux.formContents = function(elem) {
@@ -117,6 +134,7 @@
 Freja._aux.registerSignals = function(src, signals) { /* void */ };
 /** connect(src, signal, fnc) : void */
 Freja._aux.connect = function(src, signal, fnc) {
+
 	if(!src) return;
 	if (src.addEventListener) {
 		var wrapper = function(e) {
@@ -154,6 +172,7 @@
 };
 /** signal(src, signal, ...) : void */
 Freja._aux.signal = function(src, signal) {
+	
 	try {
 		var sigs = src._signals[signal];
 		var args = [];
@@ -161,7 +180,7 @@
 			args.push(arguments[i]);
 		}
 		for (var i=0; i < sigs.length; i++) {
-			try {
+			try {							
 				sigs[i].apply(src, args);
 			} catch (e) { /* squelch */ }
 		}
@@ -249,12 +268,15 @@
 	return (new DOMParser()).parseFromString(text, "text/xml");
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
-Freja._aux.transformXSL = function(xml, xsl) {
+Freja._aux.transformXSL = function(xml, xsl, xslParameters) {
 	if (xml.transformNode) {
 		return xml.transformNode(xsl);
 	};
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
+	for(var paramName in xslParameters) {
+		processor.setParameter(null, paramName,xslParameters[paramName]); 
+	}
 	return Freja._aux.serializeXML(processor.transformToDocument(xml));
 
 };
@@ -515,7 +537,7 @@
   */
 Freja.Model.prototype.save = function() {
 	var url = this.url;
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}
@@ -538,7 +560,7 @@
   */
 Freja.Model.prototype.remove = function() {
 	var url = this.url;
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}
@@ -578,7 +600,7 @@
   */
 Freja.Model.DataSource.prototype.create = function(values) {
 	var url = this.createURL;
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}
@@ -610,7 +632,7 @@
   *                                      default placeholder.
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.prototype.render = function(model, placeholder) {
+Freja.View.prototype.render = function(model, placeholder, xslParameters) {
 	if (typeof(placeholder) == "undefined") placeholder = this.placeholder;
 
 	var Handler = function(model, view, deferred) {
@@ -620,6 +642,7 @@
 	};
 
 	Handler.prototype.trigger = function() {
+	
 		try {
 			if (!this.view.ready) {
 				Freja._aux.connect(this.view, "onload", Freja._aux.bind(this.trigger, this));
@@ -639,14 +662,14 @@
 				// wrap pojo's in
 				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
 			}
-			var trans = this.view._renderer.transform(model, this.view);
+			var trans = this.view._renderer.transform(model, this.view, xslParameters);
 			trans.addCallback(Freja._aux.bind(function(html) {
 				this._destination.innerHTML = html;
 			}, this.view));
 			trans.addCallback(Freja._aux.bind(function() {
 				Freja._aux.signal(this, "onrendercomplete", this._destination)
 			}, this.view));
-			trans.addCallback(this.deferred.callback);
+			//trans.addCallback(this.deferred.callback);
 			trans.addErrback(this.deferred.errback);
 		} catch (ex) {
 			this.deferred.errback(ex);
@@ -675,6 +698,7 @@
 Freja.View.prototype._connectBehaviour = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
+		
 			Freja._aux.connect(node, eventType, Freja._aux.bind(
 				function(e) {
 					var allow = false;
@@ -691,11 +715,12 @@
 			);
 		};
 		var applyHandlers = function(node, handlers) {
+			
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("handler");
-					if (id != "") {
+					var id = child.getAttribute("id");
+					if (id != "") {				
 						var handler = handlers[id];
 						if (handler) {
 							for (var eventType in handler) {
@@ -711,7 +736,14 @@
 				}
 			}
 		};
-		applyHandlers(destination, this.handlers);
+		
+		// Avoid traversing the DOM tree if there's no handler to process.
+		// @note: is there a better way? this.handlers.length is always 0.
+		for (var ids in this.handlers) {
+			applyHandlers(destination, this.handlers);
+			break;
+		}	
+		
 	} catch (ex) {
 		alert(ex.message);
 	}
@@ -734,10 +766,10 @@
 /**
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view) {
+Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view, xslParameters) {
         var d = Freja._aux.createDeferred();
         try {
-		var html = Freja._aux.transformXSL(model.document, view.document);
+		var html = Freja._aux.transformXSL(model.document, view.document, xslParameters);
 		if (!html) {
 			d.errback(new Error("XSL Transformation error."));
 		} else {
@@ -763,14 +795,14 @@
 /**
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.Renderer.RemoteXSLTransformer.prototype.transform = function(model, view) {
+Freja.View.Renderer.RemoteXSLTransformer.prototype.transform = function(model, view, xslParameters) {
         var d = Freja._aux.createDeferred();
 
 	// prepare posted data  (no need to send the XSL document, just its url)
 	var xslUrl = view.url;
 	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja._aux.serializeXML(model.document));
-//	if (xslParams)
-//		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParams.toString());
+	if (xslParameters)
+		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParameters.toString());
 	// send request to the server-side XSL transformation service
 	var req = Freja.AssetManager.openXMLHttpRequest("POST", Freja.AssetManager.XSLT_SERVICE_URL);
 	req.onreadystatechange = function() {
@@ -991,7 +1023,7 @@
   * @returns MochiKit.Async.Deferred
   */
 Freja.AssetManager.loadAsset = function(url, preventCaching) {
-	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	var match = /^(file:\/\/.*\/)([^\/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}



From cedsav at berlios.de  Thu Apr  6 17:47:26 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 17:47:26 +0200
Subject: [Freja-svn] r31 - trunk/src
Message-ID: <200604061547.k36FlQ7O019106@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 17:47:23 +0200 (Thu, 06 Apr 2006)
New Revision: 31

Modified:
   trunk/src/QueryEngine.js
Log:
Allows for _find to return null if no node is not found for the given expression (which is a field name, not necessarily intended to be a XPath expression)

Modified: trunk/src/QueryEngine.js
===================================================================
--- trunk/src/QueryEngine.js	2006-04-06 02:51:35 UTC (rev 30)
+++ trunk/src/QueryEngine.js	2006-04-06 15:47:23 UTC (rev 31)
@@ -13,10 +13,13 @@
 	}
 };
 Freja.QueryEngine.prototype.get = function(document, expression) {
-	return this._find(document, expression).nodeValue;
+	var node = this._find(document, expression);
+	if(node) return node.nodeValue;
+	return null;
 };
 Freja.QueryEngine.prototype.set = function(document, expression, value) {
-	this._find(document, expression).nodeValue = value;
+	var node = this._find(document, expression);
+	if(node) node.nodeValue = value;
 };
 /**
   * XPath query engine.
@@ -32,7 +35,8 @@
 	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
 	}
-	throw new Error("Can't evaluate expression " + expression);
+	// throw new Error("Can't evaluate expression " + expression);
+	return null;
 };
 /**
   * SimplePath



From cedsav at berlios.de  Thu Apr  6 17:48:29 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 17:48:29 +0200
Subject: [Freja-svn] r32 - trunk/src
Message-ID: <200604061548.k36FmTN6019271@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 17:48:26 +0200 (Thu, 06 Apr 2006)
New Revision: 32

Modified:
   trunk/src/View.js
Log:
Fixed textarea regular expression (to allow a / in the name attribute) 

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-06 15:47:23 UTC (rev 31)
+++ trunk/src/View.js	2006-04-06 15:48:26 UTC (rev 32)
@@ -28,7 +28,6 @@
 	};
 
 	Handler.prototype.trigger = function() {
-	
 		try {
 			if (!this.view.ready) {
 				Freja._aux.connect(this.view, "onload", Freja._aux.bind(this.trigger, this));
@@ -49,8 +48,8 @@
 				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
 			}
 			var trans = this.view._renderer.transform(model, this.view, xslParameters);
-			trans.addCallback(Freja._aux.bind(function(html) {
-				this._destination.innerHTML = html;
+			trans.addCallback(Freja._aux.bind(function(html) {									
+				this._destination.innerHTML = html;				
 			}, this.view));
 			trans.addCallback(Freja._aux.bind(function() {
 				Freja._aux.signal(this, "onrendercomplete", this._destination)
@@ -138,7 +137,7 @@
   * Returns the values of a formview
   */
 Freja.View.prototype.getValues = function() {
-	return formContents(this._destination);
+	return Freja._aux.formContents(this._destination);
 };
 /**
   * Base object for viewrenderers
@@ -162,7 +161,10 @@
 			// fix empty textareas
 			// Can't this be fixed by outputting as html rather than xml ?
 			// <xsl:output method="html" />
-			html = html.replace(/<textarea([^\/>]*)\/>/gi,"<textarea $1></textarea>");
+			// (cedsav) don't remember all the details but method="xml" is the way to go.
+			// method="html" would output html not xhtml, plus I think it implies that
+			// you want to output a valid html document (with html, head and body tags).
+			html = html.replace(/<textarea([^>]*)\/>/gi,"<textarea $1></textarea>");
 			d.callback(html);
 		}
 	} catch (ex) {



From cedsav at berlios.de  Thu Apr  6 17:51:16 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 17:51:16 +0200
Subject: [Freja-svn] r33 - trunk/src/auxiliary
Message-ID: <200604061551.k36FpGeg019412@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 17:51:13 +0200 (Thu, 06 Apr 2006)
New Revision: 33

Modified:
   trunk/src/auxiliary/minimal.js
Log:
changed selectNodes to not throw an error when the XPath expression is not valid.

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-06 15:48:26 UTC (rev 32)
+++ trunk/src/auxiliary/minimal.js	2006-04-06 15:51:13 UTC (rev 33)
@@ -36,7 +36,7 @@
 	if (!elem) v = document;
 	var names = [];
 	var values = [];
-	var inputs = elem.getElementsByTagNames("INPUT");
+	var inputs = elem.getElementsByTagName("INPUT");
 	for (var i = 0; i < inputs.length; ++i) {
 		var input = inputs[i];
 		if (input.name) {
@@ -51,7 +51,7 @@
 			}
 		}
 	}
-	var textareas = elem.getElementsByTagNames("TEXTAREA");
+	var textareas = elem.getElementsByTagName("TEXTAREA");
 	for (var i = 0; i < textareas.length; ++i) {
 		var input = textareas[i];
 		if (input.name) {
@@ -59,7 +59,7 @@
 			values.push(input.value);
 		}
 	}
-	var selects = elem.getElementsByTagNames("SELECT");
+	var selects = elem.getElementsByTagName("SELECT");
 	for (var i = 0; i < selects.length; ++i) {
 		var input = textareas[i];
 		if (input.name) {
@@ -316,10 +316,16 @@
 	XMLDocument.prototype.selectNodes = function(sExpr, contextNode) {
 		var nsDoc = this;
 		var nsresolver = this.createNSResolver(this.documentElement);
-		var oResult = this.evaluate(sExpr,
-			(contextNode ? contextNode : this),
-			nsresolver,
-			XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
+		
+		try {
+			var oResult = this.evaluate(sExpr,
+				(contextNode ? contextNode : this),
+				nsresolver,
+				XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
+		} catch(e) {
+			return null;
+			// throw new Error("Can't evaluate expression " + sExpr);
+		}
 		var nodeList = new Array(oResult.snapshotLength);
 		nodeList.item = function(i) {
 			return (i < 0 || i >= this.length) ? null : this[i];



From cedsav at berlios.de  Thu Apr  6 18:13:49 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 18:13:49 +0200
Subject: [Freja-svn] r34 - trunk/src/auxiliary
Message-ID: <200604061613.k36GDnWl021015@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 18:13:46 +0200 (Thu, 06 Apr 2006)
New Revision: 34

Modified:
   trunk/src/auxiliary/minimal.js
Log:
fixed typo in addErrback

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-06 15:51:13 UTC (rev 33)
+++ trunk/src/auxiliary/minimal.js	2006-04-06 16:13:46 UTC (rev 34)
@@ -301,7 +301,6 @@
 Freja._aux.Deferred.prototype.addCallbacks = function(fncOK, fncError) {
 	if (fncOK) this._good[this._good.length] = fncOK;
 	if (fncError) this._bad[this._bad.length] = fncError;
-
 	if (this._pending) {
 		this._pending[0].apply(this, this._pending[1]);
 	}
@@ -310,7 +309,7 @@
 	this.addCallbacks(fncOK);
 };
 Freja._aux.Deferred.prototype.addErrback = function(fncError) {
-	this.addCallbacks(null, fncOK);
+	this.addCallbacks(null, fncError);
 };
 if (document.implementation && document.implementation.hasFeature("XPath", "3.0")) {
 	XMLDocument.prototype.selectNodes = function(sExpr, contextNode) {
@@ -323,8 +322,7 @@
 				nsresolver,
 				XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
 		} catch(e) {
-			return null;
-			// throw new Error("Can't evaluate expression " + sExpr);
+			throw new Error("Can't evaluate expression " + sExpr);
 		}
 		var nodeList = new Array(oResult.snapshotLength);
 		nodeList.item = function(i) {



From cedsav at berlios.de  Thu Apr  6 18:31:27 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 18:31:27 +0200
Subject: [Freja-svn] r35 - trunk/src
Message-ID: <200604061631.k36GVRRs024126@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 18:31:13 +0200 (Thu, 06 Apr 2006)
New Revision: 35

Modified:
   trunk/src/QueryEngine.js
Log:
workaround in _find for empty elements (<tag />)

Modified: trunk/src/QueryEngine.js
===================================================================
--- trunk/src/QueryEngine.js	2006-04-06 16:13:46 UTC (rev 34)
+++ trunk/src/QueryEngine.js	2006-04-06 16:31:13 UTC (rev 35)
@@ -18,8 +18,10 @@
 	return null;
 };
 Freja.QueryEngine.prototype.set = function(document, expression, value) {
-	var node = this._find(document, expression);
-	if(node) node.nodeValue = value;
+	var node = this._find(document, expression);	
+	if(node) {
+		node.nodeValue = value;
+	}
 };
 /**
   * XPath query engine.
@@ -34,8 +36,14 @@
 		return node.firstChild;
 	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
+	} else if (node && !node.firstChild) {
+		// this is an empty node <tag />. When using 'get' it's fine to return null,
+		// but for 'set', we need to create a textnode somewhere.
+		// for lack of better idea, will do it here.
+		var n = document.createTextNode('');
+		return node.appendChild(n);
 	}
-	// throw new Error("Can't evaluate expression " + expression);
+//	throw new Error("Can't evaluate expression " + expression);
 	return null;
 };
 /**



From cedsav at berlios.de  Thu Apr  6 21:22:25 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 6 Apr 2006 21:22:25 +0200
Subject: [Freja-svn] r36 - trunk/src/auxiliary
Message-ID: <200604061922.k36JMPw8018040@sheep.berlios.de>

Author: cedsav
Date: 2006-04-06 21:22:21 +0200 (Thu, 06 Apr 2006)
New Revision: 36

Modified:
   trunk/src/auxiliary/minimal.js
Log:
fixed (?) Deferred

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-06 16:31:13 UTC (rev 35)
+++ trunk/src/auxiliary/minimal.js	2006-04-06 19:22:21 UTC (rev 36)
@@ -281,13 +281,14 @@
 	this._pending = null;
 };
 Freja._aux.Deferred.prototype.callback = function() {
-	if (this._good.length == 0) {
+	if (this._good.length == 0) {	
 		this._pending = [this.callback, arguments];
 		return;
 	}
 	for (var i=0; i < this._good.length; i++) {
-		this._good[i].apply(window, arguments);
+		this._good[i].apply(window, arguments);		
 	}
+	this._good = [];
 };
 Freja._aux.Deferred.prototype.errback = function() {
 	if (this._bad.length == 0) {
@@ -297,6 +298,7 @@
 	for (var i=0; i < this._bad.length; i++) {
 		this._bad[i].apply(window, arguments);
 	}
+	this._bad = [];
 };
 Freja._aux.Deferred.prototype.addCallbacks = function(fncOK, fncError) {
 	if (fncOK) this._good[this._good.length] = fncOK;



From cedsav at berlios.de  Fri Apr  7 05:50:40 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Fri, 7 Apr 2006 05:50:40 +0200
Subject: [Freja-svn] r37 - trunk/src
Message-ID: <200604070350.k373oev1024946@sheep.berlios.de>

Author: cedsav
Date: 2006-04-07 05:50:32 +0200 (Fri, 07 Apr 2006)
New Revision: 37

Modified:
   trunk/src/View.js
Log:
improved xslparameters handling.

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-06 19:22:21 UTC (rev 36)
+++ trunk/src/View.js	2006-04-07 03:50:32 UTC (rev 37)
@@ -20,13 +20,14 @@
   */
 Freja.View.prototype.render = function(model, placeholder, xslParameters) {
 	if (typeof(placeholder) == "undefined") placeholder = this.placeholder;
+	if (typeof(xslParameters) == "undefined") xslParameters = this.xslParameters;
 
-	var Handler = function(model, view, deferred) {
+	var Handler = function(model, view, deferred, xslParameters) {
 		this.model = model;
 		this.view = view;
 		this.deferred = deferred;
+		this.xslParameters = xslParameters;
 	};
-
 	Handler.prototype.trigger = function() {
 		try {
 			if (!this.view.ready) {
@@ -47,14 +48,15 @@
 				// wrap pojo's in
 				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
 			}
-			var trans = this.view._renderer.transform(model, this.view, xslParameters);
+			
+			var trans = this.view._renderer.transform(model, this.view, this.xslParameters);
 			trans.addCallback(Freja._aux.bind(function(html) {									
 				this._destination.innerHTML = html;				
 			}, this.view));
 			trans.addCallback(Freja._aux.bind(function() {
 				Freja._aux.signal(this, "onrendercomplete", this._destination)
 			}, this.view));
-			//trans.addCallback(this.deferred.callback);
+			trans.addCallback(this.deferred.callback);
 			trans.addErrback(this.deferred.errback);
 		} catch (ex) {
 			this.deferred.errback(ex);
@@ -68,7 +70,7 @@
 		// Perhaps we should leave it to the programmer to do this.
 		this._destination.innerHTML = Freja.AssetManager.THROBBER_HTML;
 
-		var h = new Handler(model, this, d);
+		var h = new Handler(model, this, d, xslParameters);
 		h.trigger();
 	} catch (ex) {
 		d.errback(ex);



From troelskn at berlios.de  Mon Apr 10 03:03:44 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Mon, 10 Apr 2006 03:03:44 +0200
Subject: [Freja-svn] r38 - in trunk: lib src src/auxiliary tests tests/data
Message-ID: <200604100103.k3A13iih023784@sheep.berlios.de>

Author: troelskn
Date: 2006-04-10 03:02:51 +0200 (Mon, 10 Apr 2006)
New Revision: 38

Added:
   trunk/src/auxiliary/mochi+sarissa.js
Removed:
   trunk/src/auxiliary/default.js
Modified:
   trunk/lib/Freja.js
   trunk/src/View.js
   trunk/tests/data/form-view.xsl
   trunk/tests/test_Freja-Model.html
   trunk/tests/test_Model.js
   trunk/tests/test_View.js
Log:
fixed tests which were broken.

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-04-07 03:50:32 UTC (rev 37)
+++ trunk/lib/Freja.js	2006-04-10 01:02:51 UTC (rev 38)
@@ -2,7 +2,7 @@
 
     Freja 2.0.alpha
 
-    Build $Thu, 6 Apr 2006 02:50:39 UTC$
+    Build $Mon, 10 Apr 2006 01:00:19 UTC$
 
     Target: minimal
 
@@ -85,7 +85,7 @@
 	if (!elem) v = document;
 	var names = [];
 	var values = [];
-	var inputs = elem.getElementsByTagNames("INPUT");
+	var inputs = elem.getElementsByTagName("INPUT");
 	for (var i = 0; i < inputs.length; ++i) {
 		var input = inputs[i];
 		if (input.name) {
@@ -100,7 +100,7 @@
 			}
 		}
 	}
-	var textareas = elem.getElementsByTagNames("TEXTAREA");
+	var textareas = elem.getElementsByTagName("TEXTAREA");
 	for (var i = 0; i < textareas.length; ++i) {
 		var input = textareas[i];
 		if (input.name) {
@@ -108,7 +108,7 @@
 			values.push(input.value);
 		}
 	}
-	var selects = elem.getElementsByTagNames("SELECT");
+	var selects = elem.getElementsByTagName("SELECT");
 	for (var i = 0; i < selects.length; ++i) {
 		var input = textareas[i];
 		if (input.name) {
@@ -330,13 +330,14 @@
 	this._pending = null;
 };
 Freja._aux.Deferred.prototype.callback = function() {
-	if (this._good.length == 0) {
+	if (this._good.length == 0) {	
 		this._pending = [this.callback, arguments];
 		return;
 	}
 	for (var i=0; i < this._good.length; i++) {
-		this._good[i].apply(window, arguments);
+		this._good[i].apply(window, arguments);		
 	}
+	this._good = [];
 };
 Freja._aux.Deferred.prototype.errback = function() {
 	if (this._bad.length == 0) {
@@ -346,11 +347,11 @@
 	for (var i=0; i < this._bad.length; i++) {
 		this._bad[i].apply(window, arguments);
 	}
+	this._bad = [];
 };
 Freja._aux.Deferred.prototype.addCallbacks = function(fncOK, fncError) {
 	if (fncOK) this._good[this._good.length] = fncOK;
 	if (fncError) this._bad[this._bad.length] = fncError;
-
 	if (this._pending) {
 		this._pending[0].apply(this, this._pending[1]);
 	}
@@ -359,16 +360,21 @@
 	this.addCallbacks(fncOK);
 };
 Freja._aux.Deferred.prototype.addErrback = function(fncError) {
-	this.addCallbacks(null, fncOK);
+	this.addCallbacks(null, fncError);
 };
 if (document.implementation && document.implementation.hasFeature("XPath", "3.0")) {
 	XMLDocument.prototype.selectNodes = function(sExpr, contextNode) {
 		var nsDoc = this;
 		var nsresolver = this.createNSResolver(this.documentElement);
-		var oResult = this.evaluate(sExpr,
-			(contextNode ? contextNode : this),
-			nsresolver,
-			XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
+		
+		try {
+			var oResult = this.evaluate(sExpr,
+				(contextNode ? contextNode : this),
+				nsresolver,
+				XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
+		} catch(e) {
+			throw new Error("Can't evaluate expression " + sExpr);
+		}
 		var nodeList = new Array(oResult.snapshotLength);
 		nodeList.item = function(i) {
 			return (i < 0 || i >= this.length) ? null : this[i];
@@ -421,10 +427,15 @@
 	}
 };
 Freja.QueryEngine.prototype.get = function(document, expression) {
-	return this._find(document, expression).nodeValue;
+	var node = this._find(document, expression);
+	if(node) return node.nodeValue;
+	return null;
 };
 Freja.QueryEngine.prototype.set = function(document, expression, value) {
-	this._find(document, expression).nodeValue = value;
+	var node = this._find(document, expression);	
+	if(node) {
+		node.nodeValue = value;
+	}
 };
 /**
   * XPath query engine.
@@ -439,8 +450,15 @@
 		return node.firstChild;
 	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
+	} else if (node && !node.firstChild) {
+		// this is an empty node <tag />. When using 'get' it's fine to return null,
+		// but for 'set', we need to create a textnode somewhere.
+		// for lack of better idea, will do it here.
+		var n = document.createTextNode('');
+		return node.appendChild(n);
 	}
-	throw new Error("Can't evaluate expression " + expression);
+//	throw new Error("Can't evaluate expression " + expression);
+	return null;
 };
 /**
   * SimplePath
@@ -634,15 +652,15 @@
   */
 Freja.View.prototype.render = function(model, placeholder, xslParameters) {
 	if (typeof(placeholder) == "undefined") placeholder = this.placeholder;
+	if (typeof(xslParameters) == "undefined") xslParameters = this.xslParameters;
 
-	var Handler = function(model, view, deferred) {
+	var Handler = function(model, view, deferred, xslParameters) {
 		this.model = model;
 		this.view = view;
 		this.deferred = deferred;
+		this.xslParameters = xslParameters;
 	};
-
 	Handler.prototype.trigger = function() {
-	
 		try {
 			if (!this.view.ready) {
 				Freja._aux.connect(this.view, "onload", Freja._aux.bind(this.trigger, this));
@@ -662,14 +680,15 @@
 				// wrap pojo's in
 				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
 			}
-			var trans = this.view._renderer.transform(model, this.view, xslParameters);
+
+			var trans = this.view._renderer.transform(model, this.view, this.xslParameters);
 			trans.addCallback(Freja._aux.bind(function(html) {
 				this._destination.innerHTML = html;
 			}, this.view));
 			trans.addCallback(Freja._aux.bind(function() {
 				Freja._aux.signal(this, "onrendercomplete", this._destination)
 			}, this.view));
-			//trans.addCallback(this.deferred.callback);
+			trans.addCallback(this.deferred.callback);
 			trans.addErrback(this.deferred.errback);
 		} catch (ex) {
 			this.deferred.errback(ex);
@@ -683,7 +702,7 @@
 		// Perhaps we should leave it to the programmer to do this.
 		this._destination.innerHTML = Freja.AssetManager.THROBBER_HTML;
 
-		var h = new Handler(model, this, d);
+		var h = new Handler(model, this, d, xslParameters);
 		h.trigger();
 	} catch (ex) {
 		d.errback(ex);
@@ -698,7 +717,7 @@
 Freja.View.prototype._connectBehaviour = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
-		
+
 			Freja._aux.connect(node, eventType, Freja._aux.bind(
 				function(e) {
 					var allow = false;
@@ -715,12 +734,12 @@
 			);
 		};
 		var applyHandlers = function(node, handlers) {
-			
+
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("id");
-					if (id != "") {				
+					var id = child.getAttribute("freja:behaviour");
+					if (id != "") {
 						var handler = handlers[id];
 						if (handler) {
 							for (var eventType in handler) {
@@ -736,14 +755,14 @@
 				}
 			}
 		};
-		
+
 		// Avoid traversing the DOM tree if there's no handler to process.
 		// @note: is there a better way? this.handlers.length is always 0.
 		for (var ids in this.handlers) {
 			applyHandlers(destination, this.handlers);
 			break;
-		}	
-		
+		}
+
 	} catch (ex) {
 		alert(ex.message);
 	}
@@ -752,7 +771,7 @@
   * Returns the values of a formview
   */
 Freja.View.prototype.getValues = function() {
-	return formContents(this._destination);
+	return Freja._aux.formContents(this._destination);
 };
 /**
   * Base object for viewrenderers
@@ -776,7 +795,10 @@
 			// fix empty textareas
 			// Can't this be fixed by outputting as html rather than xml ?
 			// <xsl:output method="html" />
-			html = html.replace(/<textarea([^\/>]*)\/>/gi,"<textarea $1></textarea>");
+			// (cedsav) don't remember all the details but method="xml" is the way to go.
+			// method="html" would output html not xhtml, plus I think it implies that
+			// you want to output a valid html document (with html, head and body tags).
+			html = html.replace(/<textarea([^>]*)\/>/gi,"<textarea $1></textarea>");
 			d.callback(html);
 		}
 	} catch (ex) {

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-07 03:50:32 UTC (rev 37)
+++ trunk/src/View.js	2006-04-10 01:02:51 UTC (rev 38)
@@ -48,10 +48,10 @@
 				// wrap pojo's in
 				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
 			}
-			
+
 			var trans = this.view._renderer.transform(model, this.view, this.xslParameters);
-			trans.addCallback(Freja._aux.bind(function(html) {									
-				this._destination.innerHTML = html;				
+			trans.addCallback(Freja._aux.bind(function(html) {
+				this._destination.innerHTML = html;
 			}, this.view));
 			trans.addCallback(Freja._aux.bind(function() {
 				Freja._aux.signal(this, "onrendercomplete", this._destination)
@@ -85,7 +85,7 @@
 Freja.View.prototype._connectBehaviour = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
-		
+
 			Freja._aux.connect(node, eventType, Freja._aux.bind(
 				function(e) {
 					var allow = false;
@@ -102,12 +102,12 @@
 			);
 		};
 		var applyHandlers = function(node, handlers) {
-			
+
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("id");
-					if (id != "") {				
+					var id = child.getAttribute("freja:behaviour");
+					if (id != "") {
 						var handler = handlers[id];
 						if (handler) {
 							for (var eventType in handler) {
@@ -123,14 +123,14 @@
 				}
 			}
 		};
-		
+
 		// Avoid traversing the DOM tree if there's no handler to process.
 		// @note: is there a better way? this.handlers.length is always 0.
 		for (var ids in this.handlers) {
 			applyHandlers(destination, this.handlers);
 			break;
-		}	
-		
+		}
+
 	} catch (ex) {
 		alert(ex.message);
 	}

Deleted: trunk/src/auxiliary/default.js
===================================================================
--- trunk/src/auxiliary/default.js	2006-04-07 03:50:32 UTC (rev 37)
+++ trunk/src/auxiliary/default.js	2006-04-10 01:02:51 UTC (rev 38)
@@ -1,132 +0,0 @@
-/**
-  * Freja._aux
-  * wrapper for external dependencies (frameworks).
-  *
-  * This is the default auxiliary adapter. It bridges Freja to MochiKit + Sarissa
-  *
-  * You shouldn't rely on this functionality - it's merely a hook for Freja towards
-  * external dependencies. This is the only part of the application you'll need to
-  * adjust, to make Freja play ball with your favourite framework.
-  */
-if (typeof(dojo) != "undefined") {
-	dojo.require("MochiKit.Base");
-	dojo.require("MochiKit.Signal");
-	dojo.require("MochiKit.Async");
-	dojo.require("Sarissa");
-}
-if (typeof(JSAN) != "undefined") {
-	JSAN.use("MochiKit.Base", []);
-	JSAN.use("MochiKit.Signal", []);
-	JSAN.use("MochiKit.Async", []);
-	JSAN.use("Sarissa", []);
-}
-try {
-	if (typeof(MochiKit.Base) == "undefined") {
-		throw "";
-	}
-	if (typeof(MochiKit.Signal) == "undefined") {
-		throw "";
-	}
-	if (typeof(MochiKit.Async) == "undefined") {
-		throw "";
-	}
-	if (typeof(Sarissa) == "undefined") {
-		throw "";
-	}
-} catch (e) {
-	throw new Error("Freja depends on MochiKit.Base, MochiKit.Signal, MochiKit.Async and Sarissa!");
-}
-if (typeof(Freja) == "undefined") {
-	Freja = {};
-}
-Freja._aux = {};
-/** bind(func, self) : function */
-Freja._aux.bind = MochiKit.Base.bind;
-/** formContents(elem) : Array */
-Freja._aux.formContents = MochiKit.DOM.formContents;
-/** getElement(id) : HTMLElement */
-Freja._aux.getElement = MochiKit.DOM.getElement;
-
-/** registerSignals(src, signals) : void */
-Freja._aux.registerSignals = MochiKit.Signal.registerSignals;
-/** connect(src, signal, fnc) : void */
-Freja._aux.connect = MochiKit.Signal.connect;
-/** signal(src, signal, arg) : void */
-Freja._aux.signal = MochiKit.Signal.signal;
-/** createDeferred() : Deferred */
-Freja._aux.createDeferred = function() {
-	return new MochiKit.Async.Deferred();
-};
-/** openXMLHttpRequest(method, url, async, user, pass) : XMLHttpRequest */
-Freja._aux.openXMLHttpRequest = function(method, url, async, user, pass) {
-	var req = new XMLHttpRequest();
-	if (user && pass) {
-		req.open(method, url, async, user, pass);
-	} else {
-		req.open(method, url, async);
-	}
-	if (method == "POST" || method == "PUT") {
-		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
-	}
-	return req;
-};
-/** sendXMLHttpRequest(req, sendContent) : Deferred */
-Freja._aux.sendXMLHttpRequest = MochiKit.Async.sendXMLHttpRequest;
-/** xmlize(anyObject, objectName) : string */
-Freja._aux.xmlize = Sarissa.xmlize;
-/** serializeXML(node) : string */
-Freja._aux.serializeXML = Sarissa.serialize;
-/** loadXML(string) : XMLDocument */
-Freja._aux.loadXML = function(text) {
-	return (new DOMParser()).parseFromString(text, "text/xml");
-};
-/** transformXSL(XMLDocument, XSLDocument) : string */
-Freja._aux.transformXSL = function(xml, xsl) {
-	var processor = new XSLTProcessor();
-	processor.importStylesheet(xsl);
-	return Freja._aux.serializeXML(processor.transformToDocument(xml));
-
-};
-/** cloneXMLDocument(document) : XMLDocument */
-Freja._aux.cloneXMLDocument = function(xmlDoc) {
-	var clone = null;
-	try {
-		clone = xmlDoc.cloneNode(true);
-	} catch(e) { /* squelch */ }
-
-	// Can't clone a DocumentNode in Safari & Opera. Let's try something else.
-	// @note Wouldn't it be easier to serialize the document to string and the parse it to a new document ?
-	if (!clone) {
-		if (document.implementation && document.implementation.createDocument) {
-			clone = document.implementation.createDocument("", xmlDoc.documentElement.nodeName, null);
-			// importNode is not safe in Safari ! the source document is altered. used cloneNode to fix the prblm
-			var data = clone.importNode(xmlDoc.documentElement.cloneNode(true), true);
-			try {
-				clone.appendChild(data);
-			} catch(e) {
-				// Opera has already created a documentElement and can't append another root node
-				var rootNode = clone.documentElement;
-				for (var i = data.childNodes.length; i >= 0; i--) {
-					rootNode.insertBefore(data.childNodes[i], rootNode.firstChild);
-				}
-				// need to copy root node attributes
-				for (var i = 0; i < xmlDoc.documentElement.attributes.length; i++) {
-					var name  = xmlDoc.documentElement.attributes.item(i).name;
-					var value = xmlDoc.documentElement.attributes.item(i).value;
-					clone.documentElement.setAttribute(name, value);
-				}
-			}
-		}
-	}
-	return clone;
-};
-/** hasSupportForXSLT() : boolean */
-Freja._aux.hasSupportForXSLT = function() { return (typeof(XSLTProcessor) != "undefined"); };
-/** createQueryEngine() : Freja.QueryEngine */
-Freja._aux.createQueryEngine = function() {
-	if (Sarissa.IS_ENABLED_SELECT_NODES) {
-		return new Freja.QueryEngine.XPath();
-	} else {
-		return new Freja.QueryEngine.SimplePath();
-	}
-};

Copied: trunk/src/auxiliary/mochi+sarissa.js (from rev 37, trunk/src/auxiliary/default.js)

Modified: trunk/tests/data/form-view.xsl
===================================================================
--- trunk/tests/data/form-view.xsl	2006-04-07 03:50:32 UTC (rev 37)
+++ trunk/tests/data/form-view.xsl	2006-04-10 01:02:51 UTC (rev 38)
@@ -1,12 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+	xmlns:freja="http://formassembly.com/freja"
+>
 
 <xsl:template match="item">	
-	<form method="post" handler="form">
+	<form method="post" freja:behaviour="form">
 		<h3><input name="item/name" type="text" value="{name}" /></h3>
 		<p><textarea name="item/description"><xsl:value-of select="description" /></textarea></p>
 		<p><input name="item/price" type="text" value="{price}" /></p>
-		<input type="submit" value="ok" handler="form-submit" id="form-submit" />
+		<input type="submit" value="ok" freja:behaviour="form-submit" id="form-submit" />
 	</form>
 </xsl:template>
 

Modified: trunk/tests/test_Freja-Model.html
===================================================================
--- trunk/tests/test_Freja-Model.html	2006-04-07 03:50:32 UTC (rev 37)
+++ trunk/tests/test_Freja-Model.html	2006-04-10 01:02:51 UTC (rev 38)
@@ -3,9 +3,7 @@
     <!-- MochiKit is needed by SimpleTest -->
     <script type="text/javascript" src="../lib/MochiKit.js"></script>
     <script type="text/javascript" src="SimpleTest/SimpleTest.js"></script>
-<!--
     <script type="text/javascript" src="../lib/Sarissa.js"></script>
--->
     <script type="text/javascript" src="../lib/Freja.js"></script>
     <link rel="stylesheet" type="text/css" href="SimpleTest/test.css">
 </head>

Modified: trunk/tests/test_Model.js
===================================================================
--- trunk/tests/test_Model.js	2006-04-07 03:50:32 UTC (rev 37)
+++ trunk/tests/test_Model.js	2006-04-10 01:02:51 UTC (rev 38)
@@ -4,6 +4,8 @@
 
 tests.test_Model = function (t) {
 	// test of SimplePath (XPath query replacement)
+	t.ok(typeof(Freja) == "object");
+
 	var q = new Freja.QueryEngine.SimplePath();
 	var doc = document.createElement("DIV");
 	var span = document.createElement("SPAN");

Modified: trunk/tests/test_View.js
===================================================================
--- trunk/tests/test_View.js	2006-04-07 03:50:32 UTC (rev 37)
+++ trunk/tests/test_View.js	2006-04-10 01:02:51 UTC (rev 38)
@@ -15,8 +15,9 @@
 	var out = document.createElement("DIV");
 	view.render(model, out);
 
-	t.is(out.getElementsByTagName("H3").length, 1);
-	t.is(out.getElementsByTagName("H3").item(0).firstChild.nodeValue, model.get("item/name"), "Rendered view should contain the models value");
+//	alert(out.innerHTML);
+	t.is(out.getElementsByTagName("H3").length, 1, "The rendered view should contain 1 H3 tag");
+	t.is(out.getElementsByTagName("H3").item(0).firstChild.nodeValue, model.get("item/name"), "Rendered view should contain the model's value");
 
 	// test of pojo model
 	Freja.AssetManager.clearCache();



From troelskn at berlios.de  Mon Apr 10 03:36:08 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Mon, 10 Apr 2006 03:36:08 +0200
Subject: [Freja-svn] r39 - in trunk/examples: contacts/views tutorial/views
Message-ID: <200604100136.k3A1a8RU032258@sheep.berlios.de>

Author: troelskn
Date: 2006-04-10 03:35:12 +0200 (Mon, 10 Apr 2006)
New Revision: 39

Modified:
   trunk/examples/contacts/views/create.xsl
   trunk/examples/contacts/views/edit.xsl
   trunk/examples/contacts/views/index.xsl
   trunk/examples/tutorial/views/display.xsl
   trunk/examples/tutorial/views/edit.xsl
Log:
updated example

Modified: trunk/examples/contacts/views/create.xsl
===================================================================
--- trunk/examples/contacts/views/create.xsl	2006-04-10 01:02:51 UTC (rev 38)
+++ trunk/examples/contacts/views/create.xsl	2006-04-10 01:35:12 UTC (rev 39)
@@ -1,12 +1,16 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+	xmlns:freja="http://formassembly.com/freja"
+>
+
 <xsl:template match="/">
-	<form method="post" action="#" handler="form">
+	<form method="post" action="#" freja:behaviour="form">
 		<p>email:<input name="email" type="text" value="" /></p>
 		<p>first_name:<input name="first_name" type="text" value="" /></p>
 		<p>surname:<input name="surname" type="text" value="" /></p>
 		<p>
-			<input type="button" value="cancel" handler="cancel" />
+			<input type="button" value="cancel" freja:behaviour="cancel" />
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/examples/contacts/views/edit.xsl
===================================================================
--- trunk/examples/contacts/views/edit.xsl	2006-04-10 01:02:51 UTC (rev 38)
+++ trunk/examples/contacts/views/edit.xsl	2006-04-10 01:35:12 UTC (rev 39)
@@ -1,14 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+	xmlns:freja="http://formassembly.com/freja"
+>
 
 <xsl:template match="record">	
-	<form method="post" action="#" handler="form">
+	<form method="post" action="#" freja:behaviour="form">
 	<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 		<p><xsl:value-of select="email" /></p>
 		<p><input name="record/first_name" type="text" value="{first_name}" /></p>
 		<p><input name="record/surname" type="text" value="{surname}" /></p>
 		<p>
-			<input type="button" value="cancel" handler="cancel" />
+			<input type="button" value="cancel" freja:behaviour="cancel" />
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/examples/contacts/views/index.xsl
===================================================================
--- trunk/examples/contacts/views/index.xsl	2006-04-10 01:02:51 UTC (rev 38)
+++ trunk/examples/contacts/views/index.xsl	2006-04-10 01:35:12 UTC (rev 39)
@@ -1,5 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+	xmlns:freja="http://formassembly.com/freja"
+>
 
 <xsl:template match="result">
 <table border="1" cellpadding="4" cellspacing="4">
@@ -7,17 +10,17 @@
 	<tr>
 		<td><xsl:value-of select="email" /></td>
 		<td>
-			<input type="button" value="edit" handler="edit">
+			<input type="button" value="edit" freja:behaviour="edit">
 				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
-			<input type="button" value="delete" handler="delete">
+			<input type="button" value="delete" freja:behaviour="delete">
 				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
 		</td>
 	</tr>
 </xsl:for-each> 
 	<tr>
-		<td align="right" colspan="2"><input type="button" value="create" handler="create" /></td>
+		<td align="right" colspan="2"><input type="button" value="create" freja:behaviour="create" /></td>
 	</tr>
 </table>
 </xsl:template>

Modified: trunk/examples/tutorial/views/display.xsl
===================================================================
--- trunk/examples/tutorial/views/display.xsl	2006-04-10 01:02:51 UTC (rev 38)
+++ trunk/examples/tutorial/views/display.xsl	2006-04-10 01:35:12 UTC (rev 39)
@@ -1,12 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+	xmlns:freja="http://formassembly.com/freja"
+>
 
 <xsl:template match="item">	
 <div>
 	<h3><xsl:value-of select="name" /></h3>
 	<p><xsl:value-of select="description" /></p>
 	<p><em>Price: <xsl:value-of select="price" /></em></p>
-	<p><a href="#" handler="editLink">edit</a></p>
+	<p><a href="#" freja:behaviour="editLink">edit</a></p>
 </div>
 </xsl:template>
 

Modified: trunk/examples/tutorial/views/edit.xsl
===================================================================
--- trunk/examples/tutorial/views/edit.xsl	2006-04-10 01:02:51 UTC (rev 38)
+++ trunk/examples/tutorial/views/edit.xsl	2006-04-10 01:35:12 UTC (rev 39)
@@ -1,13 +1,16 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+	xmlns:freja="http://formassembly.com/freja"
+>
 
 <xsl:template match="item">	
-	<form method="post" action="#" handler="editForm">
+	<form method="post" action="#" freja:behaviour="editForm">
 		<h3><input name="item/name" type="text" value="{name}" /></h3>
 		<p><textarea name="item/description"><xsl:value-of select="description" /></textarea></p>
 		<p><input name="item/price" type="text" value="{price}" /></p>
 		<p>
-			<a href="#" handler="displayLink">display</a>
+			<a href="#" freja:behaviour="displayLink">display</a>
 			<input type="submit" value="ok" />
 		</p>
 	</form>



From troelskn at berlios.de  Mon Apr 10 16:06:37 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Mon, 10 Apr 2006 16:06:37 +0200
Subject: [Freja-svn] r40 - in trunk: examples/contacts/views examples/tutorial/views lib src src/auxiliary tests/data
Message-ID: <200604101406.k3AE6beM000711@sheep.berlios.de>

Author: troelskn
Date: 2006-04-10 16:06:34 +0200 (Mon, 10 Apr 2006)
New Revision: 40

Modified:
   trunk/examples/contacts/views/create.xsl
   trunk/examples/contacts/views/edit.xsl
   trunk/examples/contacts/views/index.xsl
   trunk/examples/tutorial/views/display.xsl
   trunk/examples/tutorial/views/edit.xsl
   trunk/lib/Freja.js
   trunk/src/View.js
   trunk/src/auxiliary/minimal.js
   trunk/tests/data/form-view.xsl
Log:
It appears that Opera doesn't deal correctly with namespaces. I have therefore changed the freja:behaviour attribute into the non-standard, but de-facto working freja-behaviour.
Fixed a minor IE bug in auxiliary/minimal.js

Modified: trunk/examples/contacts/views/create.xsl
===================================================================
--- trunk/examples/contacts/views/create.xsl	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/examples/contacts/views/create.xsl	2006-04-10 14:06:34 UTC (rev 40)
@@ -1,16 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <xsl:stylesheet version="1.0"
-	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-	xmlns:freja="http://formassembly.com/freja"
->
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="/">
-	<form method="post" action="#" freja:behaviour="form">
+	<form method="post" action="#" freja-behaviour="form">
 		<p>email:<input name="email" type="text" value="" /></p>
 		<p>first_name:<input name="first_name" type="text" value="" /></p>
 		<p>surname:<input name="surname" type="text" value="" /></p>
 		<p>
-			<input type="button" value="cancel" freja:behaviour="cancel" />
+			<input type="button" value="cancel" freja-behaviour="cancel" />
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/examples/contacts/views/edit.xsl
===================================================================
--- trunk/examples/contacts/views/edit.xsl	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/examples/contacts/views/edit.xsl	2006-04-10 14:06:34 UTC (rev 40)
@@ -1,17 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <xsl:stylesheet version="1.0"
-	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-	xmlns:freja="http://formassembly.com/freja"
->
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="record">	
-	<form method="post" action="#" freja:behaviour="form">
+	<form method="post" action="#" freja-behaviour="form">
 	<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 		<p><xsl:value-of select="email" /></p>
 		<p><input name="record/first_name" type="text" value="{first_name}" /></p>
 		<p><input name="record/surname" type="text" value="{surname}" /></p>
 		<p>
-			<input type="button" value="cancel" freja:behaviour="cancel" />
+			<input type="button" value="cancel" freja-behaviour="cancel" />
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/examples/contacts/views/index.xsl
===================================================================
--- trunk/examples/contacts/views/index.xsl	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/examples/contacts/views/index.xsl	2006-04-10 14:06:34 UTC (rev 40)
@@ -1,8 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <xsl:stylesheet version="1.0"
-	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-	xmlns:freja="http://formassembly.com/freja"
->
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="result">
 <table border="1" cellpadding="4" cellspacing="4">
@@ -10,17 +8,17 @@
 	<tr>
 		<td><xsl:value-of select="email" /></td>
 		<td>
-			<input type="button" value="edit" freja:behaviour="edit">
+			<input type="button" value="edit" freja-behaviour="edit">
 				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
-			<input type="button" value="delete" freja:behaviour="delete">
+			<input type="button" value="delete" freja-behaviour="delete">
 				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
 		</td>
 	</tr>
 </xsl:for-each> 
 	<tr>
-		<td align="right" colspan="2"><input type="button" value="create" freja:behaviour="create" /></td>
+		<td align="right" colspan="2"><input type="button" value="create" freja-behaviour="create" /></td>
 	</tr>
 </table>
 </xsl:template>

Modified: trunk/examples/tutorial/views/display.xsl
===================================================================
--- trunk/examples/tutorial/views/display.xsl	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/examples/tutorial/views/display.xsl	2006-04-10 14:06:34 UTC (rev 40)
@@ -1,15 +1,13 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <xsl:stylesheet version="1.0"
-	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-	xmlns:freja="http://formassembly.com/freja"
->
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="item">	
 <div>
 	<h3><xsl:value-of select="name" /></h3>
 	<p><xsl:value-of select="description" /></p>
 	<p><em>Price: <xsl:value-of select="price" /></em></p>
-	<p><a href="#" freja:behaviour="editLink">edit</a></p>
+	<p><a href="#" freja-behaviour="editLink">edit</a></p>
 </div>
 </xsl:template>
 

Modified: trunk/examples/tutorial/views/edit.xsl
===================================================================
--- trunk/examples/tutorial/views/edit.xsl	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/examples/tutorial/views/edit.xsl	2006-04-10 14:06:34 UTC (rev 40)
@@ -1,16 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <xsl:stylesheet version="1.0"
-	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-	xmlns:freja="http://formassembly.com/freja"
->
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="item">	
-	<form method="post" action="#" freja:behaviour="editForm">
+	<form method="post" action="#" freja-behaviour="editForm">
 		<h3><input name="item/name" type="text" value="{name}" /></h3>
 		<p><textarea name="item/description"><xsl:value-of select="description" /></textarea></p>
 		<p><input name="item/price" type="text" value="{price}" /></p>
 		<p>
-			<a href="#" freja:behaviour="displayLink">display</a>
+			<a href="#" freja-behaviour="displayLink">display</a>
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/lib/Freja.js	2006-04-10 14:06:34 UTC (rev 40)
@@ -2,7 +2,7 @@
 
     Freja 2.0.alpha
 
-    Build $Mon, 10 Apr 2006 01:00:19 UTC$
+    Build $Mon, 10 Apr 2006 13:58:21 UTC$
 
     Target: minimal
 
@@ -65,7 +65,7 @@
 	if(typeof (func)=="string"){
 		func=self[func];
 	}
-		
+
 	var im_func = null;
     if (typeof(func.im_func) == 'function') {
         im_func = func.im_func;
@@ -78,7 +78,7 @@
     func.im_func = im_func;
     func.im_self = self;
 	return func;
-	
+
 };
 /** formContents(elem) : Array */
 Freja._aux.formContents = function(elem) {
@@ -172,7 +172,7 @@
 };
 /** signal(src, signal, ...) : void */
 Freja._aux.signal = function(src, signal) {
-	
+
 	try {
 		var sigs = src._signals[signal];
 		var args = [];
@@ -180,7 +180,7 @@
 			args.push(arguments[i]);
 		}
 		for (var i=0; i < sigs.length; i++) {
-			try {							
+			try {
 				sigs[i].apply(src, args);
 			} catch (e) { /* squelch */ }
 		}
@@ -269,13 +269,13 @@
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
 Freja._aux.transformXSL = function(xml, xsl, xslParameters) {
-	if (xml.transformNode) {
+	if (typeof(xml.transformNode) != "undefined") {
 		return xml.transformNode(xsl);
 	};
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
-	for(var paramName in xslParameters) {
-		processor.setParameter(null, paramName,xslParameters[paramName]); 
+	for (var paramName in xslParameters) {
+		processor.setParameter(null, paramName, xslParameters[paramName]);
 	}
 	return Freja._aux.serializeXML(processor.transformToDocument(xml));
 
@@ -330,12 +330,12 @@
 	this._pending = null;
 };
 Freja._aux.Deferred.prototype.callback = function() {
-	if (this._good.length == 0) {	
+	if (this._good.length == 0) {
 		this._pending = [this.callback, arguments];
 		return;
 	}
 	for (var i=0; i < this._good.length; i++) {
-		this._good[i].apply(window, arguments);		
+		this._good[i].apply(window, arguments);
 	}
 	this._good = [];
 };
@@ -366,7 +366,7 @@
 	XMLDocument.prototype.selectNodes = function(sExpr, contextNode) {
 		var nsDoc = this;
 		var nsresolver = this.createNSResolver(this.documentElement);
-		
+
 		try {
 			var oResult = this.evaluate(sExpr,
 				(contextNode ? contextNode : this),
@@ -738,7 +738,7 @@
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("freja:behaviour");
+					var id = child.getAttribute("freja-behaviour");
 					if (id != "") {
 						var handler = handlers[id];
 						if (handler) {

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/src/View.js	2006-04-10 14:06:34 UTC (rev 40)
@@ -106,7 +106,7 @@
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("freja:behaviour");
+					var id = child.getAttribute("freja-behaviour");
 					if (id != "") {
 						var handler = handlers[id];
 						if (handler) {

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/src/auxiliary/minimal.js	2006-04-10 14:06:34 UTC (rev 40)
@@ -16,7 +16,7 @@
 	if(typeof (func)=="string"){
 		func=self[func];
 	}
-		
+
 	var im_func = null;
     if (typeof(func.im_func) == 'function') {
         im_func = func.im_func;
@@ -29,7 +29,7 @@
     func.im_func = im_func;
     func.im_self = self;
 	return func;
-	
+
 };
 /** formContents(elem) : Array */
 Freja._aux.formContents = function(elem) {
@@ -123,7 +123,7 @@
 };
 /** signal(src, signal, ...) : void */
 Freja._aux.signal = function(src, signal) {
-	
+
 	try {
 		var sigs = src._signals[signal];
 		var args = [];
@@ -131,7 +131,7 @@
 			args.push(arguments[i]);
 		}
 		for (var i=0; i < sigs.length; i++) {
-			try {							
+			try {
 				sigs[i].apply(src, args);
 			} catch (e) { /* squelch */ }
 		}
@@ -220,13 +220,13 @@
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
 Freja._aux.transformXSL = function(xml, xsl, xslParameters) {
-	if (xml.transformNode) {
+	if (typeof(xml.transformNode) != "undefined") {
 		return xml.transformNode(xsl);
 	};
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
-	for(var paramName in xslParameters) {
-		processor.setParameter(null, paramName,xslParameters[paramName]); 
+	for (var paramName in xslParameters) {
+		processor.setParameter(null, paramName, xslParameters[paramName]);
 	}
 	return Freja._aux.serializeXML(processor.transformToDocument(xml));
 
@@ -281,12 +281,12 @@
 	this._pending = null;
 };
 Freja._aux.Deferred.prototype.callback = function() {
-	if (this._good.length == 0) {	
+	if (this._good.length == 0) {
 		this._pending = [this.callback, arguments];
 		return;
 	}
 	for (var i=0; i < this._good.length; i++) {
-		this._good[i].apply(window, arguments);		
+		this._good[i].apply(window, arguments);
 	}
 	this._good = [];
 };
@@ -317,7 +317,7 @@
 	XMLDocument.prototype.selectNodes = function(sExpr, contextNode) {
 		var nsDoc = this;
 		var nsresolver = this.createNSResolver(this.documentElement);
-		
+
 		try {
 			var oResult = this.evaluate(sExpr,
 				(contextNode ? contextNode : this),

Modified: trunk/tests/data/form-view.xsl
===================================================================
--- trunk/tests/data/form-view.xsl	2006-04-10 01:35:12 UTC (rev 39)
+++ trunk/tests/data/form-view.xsl	2006-04-10 14:06:34 UTC (rev 40)
@@ -1,15 +1,13 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <xsl:stylesheet version="1.0"
-	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
-	xmlns:freja="http://formassembly.com/freja"
->
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="item">	
-	<form method="post" freja:behaviour="form">
+	<form method="post" freja-behaviour="form">
 		<h3><input name="item/name" type="text" value="{name}" /></h3>
 		<p><textarea name="item/description"><xsl:value-of select="description" /></textarea></p>
 		<p><input name="item/price" type="text" value="{price}" /></p>
-		<input type="submit" value="ok" freja:behaviour="form-submit" id="form-submit" />
+		<input type="submit" value="ok" freja-behaviour="form-submit" id="form-submit" />
 	</form>
 </xsl:template>
 



From troelskn at berlios.de  Mon Apr 10 16:30:13 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Mon, 10 Apr 2006 16:30:13 +0200
Subject: [Freja-svn] r41 - in trunk: examples/contacts examples/tutorial lib src tests
Message-ID: <200604101430.k3AEUDce022632@sheep.berlios.de>

Author: troelskn
Date: 2006-04-10 16:30:09 +0200 (Mon, 10 Apr 2006)
New Revision: 41

Modified:
   trunk/examples/contacts/client.js
   trunk/examples/tutorial/example.js
   trunk/examples/tutorial/example2.js
   trunk/lib/Freja.js
   trunk/src/View.js
   trunk/tests/test_View.js
Log:
renamed handlers to behaviour

Modified: trunk/examples/contacts/client.js
===================================================================
--- trunk/examples/contacts/client.js	2006-04-10 14:06:34 UTC (rev 40)
+++ trunk/examples/contacts/client.js	2006-04-10 14:30:09 UTC (rev 41)
@@ -5,12 +5,12 @@
 // view : index
 var index = getView("views/index.xsl");
 index.placeholder = "content";
-index.handlers["edit"] = {
+index.behaviours["edit"] = {
 	onclick : function(node) {
 		edit.render(getModel(node.getAttribute('url')));
 	}
 };
-index.handlers["delete"] = {
+index.behaviours["delete"] = {
 	onclick : function(node) {
 		if (!confirm("Really delete it?")) {
 			return;
@@ -24,7 +24,7 @@
 		});
 	}
 };
-index.handlers["create"] = {
+index.behaviours["create"] = {
 	onclick : function(node) {
 		create.render();
 	}
@@ -33,7 +33,7 @@
 // view : create
 var create = getView("views/create.xsl");
 create.placeholder = "content";
-create.handlers["form"] = {
+create.behaviours["form"] = {
 	onsubmit : function(node) {
 		var d = contacts.create(getView("views/create.xsl").getValues());
 		d.addCallback(function() {
@@ -44,7 +44,7 @@
 		index.render(contacts.select());
 	}
 };
-create.handlers["cancel"] = {
+create.behaviours["cancel"] = {
 	onclick : function() {
 		index.render(contacts.select());
 	}
@@ -53,7 +53,7 @@
 // view : edit
 var edit = getView("views/edit.xsl");
 edit.placeholder = "content";
-edit.handlers["form"] = {
+edit.behaviours["form"] = {
 	onsubmit : function(node) {
 		try {
 			var model = getModel(node.getAttribute('url'));
@@ -70,7 +70,7 @@
 		}
 	}
 };
-edit.handlers["cancel"] = {
+edit.behaviours["cancel"] = {
 	onclick : function() {
 		index.render(contacts.select());
 	}

Modified: trunk/examples/tutorial/example.js
===================================================================
--- trunk/examples/tutorial/example.js	2006-04-10 14:06:34 UTC (rev 40)
+++ trunk/examples/tutorial/example.js	2006-04-10 14:30:09 UTC (rev 41)
@@ -2,16 +2,16 @@
 
 var display = getView("views/display.xsl");
 display.placeholder = 'content';
-display.handlers["editLink"] = {
+display.behaviours["editLink"] = {
 	onclick : function() { dispatch('edit'); }
 };
 
 var edit = getView("views/edit.xsl");
 edit.placeholder = 'content';
-edit.handlers["editForm"] = {
+edit.behaviours["editForm"] = {
 	onsubmit : function() { dispatch('update'); }
 };
-edit.handlers["displayLink"] = {
+edit.behaviours["displayLink"] = {
 	onclick : function() { dispatch('display'); }
 };
 

Modified: trunk/examples/tutorial/example2.js
===================================================================
--- trunk/examples/tutorial/example2.js	2006-04-10 14:06:34 UTC (rev 40)
+++ trunk/examples/tutorial/example2.js	2006-04-10 14:30:09 UTC (rev 41)
@@ -2,7 +2,7 @@
 
 var display = getView("views/display.xsl");
 display.placeholder = "content";
-display.handlers["editLink"] = {
+display.behaviours["editLink"] = {
 	onclick : function() {
 		edit.render(data);
 	}
@@ -10,7 +10,7 @@
 
 var edit = getView("views/edit.xsl");
 edit.placeholder = "content";
-edit.handlers["editForm"] = {
+edit.behaviours["editForm"] = {
 	onsubmit : function() {
 		try {
 			data.updateFrom(edit);
@@ -20,7 +20,7 @@
 		}
 	}
 };
-edit.handlers["displayLink"] = {
+edit.behaviours["displayLink"] = {
 	onclick : function() {
 		display.render(data);
 	}

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-04-10 14:06:34 UTC (rev 40)
+++ trunk/lib/Freja.js	2006-04-10 14:30:09 UTC (rev 41)
@@ -2,7 +2,7 @@
 
     Freja 2.0.alpha
 
-    Build $Mon, 10 Apr 2006 13:58:21 UTC$
+    Build $Mon, 10 Apr 2006 14:29:25 UTC$
 
     Target: minimal
 
@@ -639,7 +639,7 @@
 	this.document = null;
 	this._renderer = renderer;
 	this._destination = null;
-	this.handlers = [];
+	this.behaviours = [];
 	this.placeholder = null;
 	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
 	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehaviour, this));
@@ -712,7 +712,7 @@
 /**
   * Decorates the output of the primary renderer, to inject behaviour.
   * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
-  *       to identify targets for behaviour, rather than just the id-attribute.
+  *       to identify targets for behaviour
   */
 Freja.View.prototype._connectBehaviour = function(destination) {
 	try {
@@ -733,14 +733,14 @@
 				}, node)
 			);
 		};
-		var applyHandlers = function(node, handlers) {
+		var applyHandlers = function(node, behaviours) {
 
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
 					var id = child.getAttribute("freja-behaviour");
 					if (id != "") {
-						var handler = handlers[id];
+						var handler = behaviours[id];
 						if (handler) {
 							for (var eventType in handler) {
 								if (eventType == "init") {
@@ -751,15 +751,16 @@
 							}
 						}
 					}
-					applyHandlers(child, handlers);
+					applyHandlers(child, behaviours);
 				}
 			}
 		};
 
 		// Avoid traversing the DOM tree if there's no handler to process.
-		// @note: is there a better way? this.handlers.length is always 0.
-		for (var ids in this.handlers) {
-			applyHandlers(destination, this.handlers);
+		// @note: is there a better way? this.behaviours.length is always 0.
+		// @note  This is fine. behaviours is a hashmap, not an array.
+		for (var ids in this.behaviours) {
+			applyHandlers(destination, this.behaviours);
 			break;
 		}
 

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-10 14:06:34 UTC (rev 40)
+++ trunk/src/View.js	2006-04-10 14:30:09 UTC (rev 41)
@@ -7,7 +7,7 @@
 	this.document = null;
 	this._renderer = renderer;
 	this._destination = null;
-	this.handlers = [];
+	this.behaviours = [];
 	this.placeholder = null;
 	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
 	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehaviour, this));
@@ -80,7 +80,7 @@
 /**
   * Decorates the output of the primary renderer, to inject behaviour.
   * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
-  *       to identify targets for behaviour, rather than just the id-attribute.
+  *       to identify targets for behaviour
   */
 Freja.View.prototype._connectBehaviour = function(destination) {
 	try {
@@ -101,14 +101,14 @@
 				}, node)
 			);
 		};
-		var applyHandlers = function(node, handlers) {
+		var applyHandlers = function(node, behaviours) {
 
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
 					var id = child.getAttribute("freja-behaviour");
 					if (id != "") {
-						var handler = handlers[id];
+						var handler = behaviours[id];
 						if (handler) {
 							for (var eventType in handler) {
 								if (eventType == "init") {
@@ -119,15 +119,16 @@
 							}
 						}
 					}
-					applyHandlers(child, handlers);
+					applyHandlers(child, behaviours);
 				}
 			}
 		};
 
 		// Avoid traversing the DOM tree if there's no handler to process.
-		// @note: is there a better way? this.handlers.length is always 0.
-		for (var ids in this.handlers) {
-			applyHandlers(destination, this.handlers);
+		// @note: is there a better way? this.behaviours.length is always 0.
+		// @note  This is fine. behaviours is a hashmap, not an array.
+		for (var ids in this.behaviours) {
+			applyHandlers(destination, this.behaviours);
 			break;
 		}
 

Modified: trunk/tests/test_View.js
===================================================================
--- trunk/tests/test_View.js	2006-04-10 14:06:34 UTC (rev 40)
+++ trunk/tests/test_View.js	2006-04-10 14:30:09 UTC (rev 41)
@@ -36,7 +36,7 @@
 	// test of form
 	var formView = Freja.AssetManager.getView("data/form-view.xsl");
 	var testofsubmit = false;
-	formView.handlers["form"] = {
+	formView.behaviours["form"] = {
 		onsubmit : function() { testofsubmit = true; }
 	};
 	formView.render(model, out);



From cedsav at berlios.de  Mon Apr 10 20:44:22 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Mon, 10 Apr 2006 20:44:22 +0200
Subject: [Freja-svn] r42 - trunk/src/auxiliary
Message-ID: <200604101844.k3AIiMtY005240@sheep.berlios.de>

Author: cedsav
Date: 2006-04-10 20:44:11 +0200 (Mon, 10 Apr 2006)
New Revision: 42

Modified:
   trunk/src/auxiliary/minimal.js
Log:
fixed typo 

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-10 14:30:09 UTC (rev 41)
+++ trunk/src/auxiliary/minimal.js	2006-04-10 18:44:11 UTC (rev 42)
@@ -61,7 +61,7 @@
 	}
 	var selects = elem.getElementsByTagName("SELECT");
 	for (var i = 0; i < selects.length; ++i) {
-		var input = textareas[i];
+		var input = selects[i];
 		if (input.name) {
 			if (input.selectedIndex >= 0) {
 				var opt = input.options[input.selectedIndex];



From cedsav at berlios.de  Tue Apr 11 23:34:11 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Tue, 11 Apr 2006 23:34:11 +0200
Subject: [Freja-svn] r43 - trunk/src/auxiliary
Message-ID: <200604112134.k3BLYBWH005091@sheep.berlios.de>

Author: cedsav
Date: 2006-04-11 23:34:07 +0200 (Tue, 11 Apr 2006)
New Revision: 43

Modified:
   trunk/src/auxiliary/minimal.js
Log:
added xsl parameters support for IE

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-10 18:44:11 UTC (rev 42)
+++ trunk/src/auxiliary/minimal.js	2006-04-11 21:34:07 UTC (rev 43)
@@ -220,9 +220,28 @@
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
 Freja._aux.transformXSL = function(xml, xsl, xslParameters) {
-	if (typeof(xml.transformNode) != "undefined") {
+	if (typeof(xml.transformNode) != "undefined") {	
+		// set the parameters		
+		for (var paramName in xslParameters) {
+			try {
+			xsl.setProperty ("SelectionNamespaces", "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");			
+			var paramNode = xsl.selectSingleNode("//xsl:param[@name='"+ paramName +"']");					
+			paramNode.appendChild(xsl.createTextNode(xslParameters[paramName]));
+			} catch(x) {
+				throw(x.message);
+			}			
+		}		
 		return xml.transformNode(xsl);
+
+		// clean the stylesheet.
+		for (var paramName in xslParameters) {
+			var paramNode = xsl.selectSingleNode("//xsl:param[@name='"+ paramName +"']");
+			while(paramNode.firstChild) {
+				paramNode.removeChild(paramNode.firstChild);
+			}
+		}
 	};
+
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
 	for (var paramName in xslParameters) {
@@ -362,4 +381,67 @@
 			throw new Error("Method selectNodes is only supported by XML Elements");
 		}
 	};
-};
\ No newline at end of file
+};
+
+// Adapated From Sarissa
+// * @version 0.9.6.1
+// * @author: Manos Batsis, mailto: mbatsis at users full stop sourceforge full stop net
+
+Freja._aux.pickRecentProgID = function(idList) {
+    var bFound = false;
+    for(var i=0; i < idList.length && !bFound; i++){
+        try{
+            var oDoc = new ActiveXObject(idList[i]);
+            return idList[i];
+        } catch (objException){ // trap; try next progID
+        };
+    };
+    throw "Could not retrieve a valid progID.";
+}
+
+if(typeof XSLTProcessor == 'undefined' && typeof ActiveXObject  != 'undefined') {
+alert('ok');
+    _SARISSA_DOM_PROGID = Freja._aux.pickRecentProgID(["Msxml2.DOMDocument.5.0", "Msxml2.DOMDocument.4.0", "Msxml2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"]);
+    _SARISSA_XMLHTTP_PROGID = Freja._aux.pickRecentProgID(["Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"]);
+    _SARISSA_THREADEDDOM_PROGID = Freja._aux.pickRecentProgID(["Msxml2.FreeThreadedDOMDocument.5.0", "MSXML2.FreeThreadedDOMDocument.4.0", "MSXML2.FreeThreadedDOMDocument.3.0"]);
+    _SARISSA_XSLTEMPLATE_PROGID = Freja._aux.pickRecentProgID(["Msxml2.XSLTemplate.5.0", "Msxml2.XSLTemplate.4.0", "MSXML2.XSLTemplate.3.0"]);
+
+	XSLTProcessor = function(){
+	    this.template = new ActiveXObject(_SARISSA_XSLTEMPLATE_PROGID);
+	    this.processor = null;
+	};
+
+	XSLTProcessor.prototype.importStylesheet = function(xslDoc){
+	    // convert stylesheet to free threaded
+	    var converted = new ActiveXObject(_SARISSA_THREADEDDOM_PROGID);
+	    converted.loadXML(xslDoc.xml);
+	    this.template.stylesheet = converted;
+	    this.processor = this.template.createProcessor();
+	    // (re)set default param values
+	    this.paramsSet = new Array();
+	};
+
+	XSLTProcessor.prototype.transformToDocument = function(sourceDoc){
+	    this.processor.input = sourceDoc;
+	    var outDoc = new ActiveXObject(_SARISSA_DOM_PROGID);
+	    this.processor.output = outDoc;
+	    this.processor.transform();
+	    return outDoc;
+	};
+
+	XSLTProcessor.prototype.setParameter = function(nsURI, name, value){
+	    /* nsURI is optional but cannot be null */
+	    if(nsURI){
+	        this.processor.addParameter(name, value, nsURI);
+	    }else{
+	        this.processor.addParameter(name, value);
+	    };
+	    /* update updated params for getParameter */
+	    if(!this.paramsSet[""+nsURI]){
+	        this.paramsSet[""+nsURI] = new Array();
+	    };
+	    this.paramsSet[""+nsURI][name] = value;
+	};
+
+}
+



From cedsav at berlios.de  Wed Apr 12 23:10:38 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Wed, 12 Apr 2006 23:10:38 +0200
Subject: [Freja-svn] r44 - trunk/src/auxiliary
Message-ID: <200604122110.k3CLAc8J009433@sheep.berlios.de>

Author: cedsav
Date: 2006-04-12 23:10:35 +0200 (Wed, 12 Apr 2006)
New Revision: 44

Modified:
   trunk/src/auxiliary/minimal.js
Log:
Bug fix for xslparameters in IE.

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-11 21:34:07 UTC (rev 43)
+++ trunk/src/auxiliary/minimal.js	2006-04-12 21:10:35 UTC (rev 44)
@@ -223,15 +223,12 @@
 	if (typeof(xml.transformNode) != "undefined") {	
 		// set the parameters		
 		for (var paramName in xslParameters) {
-			try {
 			xsl.setProperty ("SelectionNamespaces", "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");			
 			var paramNode = xsl.selectSingleNode("//xsl:param[@name='"+ paramName +"']");					
 			paramNode.appendChild(xsl.createTextNode(xslParameters[paramName]));
-			} catch(x) {
-				throw(x.message);
-			}			
+			// @TODO: check if we have the 'select' attribute and remove it.
 		}		
-		return xml.transformNode(xsl);
+		var result = xml.transformNode(xsl);
 
 		// clean the stylesheet.
 		for (var paramName in xslParameters) {
@@ -240,6 +237,7 @@
 				paramNode.removeChild(paramNode.firstChild);
 			}
 		}
+		return result;
 	};
 
 	var processor = new XSLTProcessor();



From troelskn at berlios.de  Fri Apr 14 04:10:34 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Fri, 14 Apr 2006 04:10:34 +0200
Subject: [Freja-svn] r45 - trunk/src/auxiliary
Message-ID: <200604140210.k3E2AYWX020344@sheep.berlios.de>

Author: troelskn
Date: 2006-04-14 04:10:14 +0200 (Fri, 14 Apr 2006)
New Revision: 45

Modified:
   trunk/src/auxiliary/minimal.js
Log:
fixed MSXML wierdness

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-12 21:10:35 UTC (rev 44)
+++ trunk/src/auxiliary/minimal.js	2006-04-14 02:10:14 UTC (rev 45)
@@ -212,22 +212,23 @@
 /** loadXML(string) : XMLDocument */
 Freja._aux.loadXML = function(text) {
 	if (window.ActiveXObject) {
-		var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.4.0");
+		var xmlDoc = new ActiveXObject("Msxml2.DOMDocument");
 		xmlDoc.loadXML(text);
+		xmlDoc.setProperty("SelectionLanguage", "XPath");
 		return xmlDoc;
 	}
 	return (new DOMParser()).parseFromString(text, "text/xml");
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
 Freja._aux.transformXSL = function(xml, xsl, xslParameters) {
-	if (typeof(xml.transformNode) != "undefined") {	
-		// set the parameters		
+	if (typeof(xml.transformNode) != "undefined") {
+		// set the parameters
 		for (var paramName in xslParameters) {
-			xsl.setProperty ("SelectionNamespaces", "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");			
-			var paramNode = xsl.selectSingleNode("//xsl:param[@name='"+ paramName +"']");					
+			xsl.setProperty ("SelectionNamespaces", "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");
+			var paramNode = xsl.selectSingleNode("//xsl:param[@name='"+ paramName +"']");
 			paramNode.appendChild(xsl.createTextNode(xslParameters[paramName]));
 			// @TODO: check if we have the 'select' attribute and remove it.
-		}		
+		}
 		var result = xml.transformNode(xsl);
 
 		// clean the stylesheet.



From cedsav at berlios.de  Mon Apr 17 21:14:16 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Mon, 17 Apr 2006 21:14:16 +0200
Subject: [Freja-svn] r46 - in trunk: examples external src src/auxiliary
Message-ID: <200604171914.k3HJEGLo006664@sheep.berlios.de>

Author: cedsav
Date: 2006-04-17 21:14:08 +0200 (Mon, 17 Apr 2006)
New Revision: 46

Modified:
   trunk/examples/
   trunk/external/srvc-xslt.php
   trunk/src/AssetManager.js
   trunk/src/auxiliary/minimal.js
Log:
See bug #7142 

https://developer.berlios.de/bugs/?func=detailbug&bug_id=7142&group_id=6277

Also, change _aux.formContents to return an empty value for unchecked checkbox & radio.. might need more tests though.


Property changes on: trunk/examples
___________________________________________________________________
Name: svn:ignore
   + formbuilder


Modified: trunk/external/srvc-xslt.php
===================================================================
--- trunk/external/srvc-xslt.php	2006-04-14 02:10:14 UTC (rev 45)
+++ trunk/external/srvc-xslt.php	2006-04-17 19:14:08 UTC (rev 46)
@@ -9,8 +9,9 @@
 		}
 		error_log($errstr."\n", 3, $filename);
 		header("HTTP/1.0 500 Internal Error");
-		header('Content-Type: text/xml');
-		echo "<?xml version='1.0' ?><error>".$errstr."</error>";
+		//header('Content-Type: text/xml');
+		/*echo "<?xml version='1.0' ?><error>".$errstr."</error>";*/
+		echo "Error: ".$errstr;
 		exit;
 	}
 	function exception_handler($ex) {

Modified: trunk/src/AssetManager.js
===================================================================
--- trunk/src/AssetManager.js	2006-04-14 02:10:14 UTC (rev 45)
+++ trunk/src/AssetManager.js	2006-04-17 19:14:08 UTC (rev 46)
@@ -141,13 +141,15 @@
 		d.callback(document);
 	};
 	try {
-		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
+		/* Why using HTTP_METHOD_TUNNEL for a GET? 
+		  if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
 			var req = Freja._aux.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 		} else {
+		*/
 			var req = Freja._aux.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
-		}
+		/*}*/
 
 		// This shouldn't be nescesary, but alas it is - firefox chokes
 		// It's probably due to an error in MochiKit, so the problem

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-14 02:10:14 UTC (rev 45)
+++ trunk/src/auxiliary/minimal.js	2006-04-17 19:14:08 UTC (rev 46)
@@ -44,6 +44,9 @@
 				if (input.checked) {
 					names.push(input.name);
 					values.push(input.value);
+				} else {
+					names.push(input.name);
+					values.push("");
 				}
 			} else {
 				names.push(input.name);



From cedsav at berlios.de  Mon Apr 17 22:45:12 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Mon, 17 Apr 2006 22:45:12 +0200
Subject: [Freja-svn] r47 - trunk/src/auxiliary
Message-ID: <200604172045.k3HKjCXd026886@sheep.berlios.de>

Author: cedsav
Date: 2006-04-17 22:45:10 +0200 (Mon, 17 Apr 2006)
New Revision: 47

Modified:
   trunk/src/auxiliary/minimal.js
Log:
Changed formContents behavior to *not* return a select's option text if the 'value' attribute is empty (return empty string instead).

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-17 19:14:08 UTC (rev 46)
+++ trunk/src/auxiliary/minimal.js	2006-04-17 20:45:10 UTC (rev 47)
@@ -69,7 +69,7 @@
 			if (input.selectedIndex >= 0) {
 				var opt = input.options[input.selectedIndex];
 				names.push(input.name);
-				values.push((opt.value) ? opt.value : opt.text);
+				values.push((opt.value) ? opt.value : "");
 			}
 		}
 	}



From cedsav at berlios.de  Mon Apr 17 22:47:21 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Mon, 17 Apr 2006 22:47:21 +0200
Subject: [Freja-svn] r48 - trunk/src
Message-ID: <200604172047.k3HKlLSp027041@sheep.berlios.de>

Author: cedsav
Date: 2006-04-17 22:47:15 +0200 (Mon, 17 Apr 2006)
New Revision: 48

Modified:
   trunk/src/QueryEngine.js
Log:
Changed Freja.QueryEngine.prototype.set to create attribute and text nodes if necessary.

Removed text node creation from Freja.QueryEngine.XPath.prototype._find 

Modified: trunk/src/QueryEngine.js
===================================================================
--- trunk/src/QueryEngine.js	2006-04-17 20:45:10 UTC (rev 47)
+++ trunk/src/QueryEngine.js	2006-04-17 20:47:15 UTC (rev 48)
@@ -21,6 +21,30 @@
 	var node = this._find(document, expression);	
 	if(node) {
 		node.nodeValue = value;
+	} else {
+		// text node not found. Might need to be created.
+		// try not to process field names that are not meant to be xpath expressions  
+		if(expression.lastIndexOf('/') != -1) {		 	
+			var nodeName = expression.substr(expression.lastIndexOf('/')+1);
+			
+			if(nodeName.charAt(0)=='@') {
+				// trying to set a non-existing attribute. Let's create it.
+				var newexpression =  expression.substring(0, expression.lastIndexOf('/'));
+				var node = document.selectSingleNode(newexpression);
+				if(node) 
+					node.setAttribute(nodeName.substr(1),value);
+			} else {
+				// this could be an empty node (<tag />)
+				// let's try to create the text node.
+				var node = document.selectSingleNode(expression);
+				if(node) {
+					var n = document.createTextNode(value);
+					node.appendChild(n);							
+				} else {
+					// the element does not exist.
+				}
+			}
+		}
 	}
 };
 /**
@@ -36,13 +60,7 @@
 		return node.firstChild;
 	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
-	} else if (node && !node.firstChild) {
-		// this is an empty node <tag />. When using 'get' it's fine to return null,
-		// but for 'set', we need to create a textnode somewhere.
-		// for lack of better idea, will do it here.
-		var n = document.createTextNode('');
-		return node.appendChild(n);
-	}
+	} 
 //	throw new Error("Can't evaluate expression " + expression);
 	return null;
 };



From cedsav at berlios.de  Tue Apr 18 23:35:05 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Tue, 18 Apr 2006 23:35:05 +0200
Subject: [Freja-svn] r49 - in trunk/examples: . basecamp_api basecamp_api/proxy basecamp_api/proxy/php basecamp_api/views
Message-ID: <200604182135.k3ILZ58c011033@sheep.berlios.de>

Author: cedsav
Date: 2006-04-18 23:34:47 +0200 (Tue, 18 Apr 2006)
New Revision: 49

Added:
   trunk/examples/basecamp_api/
   trunk/examples/basecamp_api/basecamp.js
   trunk/examples/basecamp_api/index.html
   trunk/examples/basecamp_api/models/
   trunk/examples/basecamp_api/proxy/
   trunk/examples/basecamp_api/proxy/php/
   trunk/examples/basecamp_api/proxy/php/PEAR.php
   trunk/examples/basecamp_api/proxy/php/Request.php
   trunk/examples/basecamp_api/proxy/php/Socket.php
   trunk/examples/basecamp_api/proxy/php/URL.php
   trunk/examples/basecamp_api/proxy/php/proxy.php
   trunk/examples/basecamp_api/views/
   trunk/examples/basecamp_api/views/project.xsl
Log:


Added: trunk/examples/basecamp_api/basecamp.js
===================================================================
--- trunk/examples/basecamp_api/basecamp.js	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/basecamp.js	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,2 @@
+
+

Added: trunk/examples/basecamp_api/index.html
===================================================================
--- trunk/examples/basecamp_api/index.html	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/index.html	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,18 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
+<title>BaseCamp Remixed with Freja</title>
+
+<!-- Freja Framework Script -->
+<script type="text/javascript" src="../../lib/Freja.js"></script>
+
+<!-- Controller Code -->
+<script type="text/javascript" src="basecamp.js"></script>
+
+</head>
+
+<body>
+<div id="content"><span style="color:white;background:firebrick">Loading ...</span></div>
+</body>
+</html>

Added: trunk/examples/basecamp_api/proxy/php/PEAR.php
===================================================================
--- trunk/examples/basecamp_api/proxy/php/PEAR.php	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/proxy/php/PEAR.php	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,1101 @@
+<?php
+/**
+ * PEAR, the PHP Extension and Application Repository
+ *
+ * PEAR class and PEAR_Error class
+ *
+ * PHP versions 4 and 5
+ *
+ * LICENSE: This source file is subject to version 3.0 of the PHP license
+ * that is available through the world-wide-web at the following URI:
+ * http://www.php.net/license/3_0.txt.  If you did not receive a copy of
+ * the PHP License and are unable to obtain it through the web, please
+ * send a note to license at php.net so we can mail you a copy immediately.
+ *
+ * @category   pear
+ * @package    PEAR
+ * @author     Sterling Hughes <sterling at php.net>
+ * @author     Stig Bakken <ssb at php.net>
+ * @author     Tomas V.V.Cox <cox at idecnet.com>
+ * @author     Greg Beaver <cellog at php.net>
+ * @copyright  1997-2006 The PHP Group
+ * @license    http://www.php.net/license/3_0.txt  PHP License 3.0
+ * @version    CVS: $Id: PEAR.php,v 1.98 2006/01/23 05:38:05 cellog Exp $
+ * @link       http://pear.php.net/package/PEAR
+ * @since      File available since Release 0.1
+ */
+
+/**#@+
+ * ERROR constants
+ */
+define('PEAR_ERROR_RETURN',     1);
+define('PEAR_ERROR_PRINT',      2);
+define('PEAR_ERROR_TRIGGER',    4);
+define('PEAR_ERROR_DIE',        8);
+define('PEAR_ERROR_CALLBACK',  16);
+/**
+ * WARNING: obsolete
+ * @deprecated
+ */
+define('PEAR_ERROR_EXCEPTION', 32);
+/**#@-*/
+define('PEAR_ZE2', (function_exists('version_compare') &&
+                    version_compare(zend_version(), "2-dev", "ge")));
+
+if (substr(PHP_OS, 0, 3) == 'WIN') {
+    define('OS_WINDOWS', true);
+    define('OS_UNIX',    false);
+    define('PEAR_OS',    'Windows');
+} else {
+    define('OS_WINDOWS', false);
+    define('OS_UNIX',    true);
+    define('PEAR_OS',    'Unix'); // blatant assumption
+}
+
+// instant backwards compatibility
+if (!defined('PATH_SEPARATOR')) {
+    if (OS_WINDOWS) {
+        define('PATH_SEPARATOR', ';');
+    } else {
+        define('PATH_SEPARATOR', ':');
+    }
+}
+
+$GLOBALS['_PEAR_default_error_mode']     = PEAR_ERROR_RETURN;
+$GLOBALS['_PEAR_default_error_options']  = E_USER_NOTICE;
+$GLOBALS['_PEAR_destructor_object_list'] = array();
+$GLOBALS['_PEAR_shutdown_funcs']         = array();
+$GLOBALS['_PEAR_error_handler_stack']    = array();
+
+ at ini_set('track_errors', true);
+
+/**
+ * Base class for other PEAR classes.  Provides rudimentary
+ * emulation of destructors.
+ *
+ * If you want a destructor in your class, inherit PEAR and make a
+ * destructor method called _yourclassname (same name as the
+ * constructor, but with a "_" prefix).  Also, in your constructor you
+ * have to call the PEAR constructor: $this->PEAR();.
+ * The destructor method will be called without parameters.  Note that
+ * at in some SAPI implementations (such as Apache), any output during
+ * the request shutdown (in which destructors are called) seems to be
+ * discarded.  If you need to get any debug information from your
+ * destructor, use error_log(), syslog() or something similar.
+ *
+ * IMPORTANT! To use the emulated destructors you need to create the
+ * objects by reference: $obj =& new PEAR_child;
+ *
+ * @category   pear
+ * @package    PEAR
+ * @author     Stig Bakken <ssb at php.net>
+ * @author     Tomas V.V. Cox <cox at idecnet.com>
+ * @author     Greg Beaver <cellog at php.net>
+ * @copyright  1997-2006 The PHP Group
+ * @license    http://www.php.net/license/3_0.txt  PHP License 3.0
+ * @version    Release: 1.4.9
+ * @link       http://pear.php.net/package/PEAR
+ * @see        PEAR_Error
+ * @since      Class available since PHP 4.0.2
+ * @link        http://pear.php.net/manual/en/core.pear.php#core.pear.pear
+ */
+class PEAR
+{
+    // {{{ properties
+
+    /**
+     * Whether to enable internal debug messages.
+     *
+     * @var     bool
+     * @access  private
+     */
+    var $_debug = false;
+
+    /**
+     * Default error mode for this object.
+     *
+     * @var     int
+     * @access  private
+     */
+    var $_default_error_mode = null;
+
+    /**
+     * Default error options used for this object when error mode
+     * is PEAR_ERROR_TRIGGER.
+     *
+     * @var     int
+     * @access  private
+     */
+    var $_default_error_options = null;
+
+    /**
+     * Default error handler (callback) for this object, if error mode is
+     * PEAR_ERROR_CALLBACK.
+     *
+     * @var     string
+     * @access  private
+     */
+    var $_default_error_handler = '';
+
+    /**
+     * Which class to use for error objects.
+     *
+     * @var     string
+     * @access  private
+     */
+    var $_error_class = 'PEAR_Error';
+
+    /**
+     * An array of expected errors.
+     *
+     * @var     array
+     * @access  private
+     */
+    var $_expected_errors = array();
+
+    // }}}
+
+    // {{{ constructor
+
+    /**
+     * Constructor.  Registers this object in
+     * $_PEAR_destructor_object_list for destructor emulation if a
+     * destructor object exists.
+     *
+     * @param string $error_class  (optional) which class to use for
+     *        error objects, defaults to PEAR_Error.
+     * @access public
+     * @return void
+     */
+    function PEAR($error_class = null)
+    {
+        $classname = strtolower(get_class($this));
+        if ($this->_debug) {
+            print "PEAR constructor called, class=$classname\n";
+        }
+        if ($error_class !== null) {
+            $this->_error_class = $error_class;
+        }
+        while ($classname && strcasecmp($classname, "pear")) {
+            $destructor = "_$classname";
+            if (method_exists($this, $destructor)) {
+                global $_PEAR_destructor_object_list;
+                $_PEAR_destructor_object_list[] = &$this;
+                if (!isset($GLOBALS['_PEAR_SHUTDOWN_REGISTERED'])) {
+                    register_shutdown_function("_PEAR_call_destructors");
+                    $GLOBALS['_PEAR_SHUTDOWN_REGISTERED'] = true;
+                }
+                break;
+            } else {
+                $classname = get_parent_class($classname);
+            }
+        }
+    }
+
+    // }}}
+    // {{{ destructor
+
+    /**
+     * Destructor (the emulated type of...).  Does nothing right now,
+     * but is included for forward compatibility, so subclass
+     * destructors should always call it.
+     *
+     * See the note in the class desciption about output from
+     * destructors.
+     *
+     * @access public
+     * @return void
+     */
+    function _PEAR() {
+        if ($this->_debug) {
+            printf("PEAR destructor called, class=%s\n", strtolower(get_class($this)));
+        }
+    }
+
+    // }}}
+    // {{{ getStaticProperty()
+
+    /**
+    * If you have a class that's mostly/entirely static, and you need static
+    * properties, you can use this method to simulate them. Eg. in your method(s)
+    * do this: $myVar = &PEAR::getStaticProperty('myclass', 'myVar');
+    * You MUST use a reference, or they will not persist!
+    *
+    * @access public
+    * @param  string $class  The calling classname, to prevent clashes
+    * @param  string $var    The variable to retrieve.
+    * @return mixed   A reference to the variable. If not set it will be
+    *                 auto initialised to NULL.
+    */
+    function &getStaticProperty($class, $var)
+    {
+        static $properties;
+        return $properties[$class][$var];
+    }
+
+    // }}}
+    // {{{ registerShutdownFunc()
+
+    /**
+    * Use this function to register a shutdown method for static
+    * classes.
+    *
+    * @access public
+    * @param  mixed $func  The function name (or array of class/method) to call
+    * @param  mixed $args  The arguments to pass to the function
+    * @return void
+    */
+    function registerShutdownFunc($func, $args = array())
+    {
+        // if we are called statically, there is a potential
+        // that no shutdown func is registered.  Bug #6445
+        if (!isset($GLOBALS['_PEAR_SHUTDOWN_REGISTERED'])) {
+            register_shutdown_function("_PEAR_call_destructors");
+            $GLOBALS['_PEAR_SHUTDOWN_REGISTERED'] = true;
+        }
+        $GLOBALS['_PEAR_shutdown_funcs'][] = array($func, $args);
+    }
+
+    // }}}
+    // {{{ isError()
+
+    /**
+     * Tell whether a value is a PEAR error.
+     *
+     * @param   mixed $data   the value to test
+     * @param   int   $code   if $data is an error object, return true
+     *                        only if $code is a string and
+     *                        $obj->getMessage() == $code or
+     *                        $code is an integer and $obj->getCode() == $code
+     * @access  public
+     * @return  bool    true if parameter is an error
+     */
+    function isError($data, $code = null)
+    {
+        if (is_a($data, 'PEAR_Error')) {
+            if (is_null($code)) {
+                return true;
+            } elseif (is_string($code)) {
+                return $data->getMessage() == $code;
+            } else {
+                return $data->getCode() == $code;
+            }
+        }
+        return false;
+    }
+
+    // }}}
+    // {{{ setErrorHandling()
+
+    /**
+     * Sets how errors generated by this object should be handled.
+     * Can be invoked both in objects and statically.  If called
+     * statically, setErrorHandling sets the default behaviour for all
+     * PEAR objects.  If called in an object, setErrorHandling sets
+     * the default behaviour for that object.
+     *
+     * @param int $mode
+     *        One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,
+     *        PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,
+     *        PEAR_ERROR_CALLBACK or PEAR_ERROR_EXCEPTION.
+     *
+     * @param mixed $options
+     *        When $mode is PEAR_ERROR_TRIGGER, this is the error level (one
+     *        of E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).
+     *
+     *        When $mode is PEAR_ERROR_CALLBACK, this parameter is expected
+     *        to be the callback function or method.  A callback
+     *        function is a string with the name of the function, a
+     *        callback method is an array of two elements: the element
+     *        at index 0 is the object, and the element at index 1 is
+     *        the name of the method to call in the object.
+     *
+     *        When $mode is PEAR_ERROR_PRINT or PEAR_ERROR_DIE, this is
+     *        a printf format string used when printing the error
+     *        message.
+     *
+     * @access public
+     * @return void
+     * @see PEAR_ERROR_RETURN
+     * @see PEAR_ERROR_PRINT
+     * @see PEAR_ERROR_TRIGGER
+     * @see PEAR_ERROR_DIE
+     * @see PEAR_ERROR_CALLBACK
+     * @see PEAR_ERROR_EXCEPTION
+     *
+     * @since PHP 4.0.5
+     */
+
+    function setErrorHandling($mode = null, $options = null)
+    {
+        if (isset($this) && is_a($this, 'PEAR')) {
+            $setmode     = &$this->_default_error_mode;
+            $setoptions  = &$this->_default_error_options;
+        } else {
+            $setmode     = &$GLOBALS['_PEAR_default_error_mode'];
+            $setoptions  = &$GLOBALS['_PEAR_default_error_options'];
+        }
+
+        switch ($mode) {
+            case PEAR_ERROR_EXCEPTION:
+            case PEAR_ERROR_RETURN:
+            case PEAR_ERROR_PRINT:
+            case PEAR_ERROR_TRIGGER:
+            case PEAR_ERROR_DIE:
+            case null:
+                $setmode = $mode;
+                $setoptions = $options;
+                break;
+
+            case PEAR_ERROR_CALLBACK:
+                $setmode = $mode;
+                // class/object method callback
+                if (is_callable($options)) {
+                    $setoptions = $options;
+                } else {
+                    trigger_error("invalid error callback", E_USER_WARNING);
+                }
+                break;
+
+            default:
+                trigger_error("invalid error mode", E_USER_WARNING);
+                break;
+        }
+    }
+
+    // }}}
+    // {{{ expectError()
+
+    /**
+     * This method is used to tell which errors you expect to get.
+     * Expected errors are always returned with error mode
+     * PEAR_ERROR_RETURN.  Expected error codes are stored in a stack,
+     * and this method pushes a new element onto it.  The list of
+     * expected errors are in effect until they are popped off the
+     * stack with the popExpect() method.
+     *
+     * Note that this method can not be called statically
+     *
+     * @param mixed $code a single error code or an array of error codes to expect
+     *
+     * @return int     the new depth of the "expected errors" stack
+     * @access public
+     */
+    function expectError($code = '*')
+    {
+        if (is_array($code)) {
+            array_push($this->_expected_errors, $code);
+        } else {
+            array_push($this->_expected_errors, array($code));
+        }
+        return sizeof($this->_expected_errors);
+    }
+
+    // }}}
+    // {{{ popExpect()
+
+    /**
+     * This method pops one element off the expected error codes
+     * stack.
+     *
+     * @return array   the list of error codes that were popped
+     */
+    function popExpect()
+    {
+        return array_pop($this->_expected_errors);
+    }
+
+    // }}}
+    // {{{ _checkDelExpect()
+
+    /**
+     * This method checks unsets an error code if available
+     *
+     * @param mixed error code
+     * @return bool true if the error code was unset, false otherwise
+     * @access private
+     * @since PHP 4.3.0
+     */
+    function _checkDelExpect($error_code)
+    {
+        $deleted = false;
+
+        foreach ($this->_expected_errors AS $key => $error_array) {
+            if (in_array($error_code, $error_array)) {
+                unset($this->_expected_errors[$key][array_search($error_code, $error_array)]);
+                $deleted = true;
+            }
+
+            // clean up empty arrays
+            if (0 == count($this->_expected_errors[$key])) {
+                unset($this->_expected_errors[$key]);
+            }
+        }
+        return $deleted;
+    }
+
+    // }}}
+    // {{{ delExpect()
+
+    /**
+     * This method deletes all occurences of the specified element from
+     * the expected error codes stack.
+     *
+     * @param  mixed $error_code error code that should be deleted
+     * @return mixed list of error codes that were deleted or error
+     * @access public
+     * @since PHP 4.3.0
+     */
+    function delExpect($error_code)
+    {
+        $deleted = false;
+
+        if ((is_array($error_code) && (0 != count($error_code)))) {
+            // $error_code is a non-empty array here;
+            // we walk through it trying to unset all
+            // values
+            foreach($error_code as $key => $error) {
+                if ($this->_checkDelExpect($error)) {
+                    $deleted =  true;
+                } else {
+                    $deleted = false;
+                }
+            }
+            return $deleted ? true : PEAR::raiseError("The expected error you submitted does not exist"); // IMPROVE ME
+        } elseif (!empty($error_code)) {
+            // $error_code comes alone, trying to unset it
+            if ($this->_checkDelExpect($error_code)) {
+                return true;
+            } else {
+                return PEAR::raiseError("The expected error you submitted does not exist"); // IMPROVE ME
+            }
+        } else {
+            // $error_code is empty
+            return PEAR::raiseError("The expected error you submitted is empty"); // IMPROVE ME
+        }
+    }
+
+    // }}}
+    // {{{ raiseError()
+
+    /**
+     * This method is a wrapper that returns an instance of the
+     * configured error class with this object's default error
+     * handling applied.  If the $mode and $options parameters are not
+     * specified, the object's defaults are used.
+     *
+     * @param mixed $message a text error message or a PEAR error object
+     *
+     * @param int $code      a numeric error code (it is up to your class
+     *                  to define these if you want to use codes)
+     *
+     * @param int $mode      One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,
+     *                  PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,
+     *                  PEAR_ERROR_CALLBACK, PEAR_ERROR_EXCEPTION.
+     *
+     * @param mixed $options If $mode is PEAR_ERROR_TRIGGER, this parameter
+     *                  specifies the PHP-internal error level (one of
+     *                  E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).
+     *                  If $mode is PEAR_ERROR_CALLBACK, this
+     *                  parameter specifies the callback function or
+     *                  method.  In other error modes this parameter
+     *                  is ignored.
+     *
+     * @param string $userinfo If you need to pass along for example debug
+     *                  information, this parameter is meant for that.
+     *
+     * @param string $error_class The returned error object will be
+     *                  instantiated from this class, if specified.
+     *
+     * @param bool $skipmsg If true, raiseError will only pass error codes,
+     *                  the error message parameter will be dropped.
+     *
+     * @access public
+     * @return object   a PEAR error object
+     * @see PEAR::setErrorHandling
+     * @since PHP 4.0.5
+     */
+    function &raiseError($message = null,
+                         $code = null,
+                         $mode = null,
+                         $options = null,
+                         $userinfo = null,
+                         $error_class = null,
+                         $skipmsg = false)
+    {
+        // The error is yet a PEAR error object
+        if (is_object($message)) {
+            $code        = $message->getCode();
+            $userinfo    = $message->getUserInfo();
+            $error_class = $message->getType();
+            $message->error_message_prefix = '';
+            $message     = $message->getMessage();
+        }
+
+        if (isset($this) && isset($this->_expected_errors) && sizeof($this->_expected_errors) > 0 && sizeof($exp = end($this->_expected_errors))) {
+            if ($exp[0] == "*" ||
+                (is_int(reset($exp)) && in_array($code, $exp)) ||
+                (is_string(reset($exp)) && in_array($message, $exp))) {
+                $mode = PEAR_ERROR_RETURN;
+            }
+        }
+        // No mode given, try global ones
+        if ($mode === null) {
+            // Class error handler
+            if (isset($this) && isset($this->_default_error_mode)) {
+                $mode    = $this->_default_error_mode;
+                $options = $this->_default_error_options;
+            // Global error handler
+            } elseif (isset($GLOBALS['_PEAR_default_error_mode'])) {
+                $mode    = $GLOBALS['_PEAR_default_error_mode'];
+                $options = $GLOBALS['_PEAR_default_error_options'];
+            }
+        }
+
+        if ($error_class !== null) {
+            $ec = $error_class;
+        } elseif (isset($this) && isset($this->_error_class)) {
+            $ec = $this->_error_class;
+        } else {
+            $ec = 'PEAR_Error';
+        }
+        if ($skipmsg) {
+            $a = &new $ec($code, $mode, $options, $userinfo);
+            return $a;
+        } else {
+            $a = &new $ec($message, $code, $mode, $options, $userinfo);
+            return $a;
+        }
+    }
+
+    // }}}
+    // {{{ throwError()
+
+    /**
+     * Simpler form of raiseError with fewer options.  In most cases
+     * message, code and userinfo are enough.
+     *
+     * @param string $message
+     *
+     */
+    function &throwError($message = null,
+                         $code = null,
+                         $userinfo = null)
+    {
+        if (isset($this) && is_a($this, 'PEAR')) {
+            $a = &$this->raiseError($message, $code, null, null, $userinfo);
+            return $a;
+        } else {
+            $a = &PEAR::raiseError($message, $code, null, null, $userinfo);
+            return $a;
+        }
+    }
+
+    // }}}
+    function staticPushErrorHandling($mode, $options = null)
+    {
+        $stack = &$GLOBALS['_PEAR_error_handler_stack'];
+        $def_mode    = &$GLOBALS['_PEAR_default_error_mode'];
+        $def_options = &$GLOBALS['_PEAR_default_error_options'];
+        $stack[] = array($def_mode, $def_options);
+        switch ($mode) {
+            case PEAR_ERROR_EXCEPTION:
+            case PEAR_ERROR_RETURN:
+            case PEAR_ERROR_PRINT:
+            case PEAR_ERROR_TRIGGER:
+            case PEAR_ERROR_DIE:
+            case null:
+                $def_mode = $mode;
+                $def_options = $options;
+                break;
+
+            case PEAR_ERROR_CALLBACK:
+                $def_mode = $mode;
+                // class/object method callback
+                if (is_callable($options)) {
+                    $def_options = $options;
+                } else {
+                    trigger_error("invalid error callback", E_USER_WARNING);
+                }
+                break;
+
+            default:
+                trigger_error("invalid error mode", E_USER_WARNING);
+                break;
+        }
+        $stack[] = array($mode, $options);
+        return true;
+    }
+
+    function staticPopErrorHandling()
+    {
+        $stack = &$GLOBALS['_PEAR_error_handler_stack'];
+        $setmode     = &$GLOBALS['_PEAR_default_error_mode'];
+        $setoptions  = &$GLOBALS['_PEAR_default_error_options'];
+        array_pop($stack);
+        list($mode, $options) = $stack[sizeof($stack) - 1];
+        array_pop($stack);
+        switch ($mode) {
+            case PEAR_ERROR_EXCEPTION:
+            case PEAR_ERROR_RETURN:
+            case PEAR_ERROR_PRINT:
+            case PEAR_ERROR_TRIGGER:
+            case PEAR_ERROR_DIE:
+            case null:
+                $setmode = $mode;
+                $setoptions = $options;
+                break;
+
+            case PEAR_ERROR_CALLBACK:
+                $setmode = $mode;
+                // class/object method callback
+                if (is_callable($options)) {
+                    $setoptions = $options;
+                } else {
+                    trigger_error("invalid error callback", E_USER_WARNING);
+                }
+                break;
+
+            default:
+                trigger_error("invalid error mode", E_USER_WARNING);
+                break;
+        }
+        return true;
+    }
+
+    // {{{ pushErrorHandling()
+
+    /**
+     * Push a new error handler on top of the error handler options stack. With this
+     * you can easily override the actual error handler for some code and restore
+     * it later with popErrorHandling.
+     *
+     * @param mixed $mode (same as setErrorHandling)
+     * @param mixed $options (same as setErrorHandling)
+     *
+     * @return bool Always true
+     *
+     * @see PEAR::setErrorHandling
+     */
+    function pushErrorHandling($mode, $options = null)
+    {
+        $stack = &$GLOBALS['_PEAR_error_handler_stack'];
+        if (isset($this) && is_a($this, 'PEAR')) {
+            $def_mode    = &$this->_default_error_mode;
+            $def_options = &$this->_default_error_options;
+        } else {
+            $def_mode    = &$GLOBALS['_PEAR_default_error_mode'];
+            $def_options = &$GLOBALS['_PEAR_default_error_options'];
+        }
+        $stack[] = array($def_mode, $def_options);
+
+        if (isset($this) && is_a($this, 'PEAR')) {
+            $this->setErrorHandling($mode, $options);
+        } else {
+            PEAR::setErrorHandling($mode, $options);
+        }
+        $stack[] = array($mode, $options);
+        return true;
+    }
+
+    // }}}
+    // {{{ popErrorHandling()
+
+    /**
+    * Pop the last error handler used
+    *
+    * @return bool Always true
+    *
+    * @see PEAR::pushErrorHandling
+    */
+    function popErrorHandling()
+    {
+        $stack = &$GLOBALS['_PEAR_error_handler_stack'];
+        array_pop($stack);
+        list($mode, $options) = $stack[sizeof($stack) - 1];
+        array_pop($stack);
+        if (isset($this) && is_a($this, 'PEAR')) {
+            $this->setErrorHandling($mode, $options);
+        } else {
+            PEAR::setErrorHandling($mode, $options);
+        }
+        return true;
+    }
+
+    // }}}
+    // {{{ loadExtension()
+
+    /**
+    * OS independant PHP extension load. Remember to take care
+    * on the correct extension name for case sensitive OSes.
+    *
+    * @param string $ext The extension name
+    * @return bool Success or not on the dl() call
+    */
+    function loadExtension($ext)
+    {
+        if (!extension_loaded($ext)) {
+            // if either returns true dl() will produce a FATAL error, stop that
+            if ((ini_get('enable_dl') != 1) || (ini_get('safe_mode') == 1)) {
+                return false;
+            }
+            if (OS_WINDOWS) {
+                $suffix = '.dll';
+            } elseif (PHP_OS == 'HP-UX') {
+                $suffix = '.sl';
+            } elseif (PHP_OS == 'AIX') {
+                $suffix = '.a';
+            } elseif (PHP_OS == 'OSX') {
+                $suffix = '.bundle';
+            } else {
+                $suffix = '.so';
+            }
+            return @dl('php_'.$ext.$suffix) || @dl($ext.$suffix);
+        }
+        return true;
+    }
+
+    // }}}
+}
+
+// {{{ _PEAR_call_destructors()
+
+function _PEAR_call_destructors()
+{
+    global $_PEAR_destructor_object_list;
+    if (is_array($_PEAR_destructor_object_list) &&
+        sizeof($_PEAR_destructor_object_list))
+    {
+        reset($_PEAR_destructor_object_list);
+        if (@PEAR::getStaticProperty('PEAR', 'destructlifo')) {
+            $_PEAR_destructor_object_list = array_reverse($_PEAR_destructor_object_list);
+        }
+        while (list($k, $objref) = each($_PEAR_destructor_object_list)) {
+            $classname = get_class($objref);
+            while ($classname) {
+                $destructor = "_$classname";
+                if (method_exists($objref, $destructor)) {
+                    $objref->$destructor();
+                    break;
+                } else {
+                    $classname = get_parent_class($classname);
+                }
+            }
+        }
+        // Empty the object list to ensure that destructors are
+        // not called more than once.
+        $_PEAR_destructor_object_list = array();
+    }
+
+    // Now call the shutdown functions
+    if (is_array($GLOBALS['_PEAR_shutdown_funcs']) AND !empty($GLOBALS['_PEAR_shutdown_funcs'])) {
+        foreach ($GLOBALS['_PEAR_shutdown_funcs'] as $value) {
+            call_user_func_array($value[0], $value[1]);
+        }
+    }
+}
+
+// }}}
+/**
+ * Standard PEAR error class for PHP 4
+ *
+ * This class is supserseded by {@link PEAR_Exception} in PHP 5
+ *
+ * @category   pear
+ * @package    PEAR
+ * @author     Stig Bakken <ssb at php.net>
+ * @author     Tomas V.V. Cox <cox at idecnet.com>
+ * @author     Gregory Beaver <cellog at php.net>
+ * @copyright  1997-2006 The PHP Group
+ * @license    http://www.php.net/license/3_0.txt  PHP License 3.0
+ * @version    Release: 1.4.9
+ * @link       http://pear.php.net/manual/en/core.pear.pear-error.php
+ * @see        PEAR::raiseError(), PEAR::throwError()
+ * @since      Class available since PHP 4.0.2
+ */
+class PEAR_Error
+{
+    // {{{ properties
+
+    var $error_message_prefix = '';
+    var $mode                 = PEAR_ERROR_RETURN;
+    var $level                = E_USER_NOTICE;
+    var $code                 = -1;
+    var $message              = '';
+    var $userinfo             = '';
+    var $backtrace            = null;
+
+    // }}}
+    // {{{ constructor
+
+    /**
+     * PEAR_Error constructor
+     *
+     * @param string $message  message
+     *
+     * @param int $code     (optional) error code
+     *
+     * @param int $mode     (optional) error mode, one of: PEAR_ERROR_RETURN,
+     * PEAR_ERROR_PRINT, PEAR_ERROR_DIE, PEAR_ERROR_TRIGGER,
+     * PEAR_ERROR_CALLBACK or PEAR_ERROR_EXCEPTION
+     *
+     * @param mixed $options   (optional) error level, _OR_ in the case of
+     * PEAR_ERROR_CALLBACK, the callback function or object/method
+     * tuple.
+     *
+     * @param string $userinfo (optional) additional user/debug info
+     *
+     * @access public
+     *
+     */
+    function PEAR_Error($message = 'unknown error', $code = null,
+                        $mode = null, $options = null, $userinfo = null)
+    {
+        if ($mode === null) {
+            $mode = PEAR_ERROR_RETURN;
+        }
+        $this->message   = $message;
+        $this->code      = $code;
+        $this->mode      = $mode;
+        $this->userinfo  = $userinfo;
+        if (function_exists("debug_backtrace")) {
+            if (@!PEAR::getStaticProperty('PEAR_Error', 'skiptrace')) {
+                $this->backtrace = debug_backtrace();
+            }
+        }
+        if ($mode & PEAR_ERROR_CALLBACK) {
+            $this->level = E_USER_NOTICE;
+            $this->callback = $options;
+        } else {
+            if ($options === null) {
+                $options = E_USER_NOTICE;
+            }
+            $this->level = $options;
+            $this->callback = null;
+        }
+        if ($this->mode & PEAR_ERROR_PRINT) {
+            if (is_null($options) || is_int($options)) {
+                $format = "%s";
+            } else {
+                $format = $options;
+            }
+            printf($format, $this->getMessage());
+        }
+        if ($this->mode & PEAR_ERROR_TRIGGER) {
+            trigger_error($this->getMessage(), $this->level);
+        }
+        if ($this->mode & PEAR_ERROR_DIE) {
+            $msg = $this->getMessage();
+            if (is_null($options) || is_int($options)) {
+                $format = "%s";
+                if (substr($msg, -1) != "\n") {
+                    $msg .= "\n";
+                }
+            } else {
+                $format = $options;
+            }
+            die(sprintf($format, $msg));
+        }
+        if ($this->mode & PEAR_ERROR_CALLBACK) {
+            if (is_callable($this->callback)) {
+                call_user_func($this->callback, $this);
+            }
+        }
+        if ($this->mode & PEAR_ERROR_EXCEPTION) {
+            trigger_error("PEAR_ERROR_EXCEPTION is obsolete, use class PEAR_Exception for exceptions", E_USER_WARNING);
+            eval('$e = new Exception($this->message, $this->code);throw($e);');
+        }
+    }
+
+    // }}}
+    // {{{ getMode()
+
+    /**
+     * Get the error mode from an error object.
+     *
+     * @return int error mode
+     * @access public
+     */
+    function getMode() {
+        return $this->mode;
+    }
+
+    // }}}
+    // {{{ getCallback()
+
+    /**
+     * Get the callback function/method from an error object.
+     *
+     * @return mixed callback function or object/method array
+     * @access public
+     */
+    function getCallback() {
+        return $this->callback;
+    }
+
+    // }}}
+    // {{{ getMessage()
+
+
+    /**
+     * Get the error message from an error object.
+     *
+     * @return  string  full error message
+     * @access public
+     */
+    function getMessage()
+    {
+        return ($this->error_message_prefix . $this->message);
+    }
+
+
+    // }}}
+    // {{{ getCode()
+
+    /**
+     * Get error code from an error object
+     *
+     * @return int error code
+     * @access public
+     */
+     function getCode()
+     {
+        return $this->code;
+     }
+
+    // }}}
+    // {{{ getType()
+
+    /**
+     * Get the name of this error/exception.
+     *
+     * @return string error/exception name (type)
+     * @access public
+     */
+    function getType()
+    {
+        return get_class($this);
+    }
+
+    // }}}
+    // {{{ getUserInfo()
+
+    /**
+     * Get additional user-supplied information.
+     *
+     * @return string user-supplied information
+     * @access public
+     */
+    function getUserInfo()
+    {
+        return $this->userinfo;
+    }
+
+    // }}}
+    // {{{ getDebugInfo()
+
+    /**
+     * Get additional debug information supplied by the application.
+     *
+     * @return string debug information
+     * @access public
+     */
+    function getDebugInfo()
+    {
+        return $this->getUserInfo();
+    }
+
+    // }}}
+    // {{{ getBacktrace()
+
+    /**
+     * Get the call backtrace from where the error was generated.
+     * Supported with PHP 4.3.0 or newer.
+     *
+     * @param int $frame (optional) what frame to fetch
+     * @return array Backtrace, or NULL if not available.
+     * @access public
+     */
+    function getBacktrace($frame = null)
+    {
+        if (defined('PEAR_IGNORE_BACKTRACE')) {
+            return null;
+        }
+        if ($frame === null) {
+            return $this->backtrace;
+        }
+        return $this->backtrace[$frame];
+    }
+
+    // }}}
+    // {{{ addUserInfo()
+
+    function addUserInfo($info)
+    {
+        if (empty($this->userinfo)) {
+            $this->userinfo = $info;
+        } else {
+            $this->userinfo .= " ** $info";
+        }
+    }
+
+    // }}}
+    // {{{ toString()
+
+    /**
+     * Make a string representation of this object.
+     *
+     * @return string a string with an object summary
+     * @access public
+     */
+    function toString() {
+        $modes = array();
+        $levels = array(E_USER_NOTICE  => 'notice',
+                        E_USER_WARNING => 'warning',
+                        E_USER_ERROR   => 'error');
+        if ($this->mode & PEAR_ERROR_CALLBACK) {
+            if (is_array($this->callback)) {
+                $callback = (is_object($this->callback[0]) ?
+                    strtolower(get_class($this->callback[0])) :
+                    $this->callback[0]) . '::' .
+                    $this->callback[1];
+            } else {
+                $callback = $this->callback;
+            }
+            return sprintf('[%s: message="%s" code=%d mode=callback '.
+                           'callback=%s prefix="%s" info="%s"]',
+                           strtolower(get_class($this)), $this->message, $this->code,
+                           $callback, $this->error_message_prefix,
+                           $this->userinfo);
+        }
+        if ($this->mode & PEAR_ERROR_PRINT) {
+            $modes[] = 'print';
+        }
+        if ($this->mode & PEAR_ERROR_TRIGGER) {
+            $modes[] = 'trigger';
+        }
+        if ($this->mode & PEAR_ERROR_DIE) {
+            $modes[] = 'die';
+        }
+        if ($this->mode & PEAR_ERROR_RETURN) {
+            $modes[] = 'return';
+        }
+        return sprintf('[%s: message="%s" code=%d mode=%s level=%s '.
+                       'prefix="%s" info="%s"]',
+                       strtolower(get_class($this)), $this->message, $this->code,
+                       implode("|", $modes), $levels[$this->level],
+                       $this->error_message_prefix,
+                       $this->userinfo);
+    }
+
+    // }}}
+}
+
+/*
+ * Local Variables:
+ * mode: php
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ */
+?>

Added: trunk/examples/basecamp_api/proxy/php/Request.php
===================================================================
--- trunk/examples/basecamp_api/proxy/php/Request.php	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/proxy/php/Request.php	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,1192 @@
+<?php
+// +-----------------------------------------------------------------------+
+// | Copyright (c) 2002-2003, Richard Heyes                                |
+// | All rights reserved.                                                  |
+// |                                                                       |
+// | Redistribution and use in source and binary forms, with or without    |
+// | modification, are permitted provided that the following conditions    |
+// | are met:                                                              |
+// |                                                                       |
+// | o Redistributions of source code must retain the above copyright      |
+// |   notice, this list of conditions and the following disclaimer.       |
+// | o Redistributions in binary form must reproduce the above copyright   |
+// |   notice, this list of conditions and the following disclaimer in the |
+// |   documentation and/or other materials provided with the distribution.|
+// | o The names of the authors may not be used to endorse or promote      |
+// |   products derived from this software without specific prior written  |
+// |   permission.                                                         |
+// |                                                                       |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR |
+// | A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  |
+// | OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, |
+// | SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      |
+// | LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, |
+// | DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY |
+// | THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   |
+// | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE |
+// | OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  |
+// |                                                                       |
+// +-----------------------------------------------------------------------+
+// | Author: Richard Heyes <richard at phpguru.org>                           |
+// +-----------------------------------------------------------------------+
+//
+// $Id: Request.php,v 1.43 2005/11/06 18:29:14 avb Exp $
+//
+// HTTP_Request Class
+//
+// Simple example, (Fetches yahoo.com and displays it):
+//
+// $a = &new HTTP_Request('http://www.yahoo.com/');
+// $a->sendRequest();
+// echo $a->getResponseBody();
+//
+
+require_once 'PEAR.php';  // from http://pear.php.net/package/PEAR
+require_once 'Socket.php'; // from http://pear.php.net/package/Net_Socket
+require_once 'URL.php'; // from http://pear.php.net/package/Net_URL
+
+define('HTTP_REQUEST_METHOD_GET',     'GET',     true);
+define('HTTP_REQUEST_METHOD_HEAD',    'HEAD',    true);
+define('HTTP_REQUEST_METHOD_POST',    'POST',    true);
+define('HTTP_REQUEST_METHOD_PUT',     'PUT',     true);
+define('HTTP_REQUEST_METHOD_DELETE',  'DELETE',  true);
+define('HTTP_REQUEST_METHOD_OPTIONS', 'OPTIONS', true);
+define('HTTP_REQUEST_METHOD_TRACE',   'TRACE',   true);
+
+define('HTTP_REQUEST_HTTP_VER_1_0', '1.0', true);
+define('HTTP_REQUEST_HTTP_VER_1_1', '1.1', true);
+
+class HTTP_Request {
+
+    /**
+    * Instance of Net_URL
+    * @var object Net_URL
+    */
+    var $_url;
+
+    /**
+    * Type of request
+    * @var string
+    */
+    var $_method;
+
+    /**
+    * HTTP Version
+    * @var string
+    */
+    var $_http;
+
+    /**
+    * Request headers
+    * @var array
+    */
+    var $_requestHeaders;
+
+    /**
+    * Basic Auth Username
+    * @var string
+    */
+    var $_user;
+    
+    /**
+    * Basic Auth Password
+    * @var string
+    */
+    var $_pass;
+
+    /**
+    * Socket object
+    * @var object Net_Socket
+    */
+    var $_sock;
+    
+    /**
+    * Proxy server
+    * @var string
+    */
+    var $_proxy_host;
+    
+    /**
+    * Proxy port
+    * @var integer
+    */
+    var $_proxy_port;
+    
+    /**
+    * Proxy username
+    * @var string
+    */
+    var $_proxy_user;
+    
+    /**
+    * Proxy password
+    * @var string
+    */
+    var $_proxy_pass;
+
+    /**
+    * Post data
+    * @var array
+    */
+    var $_postData;
+
+   /**
+    * Request body  
+    * @var string
+    */
+    var $_body;
+
+   /**
+    * A list of methods that MUST NOT have a request body, per RFC 2616
+    * @var array
+    */
+    var $_bodyDisallowed = array('TRACE');
+
+   /**
+    * Files to post 
+    * @var array
+    */
+    var $_postFiles = array();
+
+    /**
+    * Connection timeout.
+    * @var float
+    */
+    var $_timeout;
+    
+    /**
+    * HTTP_Response object
+    * @var object HTTP_Response
+    */
+    var $_response;
+    
+    /**
+    * Whether to allow redirects
+    * @var boolean
+    */
+    var $_allowRedirects;
+    
+    /**
+    * Maximum redirects allowed
+    * @var integer
+    */
+    var $_maxRedirects;
+    
+    /**
+    * Current number of redirects
+    * @var integer
+    */
+    var $_redirects;
+
+   /**
+    * Whether to append brackets [] to array variables
+    * @var bool
+    */
+    var $_useBrackets = true;
+
+   /**
+    * Attached listeners
+    * @var array
+    */
+    var $_listeners = array();
+
+   /**
+    * Whether to save response body in response object property  
+    * @var bool
+    */
+    var $_saveBody = true;
+
+   /**
+    * Timeout for reading from socket (array(seconds, microseconds))
+    * @var array
+    */
+    var $_readTimeout = null;
+
+   /**
+    * Options to pass to Net_Socket::connect. See stream_context_create
+    * @var array
+    */
+    var $_socketOptions = null;
+
+    /**
+    * Constructor
+    *
+    * Sets up the object
+    * @param    string  The url to fetch/access
+    * @param    array   Associative array of parameters which can have the following keys:
+    * <ul>
+    *   <li>method         - Method to use, GET, POST etc (string)</li>
+    *   <li>http           - HTTP Version to use, 1.0 or 1.1 (string)</li>
+    *   <li>user           - Basic Auth username (string)</li>
+    *   <li>pass           - Basic Auth password (string)</li>
+    *   <li>proxy_host     - Proxy server host (string)</li>
+    *   <li>proxy_port     - Proxy server port (integer)</li>
+    *   <li>proxy_user     - Proxy auth username (string)</li>
+    *   <li>proxy_pass     - Proxy auth password (string)</li>
+    *   <li>timeout        - Connection timeout in seconds (float)</li>
+    *   <li>allowRedirects - Whether to follow redirects or not (bool)</li>
+    *   <li>maxRedirects   - Max number of redirects to follow (integer)</li>
+    *   <li>useBrackets    - Whether to append [] to array variable names (bool)</li>
+    *   <li>saveBody       - Whether to save response body in response object property (bool)</li>
+    *   <li>readTimeout    - Timeout for reading / writing data over the socket (array (seconds, microseconds))</li>
+    *   <li>socketOptions  - Options to pass to Net_Socket object (array)</li>
+    * </ul>
+    * @access public
+    */
+    function HTTP_Request($url = '', $params = array())
+    {
+        $this->_sock           = &new Net_Socket();
+        $this->_method         =  HTTP_REQUEST_METHOD_GET;
+        $this->_http           =  HTTP_REQUEST_HTTP_VER_1_1;
+        $this->_requestHeaders = array();
+        $this->_postData       = array();
+        $this->_body           = null;
+
+        $this->_user = null;
+        $this->_pass = null;
+
+        $this->_proxy_host = null;
+        $this->_proxy_port = null;
+        $this->_proxy_user = null;
+        $this->_proxy_pass = null;
+
+        $this->_allowRedirects = false;
+        $this->_maxRedirects   = 3;
+        $this->_redirects      = 0;
+
+        $this->_timeout  = null;
+        $this->_response = null;
+
+        foreach ($params as $key => $value) {
+            $this->{'_' . $key} = $value;
+        }
+
+        if (!empty($url)) {
+            $this->setURL($url);
+        }
+
+        // Default useragent
+        $this->addHeader('User-Agent', 'PEAR HTTP_Request class ( http://pear.php.net/ )');
+
+        // Make sure keepalives dont knobble us
+        $this->addHeader('Connection', 'close');
+
+        // Basic authentication
+        if (!empty($this->_user)) {
+            $this->addHeader('Authorization', 'Basic ' . base64_encode($this->_user . ':' . $this->_pass));
+        }
+
+        // Use gzip encoding if possible
+        // Avoid gzip encoding if using multibyte functions (see #1781)
+        if (HTTP_REQUEST_HTTP_VER_1_1 == $this->_http && extension_loaded('zlib') &&
+            0 == (2 & ini_get('mbstring.func_overload'))) {
+
+            $this->addHeader('Accept-Encoding', 'gzip');
+        }
+    }
+    
+    /**
+    * Generates a Host header for HTTP/1.1 requests
+    *
+    * @access private
+    * @return string
+    */
+    function _generateHostHeader()
+    {
+        if ($this->_url->port != 80 AND strcasecmp($this->_url->protocol, 'http') == 0) {
+            $host = $this->_url->host . ':' . $this->_url->port;
+
+        } elseif ($this->_url->port != 443 AND strcasecmp($this->_url->protocol, 'https') == 0) {
+            $host = $this->_url->host . ':' . $this->_url->port;
+
+        } elseif ($this->_url->port == 443 AND strcasecmp($this->_url->protocol, 'https') == 0 AND strpos($this->_url->url, ':443') !== false) {
+            $host = $this->_url->host . ':' . $this->_url->port;
+        
+        } else {
+            $host = $this->_url->host;
+        }
+
+        return $host;
+    }
+    
+    /**
+    * Resets the object to its initial state (DEPRECATED).
+    * Takes the same parameters as the constructor.
+    *
+    * @param  string $url    The url to be requested
+    * @param  array  $params Associative array of parameters
+    *                        (see constructor for details)
+    * @access public
+    * @deprecated deprecated since 1.2, call the constructor if this is necessary
+    */
+    function reset($url, $params = array())
+    {
+        $this->HTTP_Request($url, $params);
+    }
+
+    /**
+    * Sets the URL to be requested
+    *
+    * @param  string The url to be requested
+    * @access public
+    */
+    function setURL($url)
+    {
+        $this->_url = &new Net_URL($url, $this->_useBrackets);
+
+        if (!empty($this->_url->user) || !empty($this->_url->pass)) {
+            $this->setBasicAuth($this->_url->user, $this->_url->pass);
+        }
+
+        if (HTTP_REQUEST_HTTP_VER_1_1 == $this->_http) {
+            $this->addHeader('Host', $this->_generateHostHeader());
+        }
+    }
+    
+    /**
+    * Sets a proxy to be used
+    *
+    * @param string     Proxy host
+    * @param int        Proxy port
+    * @param string     Proxy username
+    * @param string     Proxy password
+    * @access public
+    */
+    function setProxy($host, $port = 8080, $user = null, $pass = null)
+    {
+        $this->_proxy_host = $host;
+        $this->_proxy_port = $port;
+        $this->_proxy_user = $user;
+        $this->_proxy_pass = $pass;
+
+        if (!empty($user)) {
+            $this->addHeader('Proxy-Authorization', 'Basic ' . base64_encode($user . ':' . $pass));
+        }
+    }
+
+    /**
+    * Sets basic authentication parameters
+    *
+    * @param string     Username
+    * @param string     Password
+    */
+    function setBasicAuth($user, $pass)
+    {
+        $this->_user = $user;
+        $this->_pass = $pass;
+
+        $this->addHeader('Authorization', 'Basic ' . base64_encode($user . ':' . $pass));
+    }
+
+    /**
+    * Sets the method to be used, GET, POST etc.
+    *
+    * @param string     Method to use. Use the defined constants for this
+    * @access public
+    */
+    function setMethod($method)
+    {
+        $this->_method = $method;
+    }
+
+    /**
+    * Sets the HTTP version to use, 1.0 or 1.1
+    *
+    * @param string     Version to use. Use the defined constants for this
+    * @access public
+    */
+    function setHttpVer($http)
+    {
+        $this->_http = $http;
+    }
+
+    /**
+    * Adds a request header
+    *
+    * @param string     Header name
+    * @param string     Header value
+    * @access public
+    */
+    function addHeader($name, $value)
+    {
+        $this->_requestHeaders[strtolower($name)] = $value;
+    }
+
+    /**
+    * Removes a request header
+    *
+    * @param string     Header name to remove
+    * @access public
+    */
+    function removeHeader($name)
+    {
+        if (isset($this->_requestHeaders[strtolower($name)])) {
+            unset($this->_requestHeaders[strtolower($name)]);
+        }
+    }
+
+    /**
+    * Adds a querystring parameter
+    *
+    * @param string     Querystring parameter name
+    * @param string     Querystring parameter value
+    * @param bool       Whether the value is already urlencoded or not, default = not
+    * @access public
+    */
+    function addQueryString($name, $value, $preencoded = false)
+    {
+        $this->_url->addQueryString($name, $value, $preencoded);
+    }    
+    
+    /**
+    * Sets the querystring to literally what you supply
+    *
+    * @param string     The querystring data. Should be of the format foo=bar&x=y etc
+    * @param bool       Whether data is already urlencoded or not, default = already encoded
+    * @access public
+    */
+    function addRawQueryString($querystring, $preencoded = true)
+    {
+        $this->_url->addRawQueryString($querystring, $preencoded);
+    }
+
+    /**
+    * Adds postdata items
+    *
+    * @param string     Post data name
+    * @param string     Post data value
+    * @param bool       Whether data is already urlencoded or not, default = not
+    * @access public
+    */
+    function addPostData($name, $value, $preencoded = false)
+    {
+        if ($preencoded) {
+            $this->_postData[$name] = $value;
+        } else {
+            $this->_postData[$name] = $this->_arrayMapRecursive('urlencode', $value);
+        }
+    }
+
+   /**
+    * Recursively applies the callback function to the value
+    * 
+    * @param    mixed   Callback function
+    * @param    mixed   Value to process
+    * @access   private
+    * @return   mixed   Processed value
+    */
+    function _arrayMapRecursive($callback, $value)
+    {
+        if (!is_array($value)) {
+            return call_user_func($callback, $value);
+        } else {
+            $map = array();
+            foreach ($value as $k => $v) {
+                $map[$k] = $this->_arrayMapRecursive($callback, $v);
+            }
+            return $map;
+        }
+    }
+
+   /**
+    * Adds a file to upload
+    * 
+    * This also changes content-type to 'multipart/form-data' for proper upload
+    * 
+    * @access public
+    * @param  string    name of file-upload field
+    * @param  mixed     file name(s)
+    * @param  mixed     content-type(s) of file(s) being uploaded
+    * @return bool      true on success
+    * @throws PEAR_Error
+    */
+    function addFile($inputName, $fileName, $contentType = 'application/octet-stream')
+    {
+        if (!is_array($fileName) && !is_readable($fileName)) {
+            return PEAR::raiseError("File '{$fileName}' is not readable");
+        } elseif (is_array($fileName)) {
+            foreach ($fileName as $name) {
+                if (!is_readable($name)) {
+                    return PEAR::raiseError("File '{$name}' is not readable");
+                }
+            }
+        }
+        $this->addHeader('Content-Type', 'multipart/form-data');
+        $this->_postFiles[$inputName] = array(
+            'name' => $fileName,
+            'type' => $contentType
+        );
+        return true;
+    }
+
+    /**
+    * Adds raw postdata (DEPRECATED)
+    *
+    * @param string     The data
+    * @param bool       Whether data is preencoded or not, default = already encoded
+    * @access public
+    * @deprecated       deprecated since 1.3.0, method addBody() should be used instead
+    */
+    function addRawPostData($postdata, $preencoded = true)
+    {
+        $this->_body = $preencoded ? $postdata : urlencode($postdata);
+    }
+
+   /**
+    * Sets the request body (for POST, PUT and similar requests)
+    *
+    * @param    string  Request body
+    * @access   public
+    */
+    function setBody($body)
+    {
+        $this->_body = $body;
+    }
+
+    /**
+    * Clears any postdata that has been added (DEPRECATED). 
+    * 
+    * Useful for multiple request scenarios.
+    *
+    * @access public
+    * @deprecated deprecated since 1.2
+    */
+    function clearPostData()
+    {
+        $this->_postData = null;
+    }
+
+    /**
+    * Appends a cookie to "Cookie:" header
+    * 
+    * @param string $name cookie name
+    * @param string $value cookie value
+    * @access public
+    */
+    function addCookie($name, $value)
+    {
+        $cookies = isset($this->_requestHeaders['cookie']) ? $this->_requestHeaders['cookie']. '; ' : '';
+        $this->addHeader('Cookie', $cookies . $name . '=' . $value);
+    }
+    
+    /**
+    * Clears any cookies that have been added (DEPRECATED). 
+    * 
+    * Useful for multiple request scenarios
+    *
+    * @access public
+    * @deprecated deprecated since 1.2
+    */
+    function clearCookies()
+    {
+        $this->removeHeader('Cookie');
+    }
+
+    /**
+    * Sends the request
+    *
+    * @access public
+    * @param  bool   Whether to store response body in Response object property,
+    *                set this to false if downloading a LARGE file and using a Listener
+    * @return mixed  PEAR error on error, true otherwise
+    */
+    function sendRequest($saveBody = true)
+    {
+        if (!is_a($this->_url, 'Net_URL')) {
+            return PEAR::raiseError('No URL given.');
+        }
+
+        $host = isset($this->_proxy_host) ? $this->_proxy_host : $this->_url->host;
+        $port = isset($this->_proxy_port) ? $this->_proxy_port : $this->_url->port;
+
+        // 4.3.0 supports SSL connections using OpenSSL. The function test determines
+        // we running on at least 4.3.0
+        if (strcasecmp($this->_url->protocol, 'https') == 0 AND function_exists('file_get_contents') AND extension_loaded('openssl')) {
+            if (isset($this->_proxy_host)) {
+                return PEAR::raiseError('HTTPS proxies are not supported.');
+            }
+            $host = 'ssl://' . $host;
+        }
+
+        // magic quotes may fuck up file uploads and chunked response processing
+        $magicQuotes = ini_get('magic_quotes_runtime');
+        ini_set('magic_quotes_runtime', false);
+
+        // If this is a second request, we may get away without
+        // re-connecting if they're on the same server
+        $err = $this->_sock->connect($host, $port, null, $this->_timeout, $this->_socketOptions);
+		$r   = $this->_buildRequest();
+		
+        PEAR::isError($err) or $err = $this->_sock->write($r);
+
+        if (!PEAR::isError($err)) {
+            if (!empty($this->_readTimeout)) {
+                $this->_sock->setTimeout($this->_readTimeout[0], $this->_readTimeout[1]);
+            }
+
+            $this->_notify('sentRequest');
+
+            // Read the response
+            $this->_response = &new HTTP_Response($this->_sock, $this->_listeners);
+            $err = $this->_response->process($this->_saveBody && $saveBody);
+        }
+
+        ini_set('magic_quotes_runtime', $magicQuotes);
+
+        if (PEAR::isError($err)) {
+            return $err;
+        }
+
+
+        // Check for redirection
+        if (    $this->_allowRedirects
+            AND $this->_redirects <= $this->_maxRedirects
+            AND $this->getResponseCode() > 300
+            AND $this->getResponseCode() < 399
+            AND !empty($this->_response->_headers['location'])) {
+
+            
+            $redirect = $this->_response->_headers['location'];
+
+            // Absolute URL
+            if (preg_match('/^https?:\/\//i', $redirect)) {
+                $this->_url = &new Net_URL($redirect);
+                $this->addHeader('Host', $this->_generateHostHeader());
+            // Absolute path
+            } elseif ($redirect{0} == '/') {
+                $this->_url->path = $redirect;
+            
+            // Relative path
+            } elseif (substr($redirect, 0, 3) == '../' OR substr($redirect, 0, 2) == './') {
+                if (substr($this->_url->path, -1) == '/') {
+                    $redirect = $this->_url->path . $redirect;
+                } else {
+                    $redirect = dirname($this->_url->path) . '/' . $redirect;
+                }
+                $redirect = Net_URL::resolvePath($redirect);
+                $this->_url->path = $redirect;
+                
+            // Filename, no path
+            } else {
+                if (substr($this->_url->path, -1) == '/') {
+                    $redirect = $this->_url->path . $redirect;
+                } else {
+                    $redirect = dirname($this->_url->path) . '/' . $redirect;
+                }
+                $this->_url->path = $redirect;
+            }
+
+            $this->_redirects++;
+            return $this->sendRequest($saveBody);
+
+        // Too many redirects
+        } elseif ($this->_allowRedirects AND $this->_redirects > $this->_maxRedirects) {
+            return PEAR::raiseError('Too many redirects');
+        }
+
+        $this->_sock->disconnect();
+
+        return true;
+    }
+
+    /**
+    * Returns the response code
+    *
+    * @access public
+    * @return mixed     Response code, false if not set
+    */
+    function getResponseCode()
+    {
+        return isset($this->_response->_code) ? $this->_response->_code : false;
+    }
+
+    /**
+    * Returns either the named header or all if no name given
+    *
+    * @access public
+    * @param string     The header name to return, do not set to get all headers
+    * @return mixed     either the value of $headername (false if header is not present)
+    *                   or an array of all headers
+    */
+    function getResponseHeader($headername = null)
+    {
+        if (!isset($headername)) {
+            return isset($this->_response->_headers)? $this->_response->_headers: array();
+        } else {
+            $headername = strtolower($headername);
+            return isset($this->_response->_headers[$headername]) ? $this->_response->_headers[$headername] : false;
+        }
+    }
+
+    /**
+    * Returns the body of the response
+    *
+    * @access public
+    * @return mixed     response body, false if not set
+    */
+    function getResponseBody()
+    {
+        return isset($this->_response->_body) ? $this->_response->_body : false;
+    }
+
+    /**
+    * Returns cookies set in response
+    * 
+    * @access public
+    * @return mixed     array of response cookies, false if none are present
+    */
+    function getResponseCookies()
+    {
+        return isset($this->_response->_cookies) ? $this->_response->_cookies : false;
+    }
+
+    /**
+    * Builds the request string
+    *
+    * @access private
+    * @return string The request string
+    */
+    function _buildRequest()
+    {
+        $separator = ini_get('arg_separator.output');
+        ini_set('arg_separator.output', '&');
+        $querystring = ($querystring = $this->_url->getQueryString()) ? '?' . $querystring : '';
+        ini_set('arg_separator.output', $separator);
+
+        $host = isset($this->_proxy_host) ? $this->_url->protocol . '://' . $this->_url->host : '';
+        $port = (isset($this->_proxy_host) AND $this->_url->port != 80) ? ':' . $this->_url->port : '';
+        $path = (empty($this->_url->path)? '/': $this->_url->path) . $querystring;
+        $url  = $host . $port . $path;
+
+        $request = $this->_method . ' ' . $url . ' HTTP/' . $this->_http . "\r\n";
+
+        if (in_array($this->_method, $this->_bodyDisallowed) ||
+            (HTTP_REQUEST_METHOD_POST != $this->_method && empty($this->_body)) ||
+            (HTTP_REQUEST_METHOD_POST != $this->_method && empty($this->_postData) && empty($this->_postFiles))) {
+
+            $this->removeHeader('Content-Type');
+        } else {
+            if (empty($this->_requestHeaders['content-type'])) {
+                // Add default content-type
+                $this->addHeader('Content-Type', 'application/x-www-form-urlencoded');
+            } elseif ('multipart/form-data' == $this->_requestHeaders['content-type']) {
+                $boundary = 'HTTP_Request_' . md5(uniqid('request') . microtime());
+                $this->addHeader('Content-Type', 'multipart/form-data; boundary=' . $boundary);
+            }
+        }
+
+        // Request Headers
+        if (!empty($this->_requestHeaders)) {
+            foreach ($this->_requestHeaders as $name => $value) {
+                $canonicalName = implode('-', array_map('ucfirst', explode('-', $name)));
+                $request      .= $canonicalName . ': ' . $value . "\r\n";
+            }
+        }
+
+        // No post data or wrong method, so simply add a final CRLF
+        if (in_array($this->_method, $this->_bodyDisallowed) || 
+            (HTTP_REQUEST_METHOD_POST != $this->_method && empty($this->_body))) {
+
+            $request .= "\r\n";
+
+        // Post data if it's an array
+        } elseif (HTTP_REQUEST_METHOD_POST == $this->_method && 
+                  (!empty($this->_postData) || !empty($this->_postFiles))) {
+
+            // "normal" POST request
+            if (!isset($boundary)) {
+                $postdata = implode('&', array_map(
+                    create_function('$a', 'return $a[0] . \'=\' . $a[1];'), 
+                    $this->_flattenArray('', $this->_postData)
+                ));
+
+            // multipart request, probably with file uploads
+            } else {
+                $postdata = '';
+                if (!empty($this->_postData)) {
+                    $flatData = $this->_flattenArray('', $this->_postData);
+                    foreach ($flatData as $item) {
+                        $postdata .= '--' . $boundary . "\r\n";
+                        $postdata .= 'Content-Disposition: form-data; name="' . $item[0] . '"';
+                        $postdata .= "\r\n\r\n" . urldecode($item[1]) . "\r\n";
+                    }
+                }
+                foreach ($this->_postFiles as $name => $value) {
+                    if (is_array($value['name'])) {
+                        $varname       = $name . ($this->_useBrackets? '[]': '');
+                    } else {
+                        $varname       = $name;
+                        $value['name'] = array($value['name']);
+                    }
+                    foreach ($value['name'] as $key => $filename) {
+                        $fp   = fopen($filename, 'r');
+                        $data = fread($fp, filesize($filename));
+                        fclose($fp);
+                        $basename = basename($filename);
+                        $type     = is_array($value['type'])? @$value['type'][$key]: $value['type'];
+
+                        $postdata .= '--' . $boundary . "\r\n";
+                        $postdata .= 'Content-Disposition: form-data; name="' . $varname . '"; filename="' . $basename . '"';
+                        $postdata .= "\r\nContent-Type: " . $type;
+                        $postdata .= "\r\n\r\n" . $data . "\r\n";
+                    }
+                }
+                $postdata .= '--' . $boundary . "--\r\n";
+            }
+            $request .= 'Content-Length: ' . strlen($postdata) . "\r\n\r\n";
+            $request .= $postdata;
+
+        // Explicitly set request body
+        } elseif (!empty($this->_body)) {
+
+            $request .= 'Content-Length: ' . strlen($this->_body) . "\r\n\r\n";
+            $request .= $this->_body;
+        }       
+        return $request;
+    }
+
+   /**
+    * Helper function to change the (probably multidimensional) associative array
+    * into the simple one.
+    *
+    * @param    string  name for item
+    * @param    mixed   item's values
+    * @return   array   array with the following items: array('item name', 'item value');
+    */
+    function _flattenArray($name, $values)
+    {
+        if (!is_array($values)) {
+            return array(array($name, $values));
+        } else {
+            $ret = array();
+            foreach ($values as $k => $v) {
+                if (empty($name)) {
+                    $newName = $k;
+                } elseif ($this->_useBrackets) {
+                    $newName = $name . '[' . $k . ']';
+                } else {
+                    $newName = $name;
+                }
+                $ret = array_merge($ret, $this->_flattenArray($newName, $v));
+            }
+            return $ret;
+        }
+    }
+
+
+   /**
+    * Adds a Listener to the list of listeners that are notified of
+    * the object's events
+    * 
+    * @param    object   HTTP_Request_Listener instance to attach
+    * @return   boolean  whether the listener was successfully attached
+    * @access   public
+    */
+    function attach(&$listener)
+    {
+        if (!is_a($listener, 'HTTP_Request_Listener')) {
+            return false;
+        }
+        $this->_listeners[$listener->getId()] =& $listener;
+        return true;
+    }
+
+
+   /**
+    * Removes a Listener from the list of listeners 
+    * 
+    * @param    object   HTTP_Request_Listener instance to detach
+    * @return   boolean  whether the listener was successfully detached
+    * @access   public
+    */
+    function detach(&$listener)
+    {
+        if (!is_a($listener, 'HTTP_Request_Listener') || 
+            !isset($this->_listeners[$listener->getId()])) {
+            return false;
+        }
+        unset($this->_listeners[$listener->getId()]);
+        return true;
+    }
+
+
+   /**
+    * Notifies all registered listeners of an event.
+    * 
+    * Events sent by HTTP_Request object
+    * 'sentRequest': after the request was sent
+    * Events sent by HTTP_Response object
+    * 'gotHeaders': after receiving response headers (headers are passed in $data)
+    * 'tick': on receiving a part of response body (the part is passed in $data)
+    * 'gzTick': on receiving a gzip-encoded part of response body (ditto)
+    * 'gotBody': after receiving the response body (passes the decoded body in $data if it was gzipped)
+    * 
+    * @param    string  Event name
+    * @param    mixed   Additional data
+    * @access   private
+    */
+    function _notify($event, $data = null)
+    {
+        foreach (array_keys($this->_listeners) as $id) {
+            $this->_listeners[$id]->update($this, $event, $data);
+        }
+    }
+}
+
+
+/**
+* Response class to complement the Request class
+*/
+class HTTP_Response
+{
+    /**
+    * Socket object
+    * @var object
+    */
+    var $_sock;
+
+    /**
+    * Protocol
+    * @var string
+    */
+    var $_protocol;
+    
+    /**
+    * Return code
+    * @var string
+    */
+    var $_code;
+    
+    /**
+    * Response headers
+    * @var array
+    */
+    var $_headers;
+
+    /**
+    * Cookies set in response  
+    * @var array
+    */
+    var $_cookies;
+
+    /**
+    * Response body
+    * @var string
+    */
+    var $_body = '';
+
+   /**
+    * Used by _readChunked(): remaining length of the current chunk
+    * @var string
+    */
+    var $_chunkLength = 0;
+
+   /**
+    * Attached listeners
+    * @var array
+    */
+    var $_listeners = array();
+
+    /**
+    * Constructor
+    *
+    * @param  object Net_Socket     socket to read the response from
+    * @param  array                 listeners attached to request
+    * @return mixed PEAR Error on error, true otherwise
+    */
+    function HTTP_Response(&$sock, &$listeners)
+    {
+        $this->_sock      =& $sock;
+        $this->_listeners =& $listeners;
+    }
+
+
+   /**
+    * Processes a HTTP response
+    * 
+    * This extracts response code, headers, cookies and decodes body if it 
+    * was encoded in some way
+    *
+    * @access public
+    * @param  bool      Whether to store response body in object property, set
+    *                   this to false if downloading a LARGE file and using a Listener.
+    *                   This is assumed to be true if body is gzip-encoded.
+    * @throws PEAR_Error
+    * @return mixed     true on success, PEAR_Error in case of malformed response
+    */
+    function process($saveBody = true)
+    {
+        do {
+            $line = $this->_sock->readLine();
+            if (sscanf($line, 'HTTP/%s %s', $http_version, $returncode) != 2) {
+                return PEAR::raiseError('Malformed response.');
+            } else {
+                $this->_protocol = 'HTTP/' . $http_version;
+                $this->_code     = intval($returncode);
+            }
+            while ('' !== ($header = $this->_sock->readLine())) {
+                $this->_processHeader($header);
+            }
+        } while (100 == $this->_code);
+
+        $this->_notify('gotHeaders', $this->_headers);
+
+        // If response body is present, read it and decode
+        $chunked = isset($this->_headers['transfer-encoding']) && ('chunked' == $this->_headers['transfer-encoding']);
+        $gzipped = isset($this->_headers['content-encoding']) && ('gzip' == $this->_headers['content-encoding']);
+        $hasBody = false;
+        if (!isset($this->_headers['content-length']) || 0 != $this->_headers['content-length']) {
+            while (!$this->_sock->eof()) {
+                if ($chunked) {
+                    $data = $this->_readChunked();
+                } else {
+                    $data = $this->_sock->read(4096);
+                }
+                if ('' == $data) {
+                    break;
+                } else {
+                    $hasBody = true;
+                    if ($saveBody || $gzipped) {
+                        $this->_body .= $data;
+                    }
+                    $this->_notify($gzipped? 'gzTick': 'tick', $data);
+                }
+            }
+        }
+        if ($hasBody) {
+            // Uncompress the body if needed
+            if ($gzipped) {
+                $this->_body = gzinflate(substr($this->_body, 10));
+                $this->_notify('gotBody', $this->_body);
+            } else {
+                $this->_notify('gotBody');
+            }
+        }
+        return true;
+    }
+
+
+   /**
+    * Processes the response header
+    *
+    * @access private
+    * @param  string    HTTP header
+    */
+    function _processHeader($header)
+    {
+        list($headername, $headervalue) = explode(':', $header, 2);
+        $headername  = strtolower($headername);
+        $headervalue = ltrim($headervalue);
+        
+        if ('set-cookie' != $headername) {
+            if (isset($this->_headers[$headername])) {
+                $this->_headers[$headername] .= ',' . $headervalue;
+            } else {
+                $this->_headers[$headername]  = $headervalue;
+            }
+        } else {
+            $this->_parseCookie($headervalue);
+        }
+    }
+
+
+   /**
+    * Parse a Set-Cookie header to fill $_cookies array
+    *
+    * @access private
+    * @param  string    value of Set-Cookie header
+    */
+    function _parseCookie($headervalue)
+    {
+        $cookie = array(
+            'expires' => null,
+            'domain'  => null,
+            'path'    => null,
+            'secure'  => false
+        );
+
+        // Only a name=value pair
+        if (!strpos($headervalue, ';')) {
+            $pos = strpos($headervalue, '=');
+            $cookie['name']  = trim(substr($headervalue, 0, $pos));
+            $cookie['value'] = trim(substr($headervalue, $pos + 1));
+
+        // Some optional parameters are supplied
+        } else {
+            $elements = explode(';', $headervalue);
+            $pos = strpos($elements[0], '=');
+            $cookie['name']  = trim(substr($elements[0], 0, $pos));
+            $cookie['value'] = trim(substr($elements[0], $pos + 1));
+
+            for ($i = 1; $i < count($elements); $i++) {
+                if (false === strpos($elements[$i], '=')) {
+                    $elName  = trim($elements[$i]);
+                    $elValue = null;
+                } else {
+                    list ($elName, $elValue) = array_map('trim', explode('=', $elements[$i]));
+                }
+                $elName = strtolower($elName);
+                if ('secure' == $elName) {
+                    $cookie['secure'] = true;
+                } elseif ('expires' == $elName) {
+                    $cookie['expires'] = str_replace('"', '', $elValue);
+                } elseif ('path' == $elName || 'domain' == $elName) {
+                    $cookie[$elName] = urldecode($elValue);
+                } else {
+                    $cookie[$elName] = $elValue;
+                }
+            }
+        }
+        $this->_cookies[] = $cookie;
+    }
+
+
+   /**
+    * Read a part of response body encoded with chunked Transfer-Encoding
+    * 
+    * @access private
+    * @return string
+    */
+    function _readChunked()
+    {
+        // at start of the next chunk?
+        if (0 == $this->_chunkLength) {
+            $line = $this->_sock->readLine();
+            if (preg_match('/^([0-9a-f]+)/i', $line, $matches)) {
+                $this->_chunkLength = hexdec($matches[1]); 
+                // Chunk with zero length indicates the end
+                if (0 == $this->_chunkLength) {
+                    $this->_sock->readLine(); // make this an eof()
+                    return '';
+                }
+            } else {
+                return '';
+            }
+        }
+        $data = $this->_sock->read($this->_chunkLength);
+        $this->_chunkLength -= strlen($data);
+        if (0 == $this->_chunkLength) {
+            $this->_sock->readLine(); // Trailing CRLF
+        }
+        return $data;
+    }
+
+
+   /**
+    * Notifies all registered listeners of an event.
+    * 
+    * @param    string  Event name
+    * @param    mixed   Additional data
+    * @access   private
+    * @see HTTP_Request::_notify()
+    */
+    function _notify($event, $data = null)
+    {
+        foreach (array_keys($this->_listeners) as $id) {
+            $this->_listeners[$id]->update($this, $event, $data);
+        }
+    }
+} // End class HTTP_Response
+?>

Added: trunk/examples/basecamp_api/proxy/php/Socket.php
===================================================================
--- trunk/examples/basecamp_api/proxy/php/Socket.php	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/proxy/php/Socket.php	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,528 @@
+<?php
+//
+// +----------------------------------------------------------------------+
+// | PHP Version 4                                                        |
+// +----------------------------------------------------------------------+
+// | Copyright (c) 1997-2003 The PHP Group                                |
+// +----------------------------------------------------------------------+
+// | This source file is subject to version 2.0 of the PHP license,       |
+// | that is bundled with this package in the file LICENSE, and is        |
+// | available at through the world-wide-web at                           |
+// | http://www.php.net/license/2_02.txt.                                 |
+// | If you did not receive a copy of the PHP license and are unable to   |
+// | obtain it through the world-wide-web, please send a note to          |
+// | license at php.net so we can mail you a copy immediately.               |
+// +----------------------------------------------------------------------+
+// | Authors: Stig Bakken <ssb at php.net>                                   |
+// |          Chuck Hagenbuch <chuck at horde.org>                           |
+// +----------------------------------------------------------------------+
+//
+// $Id: Socket.php,v 1.24 2005/02/03 20:40:16 chagenbu Exp $
+
+require_once 'PEAR.php';
+
+define('NET_SOCKET_READ',  1);
+define('NET_SOCKET_WRITE', 2);
+define('NET_SOCKET_ERROR', 3);
+
+/**
+ * Generalized Socket class.
+ *
+ * @version 1.1
+ * @author Stig Bakken <ssb at php.net>
+ * @author Chuck Hagenbuch <chuck at horde.org>
+ */
+class Net_Socket extends PEAR {
+
+    /**
+     * Socket file pointer.
+     * @var resource $fp
+     */
+    var $fp = null;
+
+    /**
+     * Whether the socket is blocking. Defaults to true.
+     * @var boolean $blocking
+     */
+    var $blocking = true;
+
+    /**
+     * Whether the socket is persistent. Defaults to false.
+     * @var boolean $persistent
+     */
+    var $persistent = false;
+
+    /**
+     * The IP address to connect to.
+     * @var string $addr
+     */
+    var $addr = '';
+
+    /**
+     * The port number to connect to.
+     * @var integer $port
+     */
+    var $port = 0;
+
+    /**
+     * Number of seconds to wait on socket connections before assuming
+     * there's no more data. Defaults to no timeout.
+     * @var integer $timeout
+     */
+    var $timeout = false;
+
+    /**
+     * Number of bytes to read at a time in readLine() and
+     * readAll(). Defaults to 2048.
+     * @var integer $lineLength
+     */
+    var $lineLength = 2048;
+
+    /**
+     * Connect to the specified port. If called when the socket is
+     * already connected, it disconnects and connects again.
+     *
+     * @param string  $addr        IP address or host name.
+     * @param integer $port        TCP port number.
+     * @param boolean $persistent  (optional) Whether the connection is
+     *                             persistent (kept open between requests
+     *                             by the web server).
+     * @param integer $timeout     (optional) How long to wait for data.
+     * @param array   $options     See options for stream_context_create.
+     *
+     * @access public
+     *
+     * @return boolean | PEAR_Error  True on success or a PEAR_Error on failure.
+     */
+    function connect($addr, $port = 0, $persistent = null, $timeout = null, $options = null)
+    {
+        if (is_resource($this->fp)) {
+            @fclose($this->fp);
+            $this->fp = null;
+        }
+
+        if (!$addr) {
+            return $this->raiseError('$addr cannot be empty');
+        } elseif (strspn($addr, '.0123456789') == strlen($addr) ||
+                  strstr($addr, '/') !== false) {
+            $this->addr = $addr;
+        } else {
+            $this->addr = @gethostbyname($addr);
+        }
+
+        $this->port = $port % 65536;
+
+        if ($persistent !== null) {
+            $this->persistent = $persistent;
+        }
+
+        if ($timeout !== null) {
+            $this->timeout = $timeout;
+        }
+
+        $openfunc = $this->persistent ? 'pfsockopen' : 'fsockopen';
+        $errno = 0;
+        $errstr = '';
+        if ($options && function_exists('stream_context_create')) {
+            if ($this->timeout) {
+                $timeout = $this->timeout;
+            } else {
+                $timeout = 0;
+            }
+            $context = stream_context_create($options);
+            $fp = @$openfunc($this->addr, $this->port, $errno, $errstr, $timeout, $context);
+        } else {
+            if ($this->timeout) {
+                $fp = @$openfunc($this->addr, $this->port, $errno, $errstr, $this->timeout);
+            } else {
+                $fp = @$openfunc($this->addr, $this->port, $errno, $errstr);
+            }
+        }
+
+        if (!$fp) {
+            return $this->raiseError($errstr, $errno);
+        }
+
+        $this->fp = $fp;
+
+        return $this->setBlocking($this->blocking);
+    }
+
+    /**
+     * Disconnects from the peer, closes the socket.
+     *
+     * @access public
+     * @return mixed true on success or an error object otherwise
+     */
+    function disconnect()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        @fclose($this->fp);
+        $this->fp = null;
+        return true;
+    }
+
+    /**
+     * Find out if the socket is in blocking mode.
+     *
+     * @access public
+     * @return boolean  The current blocking mode.
+     */
+    function isBlocking()
+    {
+        return $this->blocking;
+    }
+
+    /**
+     * Sets whether the socket connection should be blocking or
+     * not. A read call to a non-blocking socket will return immediately
+     * if there is no data available, whereas it will block until there
+     * is data for blocking sockets.
+     *
+     * @param boolean $mode  True for blocking sockets, false for nonblocking.
+     * @access public
+     * @return mixed true on success or an error object otherwise
+     */
+    function setBlocking($mode)
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $this->blocking = $mode;
+        socket_set_blocking($this->fp, $this->blocking);
+        return true;
+    }
+
+    /**
+     * Sets the timeout value on socket descriptor,
+     * expressed in the sum of seconds and microseconds
+     *
+     * @param integer $seconds  Seconds.
+     * @param integer $microseconds  Microseconds.
+     * @access public
+     * @return mixed true on success or an error object otherwise
+     */
+    function setTimeout($seconds, $microseconds)
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        return socket_set_timeout($this->fp, $seconds, $microseconds);
+    }
+
+    /**
+     * Returns information about an existing socket resource.
+     * Currently returns four entries in the result array:
+     *
+     * <p>
+     * timed_out (bool) - The socket timed out waiting for data<br>
+     * blocked (bool) - The socket was blocked<br>
+     * eof (bool) - Indicates EOF event<br>
+     * unread_bytes (int) - Number of bytes left in the socket buffer<br>
+     * </p>
+     *
+     * @access public
+     * @return mixed Array containing information about existing socket resource or an error object otherwise
+     */
+    function getStatus()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        return socket_get_status($this->fp);
+    }
+
+    /**
+     * Get a specified line of data
+     *
+     * @access public
+     * @return $size bytes of data from the socket, or a PEAR_Error if
+     *         not connected.
+     */
+    function gets($size)
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        return @fgets($this->fp, $size);
+    }
+
+    /**
+     * Read a specified amount of data. This is guaranteed to return,
+     * and has the added benefit of getting everything in one fread()
+     * chunk; if you know the size of the data you're getting
+     * beforehand, this is definitely the way to go.
+     *
+     * @param integer $size  The number of bytes to read from the socket.
+     * @access public
+     * @return $size bytes of data from the socket, or a PEAR_Error if
+     *         not connected.
+     */
+    function read($size)
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        return @fread($this->fp, $size);
+    }
+
+    /**
+     * Write a specified amount of data.
+     *
+     * @param string  $data       Data to write.
+     * @param integer $blocksize  Amount of data to write at once.
+     *                            NULL means all at once.
+     *
+     * @access public
+     * @return mixed true on success or an error object otherwise
+     */
+    function write($data, $blocksize = null)
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        if (is_null($blocksize) && !OS_WINDOWS) {
+            return fwrite($this->fp, $data);
+        } else {
+            if (is_null($blocksize)) {
+                $blocksize = 1024;
+            }
+
+            $pos = 0;
+            $size = strlen($data);
+            while ($pos < $size) {
+                $written = @fwrite($this->fp, substr($data, $pos, $blocksize));
+                if ($written === false) {
+                    return false;
+                }
+                $pos += $written;
+            }
+
+            return $pos;
+        }
+    }
+
+    /**
+     * Write a line of data to the socket, followed by a trailing "\r\n".
+     *
+     * @access public
+     * @return mixed fputs result, or an error
+     */
+    function writeLine($data)
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        return fwrite($this->fp, $data . "\r\n");
+    }
+
+    /**
+     * Tests for end-of-file on a socket descriptor.
+     *
+     * @access public
+     * @return bool
+     */
+    function eof()
+    {
+        return (is_resource($this->fp) && feof($this->fp));
+    }
+
+    /**
+     * Reads a byte of data
+     *
+     * @access public
+     * @return 1 byte of data from the socket, or a PEAR_Error if
+     *         not connected.
+     */
+    function readByte()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        return ord(@fread($this->fp, 1));
+    }
+
+    /**
+     * Reads a word of data
+     *
+     * @access public
+     * @return 1 word of data from the socket, or a PEAR_Error if
+     *         not connected.
+     */
+    function readWord()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $buf = @fread($this->fp, 2);
+        return (ord($buf[0]) + (ord($buf[1]) << 8));
+    }
+
+    /**
+     * Reads an int of data
+     *
+     * @access public
+     * @return integer  1 int of data from the socket, or a PEAR_Error if
+     *                  not connected.
+     */
+    function readInt()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $buf = @fread($this->fp, 4);
+        return (ord($buf[0]) + (ord($buf[1]) << 8) +
+                (ord($buf[2]) << 16) + (ord($buf[3]) << 24));
+    }
+
+    /**
+     * Reads a zero-terminated string of data
+     *
+     * @access public
+     * @return string, or a PEAR_Error if
+     *         not connected.
+     */
+    function readString()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $string = '';
+        while (($char = @fread($this->fp, 1)) != "\x00")  {
+            $string .= $char;
+        }
+        return $string;
+    }
+
+    /**
+     * Reads an IP Address and returns it in a dot formated string
+     *
+     * @access public
+     * @return Dot formated string, or a PEAR_Error if
+     *         not connected.
+     */
+    function readIPAddress()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $buf = @fread($this->fp, 4);
+        return sprintf("%s.%s.%s.%s", ord($buf[0]), ord($buf[1]),
+                       ord($buf[2]), ord($buf[3]));
+    }
+
+    /**
+     * Read until either the end of the socket or a newline, whichever
+     * comes first. Strips the trailing newline from the returned data.
+     *
+     * @access public
+     * @return All available data up to a newline, without that
+     *         newline, or until the end of the socket, or a PEAR_Error if
+     *         not connected.
+     */
+    function readLine()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $line = '';
+        $timeout = time() + $this->timeout;
+        while (!feof($this->fp) && (!$this->timeout || time() < $timeout)) {
+            $line .= @fgets($this->fp, $this->lineLength);
+            if (substr($line, -1) == "\n") {
+                return rtrim($line, "\r\n");
+            }
+        }
+        return $line;
+    }
+
+    /**
+     * Read until the socket closes, or until there is no more data in
+     * the inner PHP buffer. If the inner buffer is empty, in blocking
+     * mode we wait for at least 1 byte of data. Therefore, in
+     * blocking mode, if there is no data at all to be read, this
+     * function will never exit (unless the socket is closed on the
+     * remote end).
+     *
+     * @access public
+     *
+     * @return string  All data until the socket closes, or a PEAR_Error if
+     *                 not connected.
+     */
+    function readAll()
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $data = '';
+        while (!feof($this->fp)) {
+            $data .= @fread($this->fp, $this->lineLength);
+        }
+        return $data;
+    }
+
+    /**
+     * Runs the equivalent of the select() system call on the socket
+     * with a timeout specified by tv_sec and tv_usec.
+     *
+     * @param integer $state    Which of read/write/error to check for.
+     * @param integer $tv_sec   Number of seconds for timeout.
+     * @param integer $tv_usec  Number of microseconds for timeout.
+     *
+     * @access public
+     * @return False if select fails, integer describing which of read/write/error
+     *         are ready, or PEAR_Error if not connected.
+     */
+    function select($state, $tv_sec, $tv_usec = 0)
+    {
+        if (!is_resource($this->fp)) {
+            return $this->raiseError('not connected');
+        }
+
+        $read = null;
+        $write = null;
+        $except = null;
+        if ($state & NET_SOCKET_READ) {
+            $read[] = $this->fp;
+        }
+        if ($state & NET_SOCKET_WRITE) {
+            $write[] = $this->fp;
+        }
+        if ($state & NET_SOCKET_ERROR) {
+            $except[] = $this->fp;
+        }
+        if (false === ($sr = stream_select($read, $write, $except, $tv_sec, $tv_usec))) {
+            return false;
+        }
+
+        $result = 0;
+        if (count($read)) {
+            $result |= NET_SOCKET_READ;
+        }
+        if (count($write)) {
+            $result |= NET_SOCKET_WRITE;
+        }
+        if (count($except)) {
+            $result |= NET_SOCKET_ERROR;
+        }
+        return $result;
+    }
+
+}

Added: trunk/examples/basecamp_api/proxy/php/URL.php
===================================================================
--- trunk/examples/basecamp_api/proxy/php/URL.php	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/proxy/php/URL.php	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,410 @@
+<?php
+// +-----------------------------------------------------------------------+
+// | Copyright (c) 2002-2004, Richard Heyes                                |
+// | All rights reserved.                                                  |
+// |                                                                       |
+// | Redistribution and use in source and binary forms, with or without    |
+// | modification, are permitted provided that the following conditions    |
+// | are met:                                                              |
+// |                                                                       |
+// | o Redistributions of source code must retain the above copyright      |
+// |   notice, this list of conditions and the following disclaimer.       |
+// | o Redistributions in binary form must reproduce the above copyright   |
+// |   notice, this list of conditions and the following disclaimer in the |
+// |   documentation and/or other materials provided with the distribution.|
+// | o The names of the authors may not be used to endorse or promote      |
+// |   products derived from this software without specific prior written  |
+// |   permission.                                                         |
+// |                                                                       |
+// | THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   |
+// | "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT     |
+// | LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR |
+// | A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  |
+// | OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, |
+// | SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT      |
+// | LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, |
+// | DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY |
+// | THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   |
+// | (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE |
+// | OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  |
+// |                                                                       |
+// +-----------------------------------------------------------------------+
+// | Author: Richard Heyes <richard at php net>                            |
+// +-----------------------------------------------------------------------+
+//
+// $Id: URL.php,v 1.36 2004/06/19 18:58:50 richard Exp $
+//
+// Net_URL Class
+
+class Net_URL
+{
+    /**
+    * Full url
+    * @var string
+    */
+    var $url;
+
+    /**
+    * Protocol
+    * @var string
+    */
+    var $protocol;
+
+    /**
+    * Username
+    * @var string
+    */
+    var $username;
+
+    /**
+    * Password
+    * @var string
+    */
+    var $password;
+
+    /**
+    * Host
+    * @var string
+    */
+    var $host;
+
+    /**
+    * Port
+    * @var integer
+    */
+    var $port;
+
+    /**
+    * Path
+    * @var string
+    */
+    var $path;
+
+    /**
+    * Query string
+    * @var array
+    */
+    var $querystring;
+
+    /**
+    * Anchor
+    * @var string
+    */
+    var $anchor;
+
+    /**
+    * Whether to use []
+    * @var bool
+    */
+    var $useBrackets;
+
+    /**
+    * PHP4 Constructor
+    *
+    * @see __construct()
+    */
+    function Net_URL($url = null, $useBrackets = true)
+    {
+        $this->__construct($url, $useBrackets);
+    }
+
+    /**
+    * PHP5 Constructor
+    *
+    * Parses the given url and stores the various parts
+    * Defaults are used in certain cases
+    *
+    * @param string $url         Optional URL
+    * @param bool   $useBrackets Whether to use square brackets when
+    *                            multiple querystrings with the same name
+    *                            exist
+    */
+    function __construct($url = null, $useBrackets = true)
+    {
+        $HTTP_SERVER_VARS  = !empty($_SERVER) ? $_SERVER : $GLOBALS['HTTP_SERVER_VARS'];
+
+        $this->useBrackets = $useBrackets;
+        $this->url         = $url;
+        $this->user        = '';
+        $this->pass        = '';
+        $this->host        = '';
+        $this->port        = 80;
+        $this->path        = '';
+        $this->querystring = array();
+        $this->anchor      = '';
+
+        // Only use defaults if not an absolute URL given
+        if (!preg_match('/^[a-z0-9]+:\/\//i', $url)) {
+
+            $this->protocol    = (@$HTTP_SERVER_VARS['HTTPS'] == 'on' ? 'https' : 'http');
+
+            /**
+            * Figure out host/port
+            */
+            if (!empty($HTTP_SERVER_VARS['HTTP_HOST']) AND preg_match('/^(.*)(:([0-9]+))?$/U', $HTTP_SERVER_VARS['HTTP_HOST'], $matches)) {
+                $host = $matches[1];
+                if (!empty($matches[3])) {
+                    $port = $matches[3];
+                } else {
+                    $port = $this->getStandardPort($this->protocol);
+                }
+            }
+
+            $this->user        = '';
+            $this->pass        = '';
+            $this->host        = !empty($host) ? $host : (isset($HTTP_SERVER_VARS['SERVER_NAME']) ? $HTTP_SERVER_VARS['SERVER_NAME'] : 'localhost');
+            $this->port        = !empty($port) ? $port : (isset($HTTP_SERVER_VARS['SERVER_PORT']) ? $HTTP_SERVER_VARS['SERVER_PORT'] : $this->getStandardPort($this->protocol));
+            $this->path        = !empty($HTTP_SERVER_VARS['PHP_SELF']) ? $HTTP_SERVER_VARS['PHP_SELF'] : '/';
+            $this->querystring = isset($HTTP_SERVER_VARS['QUERY_STRING']) ? $this->_parseRawQuerystring($HTTP_SERVER_VARS['QUERY_STRING']) : null;
+            $this->anchor      = '';
+        }
+
+        // Parse the url and store the various parts
+        if (!empty($url)) {
+            $urlinfo = parse_url($url);
+
+            // Default querystring
+            $this->querystring = array();
+
+            foreach ($urlinfo as $key => $value) {
+                switch ($key) {
+                    case 'scheme':
+                        $this->protocol = $value;
+                        $this->port     = $this->getStandardPort($value);
+                        break;
+
+                    case 'user':
+                    case 'pass':
+                    case 'host':
+                    case 'port':
+                        $this->$key = $value;
+                        break;
+
+                    case 'path':
+                        if ($value{0} == '/') {
+                            $this->path = $value;
+                        } else {
+                            $path = dirname($this->path) == DIRECTORY_SEPARATOR ? '' : dirname($this->path);
+                            $this->path = sprintf('%s/%s', $path, $value);
+                        }
+                        break;
+
+                    case 'query':
+                        $this->querystring = $this->_parseRawQueryString($value);
+                        break;
+
+                    case 'fragment':
+                        $this->anchor = $value;
+                        break;
+                }
+            }
+        }
+    }
+
+    /**
+    * Returns full url
+    *
+    * @return string Full url
+    * @access public
+    */
+    function getURL()
+    {
+        $querystring = $this->getQueryString();
+
+        $this->url = $this->protocol . '://'
+                   . $this->user . (!empty($this->pass) ? ':' : '')
+                   . $this->pass . (!empty($this->user) ? '@' : '')
+                   . $this->host . ($this->port == $this->getStandardPort($this->protocol) ? '' : ':' . $this->port)
+                   . $this->path
+                   . (!empty($querystring) ? '?' . $querystring : '')
+                   . (!empty($this->anchor) ? '#' . $this->anchor : '');
+
+        return $this->url;
+    }
+
+    /**
+    * Adds a querystring item
+    *
+    * @param  string $name       Name of item
+    * @param  string $value      Value of item
+    * @param  bool   $preencoded Whether value is urlencoded or not, default = not
+    * @access public
+    */
+    function addQueryString($name, $value, $preencoded = false)
+    {
+        if ($preencoded) {
+            $this->querystring[$name] = $value;
+        } else {
+            $this->querystring[$name] = is_array($value) ? array_map('rawurlencode', $value): rawurlencode($value);
+        }
+    }
+
+    /**
+    * Removes a querystring item
+    *
+    * @param  string $name Name of item
+    * @access public
+    */
+    function removeQueryString($name)
+    {
+        if (isset($this->querystring[$name])) {
+            unset($this->querystring[$name]);
+        }
+    }
+
+    /**
+    * Sets the querystring to literally what you supply
+    *
+    * @param  string $querystring The querystring data. Should be of the format foo=bar&x=y etc
+    * @access public
+    */
+    function addRawQueryString($querystring)
+    {
+        $this->querystring = $this->_parseRawQueryString($querystring);
+    }
+
+    /**
+    * Returns flat querystring
+    *
+    * @return string Querystring
+    * @access public
+    */
+    function getQueryString()
+    {
+        if (!empty($this->querystring)) {
+            foreach ($this->querystring as $name => $value) {
+                if (is_array($value)) {
+                    foreach ($value as $k => $v) {
+                        $querystring[] = $this->useBrackets ? sprintf('%s[%s]=%s', $name, $k, $v) : ($name . '=' . $v);
+                    }
+                } elseif (!is_null($value)) {
+                    $querystring[] = $name . '=' . $value;
+                } else {
+                    $querystring[] = $name;
+                }
+            }
+            $querystring = implode(ini_get('arg_separator.output'), $querystring);
+        } else {
+            $querystring = '';
+        }
+
+        return $querystring;
+    }
+
+    /**
+    * Parses raw querystring and returns an array of it
+    *
+    * @param  string  $querystring The querystring to parse
+    * @return array                An array of the querystring data
+    * @access private
+    */
+    function _parseRawQuerystring($querystring)
+    {
+        $parts  = preg_split('/[' . preg_quote(ini_get('arg_separator.input'), '/') . ']/', $querystring, -1, PREG_SPLIT_NO_EMPTY);
+        $return = array();
+
+        foreach ($parts as $part) {
+            if (strpos($part, '=') !== false) {
+                $value = substr($part, strpos($part, '=') + 1);
+                $key   = substr($part, 0, strpos($part, '='));
+            } else {
+                $value = null;
+                $key   = $part;
+            }
+            if (substr($key, -2) == '[]') {
+                $key = substr($key, 0, -2);
+                if (@!is_array($return[$key])) {
+                    $return[$key]   = array();
+                    $return[$key][] = $value;
+                } else {
+                    $return[$key][] = $value;
+                }
+            } elseif (!$this->useBrackets AND !empty($return[$key])) {
+                $return[$key]   = (array)$return[$key];
+                $return[$key][] = $value;
+            } else {
+                $return[$key] = $value;
+            }
+        }
+
+        return $return;
+    }
+
+    /**
+    * Resolves //, ../ and ./ from a path and returns
+    * the result. Eg:
+    *
+    * /foo/bar/../boo.php    => /foo/boo.php
+    * /foo/bar/../../boo.php => /boo.php
+    * /foo/bar/.././/boo.php => /foo/boo.php
+    *
+    * This method can also be called statically.
+    *
+    * @param  string $url URL path to resolve
+    * @return string      The result
+    */
+    function resolvePath($path)
+    {
+        $path = explode('/', str_replace('//', '/', $path));
+
+        for ($i=0; $i<count($path); $i++) {
+            if ($path[$i] == '.') {
+                unset($path[$i]);
+                $path = array_values($path);
+                $i--;
+
+            } elseif ($path[$i] == '..' AND ($i > 1 OR ($i == 1 AND $path[0] != '') ) ) {
+                unset($path[$i]);
+                unset($path[$i-1]);
+                $path = array_values($path);
+                $i -= 2;
+
+            } elseif ($path[$i] == '..' AND $i == 1 AND $path[0] == '') {
+                unset($path[$i]);
+                $path = array_values($path);
+                $i--;
+
+            } else {
+                continue;
+            }
+        }
+
+        return implode('/', $path);
+    }
+
+    /**
+    * Returns the standard port number for a protocol
+    *
+    * @param  string  $scheme The protocol to lookup
+    * @return integer         Port number or NULL if no scheme matches
+    *
+    * @author Philippe Jausions <Philippe.Jausions at 11abacus.com>
+    */
+    function getStandardPort($scheme)
+    {
+        switch (strtolower($scheme)) {
+            case 'http':    return 80;
+            case 'https':   return 443;
+            case 'ftp':     return 21;
+            case 'imap':    return 143;
+            case 'imaps':   return 993;
+            case 'pop3':    return 110;
+            case 'pop3s':   return 995;
+            default:        return null;
+       }
+    }
+
+    /**
+    * Forces the URL to a particular protocol
+    *
+    * @param string  $protocol Protocol to force the URL to
+    * @param integer $port     Optional port (standard port is used by default)
+    */
+    function setProtocol($protocol, $port = null)
+    {
+        $this->protocol = $protocol;
+        $this->port = is_null($port) ? $this->getStandardPort() : $port;
+    }
+
+}
+?>

Added: trunk/examples/basecamp_api/proxy/php/proxy.php
===================================================================
--- trunk/examples/basecamp_api/proxy/php/proxy.php	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/proxy/php/proxy.php	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,47 @@
+<?php
+	
+	$login    = "freja";
+	$password = "apitest";
+	$baseUrl  = "http://freja.projectpath.com/";
+	
+	$HTTPMethod     = $_GET['HTTP_REQUEST_METHOD'];
+	$HTTPRequestUrl = $_GET['HTTP_REQUEST_URL'];
+	
+	include('Request.php');
+
+	// safety check, only request legit url
+	if(strpos($HTTPRequestUrl,$baseUrl)===0) {
+
+		$req = &new HTTP_Request($HTTPRequestUrl);
+		$req->setBasicAuth($login,$password);
+		$req->setMethod($HTTPMethod);	
+		$req->addHeader('Content-Type','application/xml');
+		$req->addHeader('Accept','application/xml');
+		$req->clearPostData();		
+		// $req->addPostData('Foo', 'bar');
+		$req->sendRequest();
+		
+		$response = $req->getResponseBody();
+		$code     = $req->getResponseCode();
+		
+		switch($code) {
+			case 200:
+				header("HTTP/1.0 200 Ok");
+				break;
+			case 201:
+				header("HTTP/1.0 201 Created");
+				break;
+			case 404:
+				header("HTTP/1.0 404 Not Found");
+				break;				
+		}
+		header('Content-Type: text/xml');
+		echo $response;
+	} 
+	else {
+		header("HTTP/1.0 403 Forbidden");
+		echo "Requested url not allowed.";
+	}
+
+
+?>
\ No newline at end of file

Added: trunk/examples/basecamp_api/views/project.xsl
===================================================================
--- trunk/examples/basecamp_api/views/project.xsl	2006-04-17 20:47:15 UTC (rev 48)
+++ trunk/examples/basecamp_api/views/project.xsl	2006-04-18 21:34:47 UTC (rev 49)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+<xsl:template match="projects">	
+	<xsl:apply-templates />
+</xsl:template>
+
+<xsl:template match="project">	
+	<form method="post" action="#" id="project__{id}">
+		<label for="projectname" class="preField">Project Name: </label>
+		<input type="text" name="//project[id={id}]/name" value="{name}" /><br/>
+		
+		<label for="projectstatus" class="preField">Project Status: </label>
+		<select name="//project[id={id}]/status">
+			<option value='active'>
+				<xsl:if test="status='active'">
+					<xsl:attribute name='selected'>selected</xsl:attribute>
+				</xsl:if>
+				active
+			</option>
+			<option value='inactive'>
+				<xsl:if test="status='inactive'">
+					<xsl:attribute name='selected'>selected</xsl:attribute>
+				</xsl:if>
+				inactive
+			</option>
+		</select><br/>
+		<p>
+			<input type="button" value="cancel" />
+			<input type="submit" value="ok" />
+		</p>
+	</form>
+</xsl:template>
+
+<xsl:template match="text()" />
+</xsl:stylesheet>
\ No newline at end of file



From troelskn at berlios.de  Tue Apr 18 23:55:27 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Tue, 18 Apr 2006 23:55:27 +0200
Subject: [Freja-svn] r50 - trunk/examples/basecamp_api/proxy/php
Message-ID: <200604182155.k3ILtRF5013919@sheep.berlios.de>

Author: troelskn
Date: 2006-04-18 23:55:26 +0200 (Tue, 18 Apr 2006)
New Revision: 50

Modified:
   trunk/examples/basecamp_api/proxy/php/proxy.php
Log:
nitpicking

Modified: trunk/examples/basecamp_api/proxy/php/proxy.php
===================================================================
--- trunk/examples/basecamp_api/proxy/php/proxy.php	2006-04-18 21:34:47 UTC (rev 49)
+++ trunk/examples/basecamp_api/proxy/php/proxy.php	2006-04-18 21:55:26 UTC (rev 50)
@@ -1,12 +1,12 @@
 <?php
-	
+
 	$login    = "freja";
 	$password = "apitest";
 	$baseUrl  = "http://freja.projectpath.com/";
-	
+
 	$HTTPMethod     = $_GET['HTTP_REQUEST_METHOD'];
 	$HTTPRequestUrl = $_GET['HTTP_REQUEST_URL'];
-	
+
 	include('Request.php');
 
 	// safety check, only request legit url
@@ -14,16 +14,16 @@
 
 		$req = &new HTTP_Request($HTTPRequestUrl);
 		$req->setBasicAuth($login,$password);
-		$req->setMethod($HTTPMethod);	
+		$req->setMethod($HTTPMethod);
 		$req->addHeader('Content-Type','application/xml');
 		$req->addHeader('Accept','application/xml');
-		$req->clearPostData();		
+		$req->clearPostData();
 		// $req->addPostData('Foo', 'bar');
 		$req->sendRequest();
-		
+
 		$response = $req->getResponseBody();
 		$code     = $req->getResponseCode();
-		
+
 		switch($code) {
 			case 200:
 				header("HTTP/1.0 200 Ok");
@@ -33,11 +33,14 @@
 				break;
 			case 404:
 				header("HTTP/1.0 404 Not Found");
-				break;				
+				exit;
+			defaul:
+				header("HTTP/1.0 502 Bad Gateway");
+				exit;
 		}
 		header('Content-Type: text/xml');
 		echo $response;
-	} 
+	}
 	else {
 		header("HTTP/1.0 403 Forbidden");
 		echo "Requested url not allowed.";



From cedsav at berlios.de  Wed Apr 19 23:50:45 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Wed, 19 Apr 2006 23:50:45 +0200
Subject: [Freja-svn] r51 - in trunk/examples/basecamp_api: . css models proxy/php views
Message-ID: <200604192150.k3JLoj5A011524@sheep.berlios.de>

Author: cedsav
Date: 2006-04-19 23:50:27 +0200 (Wed, 19 Apr 2006)
New Revision: 51

Added:
   trunk/examples/basecamp_api/css/
   trunk/examples/basecamp_api/css/main.css
   trunk/examples/basecamp_api/models/milestones.xml
   trunk/examples/basecamp_api/models/posts.xml
   trunk/examples/basecamp_api/models/projects.xml
   trunk/examples/basecamp_api/models/todos.xml
   trunk/examples/basecamp_api/views/message_list.xsl
   trunk/examples/basecamp_api/views/milestone_list.xsl
   trunk/examples/basecamp_api/views/project_selector.xsl
   trunk/examples/basecamp_api/views/projects.xsl
   trunk/examples/basecamp_api/views/todo_list.xsl
Modified:
   trunk/examples/basecamp_api/basecamp.js
   trunk/examples/basecamp_api/index.html
   trunk/examples/basecamp_api/models/
   trunk/examples/basecamp_api/proxy/php/
   trunk/examples/basecamp_api/proxy/php/proxy.php
   trunk/examples/basecamp_api/views/
   trunk/examples/basecamp_api/views/project.xsl
Log:


Modified: trunk/examples/basecamp_api/basecamp.js
===================================================================
--- trunk/examples/basecamp_api/basecamp.js	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/basecamp.js	2006-04-19 21:50:27 UTC (rev 51)
@@ -1,2 +1,191 @@
 
+	// See http://www.basecamphq.com/api/
 
+	// Error Handler
+	window.onerror = errorHandler;
+	
+	// RESOURCES
+	// ---------------------------------------------------------------------------------------------
+	// Constants
+	var BASECAMP_URL = "http://freja.projectpath.com";	
+
+	// 3rd party libraries.
+	var helpers = new wHELPERS();	// misc. javascript functions
+
+	// Views
+	var project_view = getView("views/project.xsl");
+	var projectSelector_view = getView("views/project_selector.xsl");	
+	var todoList_view = getView("views/todo_list.xsl");
+	var messageList_view = getView("views/message_list.xsl");
+	var milestoneList_view = getView("views/milestone_list.xsl");
+	
+	// Models
+	var projects = getModel("models/projects.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/project/list")));	
+	var todos = null; 	   
+	var messages = null;   
+	var milestones = null; 
+
+	// Project Dependent Assets	
+	function loadProjectAssets(projectId) {	
+		
+		if(!projectId) 
+			var projectId = projects.get("//project[status='active']/id");				
+		
+		todos = getModel("models/todos.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/todos/lists"));							
+		Freja._aux.connect(todos, 'onload', function() { dispatch('showToDoList'); });	
+		
+		messages = getModel("models/posts.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/msg/archive"));
+		Freja._aux.connect(messages, 'onload', function() { dispatch('showMessageList'); });	
+		
+		milestones = getModel("models/milestones.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/milestones/list"));
+		Freja._aux.connect(milestones, 'onload', function() { dispatch('showMilestoneList'); });	
+	}
+	Freja._aux.connect(projects, 'onload', function(){loadProjectAssets()});
+	
+	
+	// ---------------------------------------------------------------------------------------------
+	// VIEW BEHAVIORS
+	// ---------------------------------------------------------------------------------------------
+	
+	function addProjectSelectorBehaviors() {
+		//showModelSnapshot(projects);
+		var select = document.getElementById('currentProjectSelector');
+		select.onchange = function(e) {
+			var projectId = select.options[select.selectedIndex].value;
+			loadProjectAssets(projectId);
+		}
+	}	
+	Freja._aux.connect(projectSelector_view, 'onrendercomplete', addProjectSelectorBehaviors);
+
+	function addToDoListBehaviors() {
+		//showModelSnapshot(todos);
+		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
+		for (var i=0;i<el.length;i++) {
+			if (helpers.hasClass(el[i], "editToDoListLink")) {
+				el[i].onclick = function() {
+					dispatch('editToDoList', {toDoListId : extractId(this.id) });
+				}		
+			}			
+		} 
+	}
+	Freja._aux.connect(todoList_view, 'onrendercomplete', addToDoListBehaviors);
+
+	function addMessageListBehaviors() {
+		//showModelSnapshot(messages);
+		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
+		for (var i=0;i<el.length;i++) {
+			if (helpers.hasClass(el[i], "editMessageLink")) {
+				el[i].onclick = function() {
+					dispatch('editMessage', {messageId : extractId(this.id) });
+				}		
+			}			
+		} 
+	}
+	Freja._aux.connect(messageList_view, 'onrendercomplete', addMessageListBehaviors);
+	
+
+	function addMilestoneListBehaviors() {
+		//showModelSnapshot(milestones);
+		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
+		for (var i=0;i<el.length;i++) {
+			if (helpers.hasClass(el[i], "editMilestoneLink")) {
+				el[i].onclick = function() {
+					dispatch('editMilestone', {milestoneId : extractId(this.id) });
+				}		
+			}			
+		} 
+	}
+	Freja._aux.connect(milestoneList_view, 'onrendercomplete', addMilestoneListBehaviors);
+	
+	// ---------------------------------------------------------------------------------------------
+	// DISPATCHER
+	// ---------------------------------------------------------------------------------------------
+	
+	function dispatch(action, params) {
+		
+		switch (action) {
+			default:	
+				// init												
+				dispatch('showProjectSelector');				
+				break;
+			case 'showProjectSelector':	
+				projectSelector_view.render(projects, 'placeholder_projectSelector');				
+				break;
+			case 'showToDoList':					
+				todoList_view.render(todos, 'placeholder_main');				
+				break;
+			case 'showMessageList':
+				messageList_view.render(messages, 'placeholder_main');				
+				break;	
+			case 'showMilestoneList':
+				milestoneList_view.render(milestones, 'placeholder_main');				
+				break;				
+			case 'editProject':
+				project_view.render(projects, 'placeholder_main', params);				
+				break;
+			case 'editCompany':
+				company_view.render(company, 'placeholder_main', params);				
+				break;
+				
+		}
+	}
+	
+	// ---------------------------------------------------------------------------------------------
+	// MISC.
+	// ---------------------------------------------------------------------------------------------
+	function extractId(obj) {
+		// format: 'anystring__id'. Returns the part after the '-'.
+		//         or [event object]
+		// used to encode a Model element id in a unique html id.
+		
+		if(!obj) obj = window.event;
+		
+		switch(typeof obj) {
+			case 'string':
+				id = obj;
+				break;
+			case 'object':
+				if(!obj.id) 
+					obj = helpers.getSourceElement(obj);
+				id = obj.id;					
+				break;
+			case 'undefined':
+				return null;
+				break;
+			default:
+				alert('extractId, unhandled object type: ' + typeof obj);
+				return null;
+				break;
+		}				
+		id = id.substr(id.lastIndexOf('__')+2);
+		return id;
+	}
+	
+	function addProxyToUrl(resourceUrl) {
+		return "proxy/php/proxy.php?url="+encodeURIComponent(BASECAMP_URL+resourceUrl);	
+	}
+	// ---------------------------------------------------------------------------------------------
+	// debug misc.
+	// ---------------------------------------------------------------------------------------------
+	function showModelSnapshot(model) {
+		var xml = Freja._aux.serializeXML(model.document);
+		var dbg = document.getElementById('placeholder_debug');
+		dbg.innerHTML = "<textarea cols='60' rows='15'>"+xml+"</textarea>";		
+		dbg.style.display = "block";
+	}
+
+	// ---------------------------------------------------------------------------------------------
+	// errorHandler
+	// ---------------------------------------------------------------------------------------------
+	function errorHandler(desc,page,line,chr)  {
+		 alert(
+			  'Sorry, a JavaScript error occurred! \n'
+			 +'\nError description: \t'+desc
+			 +'\nPage address:      \t'+page
+			 +'\nLine number:       \t'+line
+		 )
+		 return true
+	}
+	
+	// let's go!
+	window.onload = dispatch;
\ No newline at end of file


Property changes on: trunk/examples/basecamp_api/css
___________________________________________________________________
Name: svn:ignore
   + _notes


Added: trunk/examples/basecamp_api/css/main.css
===================================================================
--- trunk/examples/basecamp_api/css/main.css	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/css/main.css	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,11 @@
+
+body {
+	margin: 0;
+	padding: 0;
+}
+#placeholder_debug {
+	border-top: 1px solid #000;
+	background-color: #555;
+	display: none;
+}
+

Modified: trunk/examples/basecamp_api/index.html
===================================================================
--- trunk/examples/basecamp_api/index.html	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/index.html	2006-04-19 21:50:27 UTC (rev 51)
@@ -13,6 +13,6 @@
 </head>
 
 <body>
-<div id="content"><span style="color:white;background:firebrick">Loading ...</span></div>
+<div id="placeholder_projectList"></div>
 </body>
 </html>


Property changes on: trunk/examples/basecamp_api/models
___________________________________________________________________
Name: svn:ignore
   + _notes


Added: trunk/examples/basecamp_api/models/milestones.xml
===================================================================
--- trunk/examples/basecamp_api/models/milestones.xml	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/models/milestones.xml	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<milestones>
+  <milestone>
+    <wants-notification type="boolean">false</wants-notification>
+    <created-on type="datetime">2006-04-18T20:53:56Z</created-on>
+    <completed type="boolean">false</completed>
+    <project-id type="integer">427919</project-id>
+    <title>Release v2.0</title>
+    <creator-id type="integer">605851</creator-id>
+    <id type="integer">1203942</id>
+    <deadline type="date">2006-05-01</deadline>
+    <responsible-party-id type="integer">605851</responsible-party-id>
+    <responsible-party-type>Person</responsible-party-type>
+  </milestone>
+</milestones>
\ No newline at end of file

Added: trunk/examples/basecamp_api/models/posts.xml
===================================================================
--- trunk/examples/basecamp_api/models/posts.xml	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/models/posts.xml	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- THIS IS A SNAPSHOT OF LIVE DATA FROM BASECAMP. USED DURING DEVELOPMENT ONLY -->
+<posts>
+  <post>
+    <title>This is a message</title>
+    <attachments-count type="integer">0</attachments-count>
+    <id type="integer">2194956</id>
+    <category>
+      <name>Assets</name>
+      <id type="integer">4007205</id>
+    </category>
+    <posted-on type="datetime">2006-04-18T20:52:59Z</posted-on>
+  </post>
+</posts>
\ No newline at end of file

Added: trunk/examples/basecamp_api/models/projects.xml
===================================================================
--- trunk/examples/basecamp_api/models/projects.xml	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/models/projects.xml	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- THIS IS A SNAPSHOT OF LIVE DATA FROM BASECAMP. USED DURING DEVELOPMENT ONLY -->
+<projects>
+  <project>
+    <status>active</status>
+    <name>Freja v2,0 Example</name>
+    <created-on type="date">2006-04-18</created-on>
+    <announcement/>
+    <company>
+      <name>freja</name>
+      <id type="integer">285940</id>
+    </company>
+    <start-page>log</start-page>
+    <last-changed-on type="datetime">2006-04-18T20:53:56Z</last-changed-on>
+    <show-announcement type="boolean">false</show-announcement>
+    <id type="integer">427919</id>
+    <show-writeboards type="boolean">false</show-writeboards>
+  </project>
+</projects>
\ No newline at end of file

Added: trunk/examples/basecamp_api/models/todos.xml
===================================================================
--- trunk/examples/basecamp_api/models/todos.xml	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/models/todos.xml	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- THIS IS A SNAPSHOT OF LIVE DATA FROM BASECAMP. USED DURING DEVELOPMENT ONLY -->
+<todo-lists>
+  <todo-list>
+    <name>list for urgent things to do</name>
+    <project-id type="integer">427919</project-id>
+    <private type="boolean">false</private>
+    <id type="integer">763869</id>
+    <description/>
+    <position type="integer">1</position>
+    <milestone-id type="integer">0</milestone-id>
+  </todo-list>
+</todo-lists>
\ No newline at end of file


Property changes on: trunk/examples/basecamp_api/proxy/php
___________________________________________________________________
Name: svn:ignore
   + _notes


Modified: trunk/examples/basecamp_api/proxy/php/proxy.php
===================================================================
--- trunk/examples/basecamp_api/proxy/php/proxy.php	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/proxy/php/proxy.php	2006-04-19 21:50:27 UTC (rev 51)
@@ -4,9 +4,11 @@
 	$password = "apitest";
 	$baseUrl  = "http://freja.projectpath.com/";
 
-	$HTTPMethod     = $_GET['HTTP_REQUEST_METHOD'];
-	$HTTPRequestUrl = $_GET['HTTP_REQUEST_URL'];
+	$HTTPMethod     = $_SERVER['REQUEST_METHOD'];
+	$HTTPRequestUrl = urldecode($_GET['url']);
+	
 
+	
 	include('Request.php');
 
 	// safety check, only request legit url
@@ -33,10 +35,10 @@
 				break;
 			case 404:
 				header("HTTP/1.0 404 Not Found");
-				exit;
-			defaul:
+				die(" 404 Not Found");				
+			default:
 				header("HTTP/1.0 502 Bad Gateway");
-				exit;
+				die("Bad Gateway");
 		}
 		header('Content-Type: text/xml');
 		echo $response;


Property changes on: trunk/examples/basecamp_api/views
___________________________________________________________________
Name: svn:ignore
   + _notes


Added: trunk/examples/basecamp_api/views/message_list.xsl
===================================================================
--- trunk/examples/basecamp_api/views/message_list.xsl	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/views/message_list.xsl	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+<xsl:template match="/posts">	
+	<ul>
+		<xsl:apply-templates />
+	</ul>
+</xsl:template>
+
+<xsl:template match="post">	
+	<li>
+		<a href='#' id='post_{id}' class='editPostLink'><xsl:value-of select="title"/></a>
+		&#160; <xsl:value-of select="category/name"/>
+		<xsl:apply-templates />
+	</li>
+</xsl:template>
+
+<xsl:template match="text()" />
+</xsl:stylesheet>
\ No newline at end of file

Added: trunk/examples/basecamp_api/views/milestone_list.xsl
===================================================================
--- trunk/examples/basecamp_api/views/milestone_list.xsl	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/views/milestone_list.xsl	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+<xsl:template match="/milestones">	
+	<ul>
+		<xsl:apply-templates />
+	</ul>
+</xsl:template>
+
+<xsl:template match="milestone">	
+	<li>
+		<a href='#' id='milestone_{id}' class='editDeadlineLink'><xsl:value-of select="title"/></a>
+		&#160; <xsl:value-of select="deadline"/>
+		<xsl:apply-templates />
+	</li>
+</xsl:template>
+
+<xsl:template match="text()" />
+</xsl:stylesheet>
\ No newline at end of file

Modified: trunk/examples/basecamp_api/views/project.xsl
===================================================================
--- trunk/examples/basecamp_api/views/project.xsl	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/views/project.xsl	2006-04-19 21:50:27 UTC (rev 51)
@@ -19,12 +19,18 @@
 				</xsl:if>
 				active
 			</option>
-			<option value='inactive'>
-				<xsl:if test="status='inactive'">
+			<option value='on-hold'>
+				<xsl:if test="status='on-hold'">
 					<xsl:attribute name='selected'>selected</xsl:attribute>
 				</xsl:if>
-				inactive
+				on-hold
 			</option>
+			<option value='archived'>
+				<xsl:if test="status='archived'">
+					<xsl:attribute name='selected'>selected</xsl:attribute>
+				</xsl:if>
+				archived
+			</option>			
 		</select><br/>
 		<p>
 			<input type="button" value="cancel" />

Added: trunk/examples/basecamp_api/views/project_selector.xsl
===================================================================
--- trunk/examples/basecamp_api/views/project_selector.xsl	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/views/project_selector.xsl	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+<xsl:template match="projects">	
+	<label for="currentProjectSelector" class="preField" >Current Project: </label>
+	<select id="currentProjectSelector">		
+		<xsl:apply-templates />
+	</select>
+</xsl:template>
+
+<xsl:template match="project">	
+	<option value="{id}">
+		<xsl:value-of select="name"/>
+	</option>
+</xsl:template>
+
+<xsl:template match="text()" />
+</xsl:stylesheet>
\ No newline at end of file

Added: trunk/examples/basecamp_api/views/projects.xsl
===================================================================
--- trunk/examples/basecamp_api/views/projects.xsl	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/views/projects.xsl	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+<xsl:template match="projects">	
+	<xsl:apply-templates />
+</xsl:template>
+
+<xsl:template match="project">	
+	<form method="post" action="#" id="project__{id}">
+		<label for="projectname" class="preField">Project Name: </label>
+		<input type="text" name="//project[id={id}]/name" value="{name}" /><br/>
+		
+		<label for="projectstatus" class="preField">Project Status: </label>
+		<select name="//project[id={id}]/status">
+			<option value='active'>
+				<xsl:if test="status='active'">
+					<xsl:attribute name='selected'>selected</xsl:attribute>
+				</xsl:if>
+				active
+			</option>
+			<option value='inactive'>
+				<xsl:if test="status='inactive'">
+					<xsl:attribute name='selected'>selected</xsl:attribute>
+				</xsl:if>
+				inactive
+			</option>
+		</select><br/>
+		<p>
+			<input type="button" value="cancel" />
+			<input type="submit" value="ok" />
+		</p>
+	</form>
+</xsl:template>
+
+<xsl:template match="text()" />
+</xsl:stylesheet>
\ No newline at end of file

Added: trunk/examples/basecamp_api/views/todo_list.xsl
===================================================================
--- trunk/examples/basecamp_api/views/todo_list.xsl	2006-04-18 21:55:26 UTC (rev 50)
+++ trunk/examples/basecamp_api/views/todo_list.xsl	2006-04-19 21:50:27 UTC (rev 51)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+
+<xsl:template match="/todo-lists">	
+	<ul>
+		<xsl:apply-templates />
+	</ul>
+</xsl:template>
+
+<xsl:template match="todo-list">	
+	<li>
+		<a href='#' id='todolist_{id}' class='editToDoListLink'><xsl:value-of select="name"/></a>
+		<xsl:apply-templates />
+	</li>
+</xsl:template>
+
+<xsl:template match="text()" />
+</xsl:stylesheet>
\ No newline at end of file



From cedsav at berlios.de  Thu Apr 20 20:49:39 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Thu, 20 Apr 2006 20:49:39 +0200
Subject: [Freja-svn] r52 - in trunk: examples/contacts examples/contacts/views examples/tutorial examples/tutorial/views src src/auxiliary
Message-ID: <200604201849.k3KIndrd023148@sheep.berlios.de>

Author: cedsav
Date: 2006-04-20 20:49:15 +0200 (Thu, 20 Apr 2006)
New Revision: 52

Modified:
   trunk/examples/contacts/client.js
   trunk/examples/contacts/views/create.xsl
   trunk/examples/contacts/views/edit.xsl
   trunk/examples/contacts/views/index.xsl
   trunk/examples/tutorial/example.js
   trunk/examples/tutorial/example2.js
   trunk/examples/tutorial/views/display.xsl
   trunk/examples/tutorial/views/edit.xsl
   trunk/src/AssetManager.js
   trunk/src/View.js
   trunk/src/auxiliary/minimal.js
Log:
behavior handler now work on the class attribute

Modified: trunk/examples/contacts/client.js
===================================================================
--- trunk/examples/contacts/client.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/contacts/client.js	2006-04-20 18:49:15 UTC (rev 52)
@@ -5,12 +5,12 @@
 // view : index
 var index = getView("views/index.xsl");
 index.placeholder = "content";
-index.behaviours["edit"] = {
+index.behaviors["edit"] = {
 	onclick : function(node) {
 		edit.render(getModel(node.getAttribute('url')));
 	}
 };
-index.behaviours["delete"] = {
+index.behaviors["delete"] = {
 	onclick : function(node) {
 		if (!confirm("Really delete it?")) {
 			return;
@@ -24,7 +24,7 @@
 		});
 	}
 };
-index.behaviours["create"] = {
+index.behaviors["create"] = {
 	onclick : function(node) {
 		create.render();
 	}
@@ -33,7 +33,7 @@
 // view : create
 var create = getView("views/create.xsl");
 create.placeholder = "content";
-create.behaviours["form"] = {
+create.behaviors["form"] = {
 	onsubmit : function(node) {
 		var d = contacts.create(getView("views/create.xsl").getValues());
 		d.addCallback(function() {
@@ -44,7 +44,7 @@
 		index.render(contacts.select());
 	}
 };
-create.behaviours["cancel"] = {
+create.behaviors["cancel"] = {
 	onclick : function() {
 		index.render(contacts.select());
 	}
@@ -53,7 +53,7 @@
 // view : edit
 var edit = getView("views/edit.xsl");
 edit.placeholder = "content";
-edit.behaviours["form"] = {
+edit.behaviors["form"] = {
 	onsubmit : function(node) {
 		try {
 			var model = getModel(node.getAttribute('url'));
@@ -70,7 +70,7 @@
 		}
 	}
 };
-edit.behaviours["cancel"] = {
+edit.behaviors["cancel"] = {
 	onclick : function() {
 		index.render(contacts.select());
 	}

Modified: trunk/examples/contacts/views/create.xsl
===================================================================
--- trunk/examples/contacts/views/create.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/contacts/views/create.xsl	2006-04-20 18:49:15 UTC (rev 52)
@@ -8,7 +8,7 @@
 		<p>first_name:<input name="first_name" type="text" value="" /></p>
 		<p>surname:<input name="surname" type="text" value="" /></p>
 		<p>
-			<input type="button" value="cancel" freja-behaviour="cancel" />
+			<input type="button" value="cancel" class="cancel" />
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/examples/contacts/views/edit.xsl
===================================================================
--- trunk/examples/contacts/views/edit.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/contacts/views/edit.xsl	2006-04-20 18:49:15 UTC (rev 52)
@@ -3,13 +3,13 @@
 	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="record">	
-	<form method="post" action="#" freja-behaviour="form">
+	<form method="post" action="#" class="form">
 	<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 		<p><xsl:value-of select="email" /></p>
 		<p><input name="record/first_name" type="text" value="{first_name}" /></p>
 		<p><input name="record/surname" type="text" value="{surname}" /></p>
 		<p>
-			<input type="button" value="cancel" freja-behaviour="cancel" />
+			<input type="button" value="cancel" class="cancel" />
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/examples/contacts/views/index.xsl
===================================================================
--- trunk/examples/contacts/views/index.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/contacts/views/index.xsl	2006-04-20 18:49:15 UTC (rev 52)
@@ -8,10 +8,10 @@
 	<tr>
 		<td><xsl:value-of select="email" /></td>
 		<td>
-			<input type="button" value="edit" freja-behaviour="edit">
+			<input type="button" value="edit" class="edit">
 				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
-			<input type="button" value="delete" freja-behaviour="delete">
+			<input type="button" value="delete" class="delete">
 				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
 		</td>

Modified: trunk/examples/tutorial/example.js
===================================================================
--- trunk/examples/tutorial/example.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/tutorial/example.js	2006-04-20 18:49:15 UTC (rev 52)
@@ -2,16 +2,16 @@
 
 var display = getView("views/display.xsl");
 display.placeholder = 'content';
-display.behaviours["editLink"] = {
+display.behaviors["editLink"] = {
 	onclick : function() { dispatch('edit'); }
 };
 
 var edit = getView("views/edit.xsl");
 edit.placeholder = 'content';
-edit.behaviours["editForm"] = {
+edit.behaviors["editForm"] = {
 	onsubmit : function() { dispatch('update'); }
 };
-edit.behaviours["displayLink"] = {
+edit.behaviors["displayLink"] = {
 	onclick : function() { dispatch('display'); }
 };
 

Modified: trunk/examples/tutorial/example2.js
===================================================================
--- trunk/examples/tutorial/example2.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/tutorial/example2.js	2006-04-20 18:49:15 UTC (rev 52)
@@ -2,7 +2,7 @@
 
 var display = getView("views/display.xsl");
 display.placeholder = "content";
-display.behaviours["editLink"] = {
+display.behaviors["editLink"] = {
 	onclick : function() {
 		edit.render(data);
 	}
@@ -10,7 +10,7 @@
 
 var edit = getView("views/edit.xsl");
 edit.placeholder = "content";
-edit.behaviours["editForm"] = {
+edit.behaviors["editForm"] = {
 	onsubmit : function() {
 		try {
 			data.updateFrom(edit);
@@ -20,7 +20,7 @@
 		}
 	}
 };
-edit.behaviours["displayLink"] = {
+edit.behaviors["displayLink"] = {
 	onclick : function() {
 		display.render(data);
 	}

Modified: trunk/examples/tutorial/views/display.xsl
===================================================================
--- trunk/examples/tutorial/views/display.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/tutorial/views/display.xsl	2006-04-20 18:49:15 UTC (rev 52)
@@ -7,7 +7,7 @@
 	<h3><xsl:value-of select="name" /></h3>
 	<p><xsl:value-of select="description" /></p>
 	<p><em>Price: <xsl:value-of select="price" /></em></p>
-	<p><a href="#" freja-behaviour="editLink">edit</a></p>
+	<p><a href="#" class="editLink">edit</a></p>
 </div>
 </xsl:template>
 

Modified: trunk/examples/tutorial/views/edit.xsl
===================================================================
--- trunk/examples/tutorial/views/edit.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/tutorial/views/edit.xsl	2006-04-20 18:49:15 UTC (rev 52)
@@ -8,7 +8,7 @@
 		<p><textarea name="item/description"><xsl:value-of select="description" /></textarea></p>
 		<p><input name="item/price" type="text" value="{price}" /></p>
 		<p>
-			<a href="#" freja-behaviour="displayLink">display</a>
+			<a href="#" class="displayLink">display</a>
 			<input type="submit" value="ok" />
 		</p>
 	</form>

Modified: trunk/src/AssetManager.js
===================================================================
--- trunk/src/AssetManager.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/src/AssetManager.js	2006-04-20 18:49:15 UTC (rev 52)
@@ -177,7 +177,14 @@
   * It ought to be replaced completely with Deferred
   */
 Freja.AssetManager.onerror = function(ex) {
-	alert("Freja.AssetManager.onerror\n" + ex.message);
+	if(ex.message) {
+		alert("Freja.AssetManager.onerror\n" + ex.message);
+	} 
+	// @note: on asynchronous calls, ex refers to the xmlhttpobject
+	// see Bug #7189 (http://developer.berlios.de/bugs/?func=detailbug&group_id=6277&bug_id=7189)
+	else if(ex.status){
+		alert('error '+ ex.status + ' ' +  ex.responseText);
+	}
 };
 /**
   * Global exports

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/src/View.js	2006-04-20 18:49:15 UTC (rev 52)
@@ -7,10 +7,10 @@
 	this.document = null;
 	this._renderer = renderer;
 	this._destination = null;
-	this.behaviours = [];
+	this.behaviors = [];
 	this.placeholder = null;
 	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
-	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehaviour, this));
+	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehavior, this));
 };
 /**
   * @param    model            Freja.Model
@@ -78,11 +78,11 @@
 	return d;
 };
 /**
-  * Decorates the output of the primary renderer, to inject behaviour.
+  * Decorates the output of the primary renderer, to inject behavior.
   * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
-  *       to identify targets for behaviour
+  *       to identify targets for behavior
   */
-Freja.View.prototype._connectBehaviour = function(destination) {
+Freja.View.prototype._connectBehavior = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
 
@@ -101,34 +101,35 @@
 				}, node)
 			);
 		};
-		var applyHandlers = function(node, behaviours) {
-
+		var applyHandlers = function(node, behaviors) {
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("freja-behaviour");
-					if (id != "") {
-						var handler = behaviours[id];
-						if (handler) {
-							for (var eventType in handler) {
-								if (eventType == "init") {
-									handler.init(child);
-								} else {
-									connectCallback(child, eventType, handler[eventType]);
+					if(child.className) {
+						var classNames = child.className.split(' ');						
+						for (var j=0;j<classNames.length;j++) {											
+							var handler = behaviors[classNames[j]];
+							if (handler) {
+								for (var eventType in handler) {
+									if (eventType == "init") {
+										handler.init(child);
+									} else {
+										connectCallback(child, eventType, handler[eventType]);
+									}
 								}
 							}
 						}
 					}
-					applyHandlers(child, behaviours);
+					applyHandlers(child, behaviors);
 				}
 			}
 		};
 
 		// Avoid traversing the DOM tree if there's no handler to process.
-		// @note: is there a better way? this.behaviours.length is always 0.
-		// @note  This is fine. behaviours is a hashmap, not an array.
-		for (var ids in this.behaviours) {
-			applyHandlers(destination, this.behaviours);
+		// @note: is there a better way? this.behaviors.length is always 0.
+		// @note  This is fine. behaviors is a hashmap, not an array.
+		for (var ids in this.behaviors) {
+			applyHandlers(destination, this.behaviors);
 			break;
 		}
 

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/src/auxiliary/minimal.js	2006-04-20 18:49:15 UTC (rev 52)
@@ -402,7 +402,7 @@
 }
 
 if(typeof XSLTProcessor == 'undefined' && typeof ActiveXObject  != 'undefined') {
-alert('ok');
+
     _SARISSA_DOM_PROGID = Freja._aux.pickRecentProgID(["Msxml2.DOMDocument.5.0", "Msxml2.DOMDocument.4.0", "Msxml2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"]);
     _SARISSA_XMLHTTP_PROGID = Freja._aux.pickRecentProgID(["Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"]);
     _SARISSA_THREADEDDOM_PROGID = Freja._aux.pickRecentProgID(["Msxml2.FreeThreadedDOMDocument.5.0", "MSXML2.FreeThreadedDOMDocument.4.0", "MSXML2.FreeThreadedDOMDocument.3.0"]);



From cedsav at berlios.de  Fri Apr 21 22:55:50 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Fri, 21 Apr 2006 22:55:50 +0200
Subject: [Freja-svn] r53 - trunk/examples
Message-ID: <200604212055.k3LKto7l019159@sheep.berlios.de>

Author: cedsav
Date: 2006-04-21 22:55:47 +0200 (Fri, 21 Apr 2006)
New Revision: 53

Removed:
   trunk/examples/basecamp_api/
Log:




From cedsav at berlios.de  Fri Apr 21 22:57:42 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Fri, 21 Apr 2006 22:57:42 +0200
Subject: [Freja-svn] r54 - in trunk/examples: . basecamp_remix2 basecamp_remix2/lib basecamp_remix2/views
Message-ID: <200604212057.k3LKvgbm019277@sheep.berlios.de>

Author: cedsav
Date: 2006-04-21 22:57:37 +0200 (Fri, 21 Apr 2006)
New Revision: 54

Added:
   trunk/examples/basecamp_remix2/
   trunk/examples/basecamp_remix2/lib/
   trunk/examples/basecamp_remix2/lib/helpers.js
Modified:
   trunk/examples/basecamp_remix2/basecamp.js
   trunk/examples/basecamp_remix2/index.html
   trunk/examples/basecamp_remix2/views/message_list.xsl
Log:


Copied: trunk/examples/basecamp_remix2 (from rev 51, trunk/examples/basecamp_api)

Modified: trunk/examples/basecamp_remix2/basecamp.js
===================================================================
--- trunk/examples/basecamp_api/basecamp.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_remix2/basecamp.js	2006-04-21 20:57:37 UTC (rev 54)
@@ -4,25 +4,28 @@
 	// Error Handler
 	window.onerror = errorHandler;
 	
-	// RESOURCES
-	// ---------------------------------------------------------------------------------------------
 	// Constants
 	var BASECAMP_URL = "http://freja.projectpath.com";	
 
 	// 3rd party libraries.
 	var helpers = new wHELPERS();	// misc. javascript functions
 
+	// ---------------------------------------------------------------------------------------------
+	// ASSETS
+	// ---------------------------------------------------------------------------------------------
+
 	// Views
-	var project_view = getView("views/project.xsl");
+	var project_view         = getView("views/project.xsl");
 	var projectSelector_view = getView("views/project_selector.xsl");	
-	var todoList_view = getView("views/todo_list.xsl");
-	var messageList_view = getView("views/message_list.xsl");
-	var milestoneList_view = getView("views/milestone_list.xsl");
+	var todoList_view        = getView("views/todo_list.xsl");
+	var messageList_view     = getView("views/message_list.xsl");
+	var message_view         = getView("views/message.xsl");
+	var milestoneList_view   = getView("views/milestone_list.xsl");
 	
 	// Models
-	var projects = getModel("models/projects.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/project/list")));	
-	var todos = null; 	   
-	var messages = null;   
+	var projects   = getModel("models/projects.xml"); 	// Snapshot. Live data: getModel(addProxyToUrl("/project/list")));	
+	var todos      = null; 	   
+	var messages   = null;   
 	var milestones = null; 
 
 	// Project Dependent Assets	
@@ -31,72 +34,90 @@
 		if(!projectId) 
 			var projectId = projects.get("//project[status='active']/id");				
 		
-		todos = getModel("models/todos.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/todos/lists"));							
-		Freja._aux.connect(todos, 'onload', function() { dispatch('showToDoList'); });	
-		
-		messages = getModel("models/posts.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/msg/archive"));
-		Freja._aux.connect(messages, 'onload', function() { dispatch('showMessageList'); });	
-		
+		todos      = getModel("models/todos.xml"); 		// Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/todos/lists"));									
+		messages   = getModel("models/posts.xml"); 		// Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/msg/archive"));	
 		milestones = getModel("models/milestones.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/milestones/list"));
-		Freja._aux.connect(milestones, 'onload', function() { dispatch('showMilestoneList'); });	
+		dispatch('showMessageList');
 	}
 	Freja._aux.connect(projects, 'onload', function(){loadProjectAssets()});
 	
 	
 	// ---------------------------------------------------------------------------------------------
 	// VIEW BEHAVIORS
-	// ---------------------------------------------------------------------------------------------
+	// ---------------------------------------------------------------------------------------------	
+
+	todoList_view.behaviors["editToDoListLink"] = {
+		onclick : function(node) {
+			dispatch('editToDoList', {toDoListId : extractId(node.id) });
+		}
+	}
 	
-	function addProjectSelectorBehaviors() {
-		//showModelSnapshot(projects);
-		var select = document.getElementById('currentProjectSelector');
-		select.onchange = function(e) {
-			var projectId = select.options[select.selectedIndex].value;
-			loadProjectAssets(projectId);
+	messageList_view.behaviors["editMessageLink"] = {
+		onclick : function(node) {	
+			var id = extractId(node.id);			
+			if(!isMessageLoaded(id)) {
+				loadMessage(id);
+			}		
+			
 		}
-	}	
-	Freja._aux.connect(projectSelector_view, 'onrendercomplete', addProjectSelectorBehaviors);
-
-	function addToDoListBehaviors() {
-		//showModelSnapshot(todos);
-		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
-		for (var i=0;i<el.length;i++) {
-			if (helpers.hasClass(el[i], "editToDoListLink")) {
-				el[i].onclick = function() {
-					dispatch('editToDoList', {toDoListId : extractId(this.id) });
-				}		
-			}			
-		} 
 	}
-	Freja._aux.connect(todoList_view, 'onrendercomplete', addToDoListBehaviors);
-
-	function addMessageListBehaviors() {
-		//showModelSnapshot(messages);
-		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
-		for (var i=0;i<el.length;i++) {
-			if (helpers.hasClass(el[i], "editMessageLink")) {
-				el[i].onclick = function() {
-					dispatch('editMessage', {messageId : extractId(this.id) });
-				}		
-			}			
-		} 
+	
+	milestoneList_view.behaviors["editMilestoneLink"] = {
+		onclick : function(node) {
+			dispatch('editMilestone', {milestoneId : extractId(node.id) });
+		}
 	}
-	Freja._aux.connect(messageList_view, 'onrendercomplete', addMessageListBehaviors);
 	
+	function addMoreBehaviors() {		
+		switch(this.url) {
+			case "views/project_selector.xsl":				
+				var select = document.getElementById('currentProjectSelector');
+				select.onchange = function(e) {
+					var projectId = select.options[select.selectedIndex].value;
+					loadProjectAssets(projectId);
+				}
+				break;
+		}
+	}	
+	Freja._aux.connect(projectSelector_view,'onrendercomplete',Freja._aux.bind(addMoreBehaviors, projectSelector_view));
+	
+	// ---------------------------------------------------------------------------------------------
 
-	function addMilestoneListBehaviors() {
-		//showModelSnapshot(milestones);
-		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
-		for (var i=0;i<el.length;i++) {
-			if (helpers.hasClass(el[i], "editMilestoneLink")) {
-				el[i].onclick = function() {
-					dispatch('editMilestone', {milestoneId : extractId(this.id) });
-				}		
+	// ---------------------------------------------------------------------------------------------
+	function isMessageLoaded(id) {		
+		var post = messages.document.selectSingleNode("//post[id='"+id+"']");
+		if(post) {
+			// message is in our message list, but could be the abbreviated version.
+			if(post.selectSingleNode('extended-body')) 
+				return true;			
+		}
+		return false;
+	}
+	function loadMessage(id) {
+		
+		var newMessage = getModel(addProxyToUrl("/msg/get/"+id));
+		
+		Freja._aux.connect(newMessage,'onload', function() {
+			
+			var node = newMessage.document.documentElement;
+			
+			if(messages.document.importNode) {
+				node = messages.document.importNode(node,true);
+			} // else use cloneNode?
+			
+			// need to destroy newMessage ?
+			
+			var currentNode = messages.document.selectSingleNode("//post[id='"+id+"']");				
+			if(currentNode) {				
+				currentNode.parentNode.insertBefore(node,currentNode);
+				currentNode.parentNode.removeChild(currentNode);
+			} else {		
+				messages.document.documentElement.appendChild(node);				
 			}			
-		} 
+			showModelSnapshot(newMessage);
+			message_view.render(messages, 'placeholder_main', {messageId: id });	
+		});		
 	}
-	Freja._aux.connect(milestoneList_view, 'onrendercomplete', addMilestoneListBehaviors);
-	
 	// ---------------------------------------------------------------------------------------------
 	// DISPATCHER
 	// ---------------------------------------------------------------------------------------------
@@ -120,6 +141,11 @@
 			case 'showMilestoneList':
 				milestoneList_view.render(milestones, 'placeholder_main');				
 				break;				
+			case 'editMessage':
+				
+				//message_view.render(messages, 'placeholder_main', params);				
+				break;
+				
 			case 'editProject':
 				project_view.render(projects, 'placeholder_main', params);				
 				break;
@@ -134,12 +160,11 @@
 	// MISC.
 	// ---------------------------------------------------------------------------------------------
 	function extractId(obj) {
-		// format: 'anystring__id'. Returns the part after the '-'.
-		//         or [event object]
-		// used to encode a Model element id in a unique html id.
+		// parameter: 'anystring__id' or [event object] or [object]
+		// Get the id attribute if necessary and returns the part after the '__'.
+		// Used to encode a Model element id in a unique html id.
 		
-		if(!obj) obj = window.event;
-		
+		if(!obj) obj = window.event;		
 		switch(typeof obj) {
 			case 'string':
 				id = obj;

Modified: trunk/examples/basecamp_remix2/index.html
===================================================================
--- trunk/examples/basecamp_api/index.html	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_remix2/index.html	2006-04-21 20:57:37 UTC (rev 54)
@@ -4,8 +4,13 @@
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <title>BaseCamp Remixed with Freja</title>
 
+<link href="css/main.css" rel="stylesheet" type="text/css" />
+
+<!-- 3rd parties Scripts -->
+<script type="text/javascript" src="lib/helpers.js"></script>
+
 <!-- Freja Framework Script -->
-<script type="text/javascript" src="../../lib/Freja.js"></script>
+<script type="text/javascript" src="../lib/Freja.js"></script>
 
 <!-- Controller Code -->
 <script type="text/javascript" src="basecamp.js"></script>
@@ -13,6 +18,8 @@
 </head>
 
 <body>
-<div id="placeholder_projectList"></div>
+<div id="placeholder_projectSelector"></div>
+<div id="placeholder_main"></div>
+<div id="placeholder_debug"></div>
 </body>
 </html>

Added: trunk/examples/basecamp_remix2/lib/helpers.js
===================================================================
--- trunk/examples/basecamp_api/lib/helpers.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_remix2/lib/helpers.js	2006-04-21 20:57:37 UTC (rev 54)
@@ -0,0 +1,159 @@
+function wHELPERS() {};
+	
+	// addEvent adapated from http://ejohn.org/projects/flexible-javascript-events/
+	// and  Andy Smith's (http://weblogs.asp.net/asmith/archive/2003/10/06/30744.aspx)
+	wHELPERS.prototype.addEvent = function(obj, type, fn) {
+		if(!obj) { return; }
+		
+		if (obj.attachEvent) {
+			obj['e'+type+fn] = fn;
+			obj[type+fn] = function(){obj['e'+type+fn]( window.event );}
+			obj.attachEvent( 'on'+type, obj[type+fn] );
+		} else if(obj.addEventListener) {			
+			obj.addEventListener( type,fn, false );
+		} else {
+			var originalHandler = obj["on" + type]; 
+			if (originalHandler) { 
+			  obj["on" + type] = function(e){originalHandler(e);fn(e);}; 
+			} else { 
+			  obj["on" + type] = fn; 
+			} 
+		}
+	}
+	
+	wHELPERS.prototype.removeEvent = function(obj, type, fn) {
+		if (obj.detachEvent) {
+			if(obj[type+fn]) {
+				obj.detachEvent( 'on'+type, obj[type+fn] );
+				obj[type+fn] = null;
+			}
+		} else if(obj.removeEventListener)
+			obj.removeEventListener( type, fn, false );
+		else {
+			obj["on" + type] = null;
+		}
+	}
+	
+	
+	
+	
+	
+	// Returns the event's source element 
+	wHELPERS.prototype.getSourceElement = function(e) {	
+		if(!e) e = window.event;	
+		if(e.target)
+			var srcE = e.target;
+		else
+			var srcE = e.srcElement;
+		if(!srcE) return null;
+		if(srcE.nodeType == 3) srcE = srcE.parentNode; // safari weirdness		
+		if(srcE.tagName.toUpperCase()=='LABEL' && e.type=='click') { 
+			// when clicking a label, firefox fires the input onclick event
+			// but the label remains the source of the event. In Opera and IE 
+			// the source of the event is the input element. Which is the 
+			// expected behavior, I suppose.		
+			if(srcE.getAttribute('for')) {
+				srcE = document.getElementById(srcE.getAttribute('for'));
+			}
+		}
+		return srcE;
+	}
+	
+	// Cancel the default execution of an event.
+	wHELPERS.prototype.preventEvent = function(e) {
+		if (!e) e = window.event;
+		if (e.preventDefault) e.preventDefault();
+		else e.returnValue = false;
+		return false;
+	}
+	
+	// Cancel the propagation of the event
+	wHELPERS.prototype.stopPropagation = function(e) {
+		if (!e) var e = window.event;
+		e.cancelBubble = true;
+		if (e.stopPropagation) e.stopPropagation();
+	}
+	
+	// Generates a random ID
+	wHELPERS.prototype.randomId = function () {
+		var seed = (new Date()).getTime();
+		seed = seed.toString().substr(6);
+		for (var i=0; i<6;i++)
+			seed += String.fromCharCode(48 + Math.floor((Math.random()*10)));
+		return "id-" + seed;
+	}
+	
+	// Activating an Alternate Stylesheet (thx to: http://www.howtocreate.co.uk/tutorials/index.php?tut=0&part=27)
+	// Use this to activate a CSS Stylesheet that shouldn't be used if javascript is turned off.
+	// The stylesheet rel attribute should be 'alternate stylesheet'. The title attribute MUST be set.
+	wHELPERS.prototype.activateStylesheet = function(sheetref) {
+		if(document.getElementsByTagName) {
+			var ss=document.getElementsByTagName('link');
+		} else if (document.styleSheets) {
+			var ss = document.styleSheets;
+		}
+		for(var i=0;ss[i];i++ ) {
+			if(ss[i].href.indexOf(sheetref) != -1) {
+				ss[i].disabled = true;
+				ss[i].disabled = false;			
+			}
+		}
+	}
+	
+	// hasClass
+	wHELPERS.prototype.hasClass = function(element,className) {
+		if(element && element.className) {
+			if((' ' + element.className + ' ').indexOf(' ' + className +' ') != -1) {
+				return true;
+			}
+		}
+		return false;
+	}
+	wHELPERS.prototype.hasClassPrefix = function(element,className) {
+		if(element && element.className) {
+			if((' ' + element.className).indexOf(' ' + className) != -1) {
+				return true;
+			}
+		}
+		return false;
+	}
+	
+	// getTop / getLeft  
+	// Returns pixel coordinates from the top-left window corner.
+	wHELPERS.prototype.getTop = function(obj) {
+		var cur = 0;
+		if(obj.offsetParent) {		
+			while(obj.offsetParent) {
+				if((new wHELPERS()).getComputedStyle(obj,'position') == 'relative' ) {
+					// relatively postioned element
+					return cur;
+				}
+				cur+=obj.offsetTop;
+				obj = obj.offsetParent;
+			}
+		}
+		return cur;
+	}
+	wHELPERS.prototype.getLeft = function(obj) {
+		var cur = 0;
+		if(obj.offsetParent) {		
+			while(obj.offsetParent) {
+				if((new wHELPERS()).getComputedStyle(obj,'position') == 'relative' ) {
+					// relatively postioned element
+					return cur;
+				}
+				cur+=obj.offsetLeft;
+				obj = obj.offsetParent;
+			}
+		}
+		return cur;
+	}
+ 	
+	wHELPERS.prototype.getComputedStyle = function(element, styleName) {
+		if(window.getComputedStyle) {
+			return window.getComputedStyle(element,"").getPropertyValue(styleName);
+		} else if(element.currentStyle) {	
+			return element.currentStyle[styleName];
+		}
+		return false;
+	}

Modified: trunk/examples/basecamp_remix2/views/message_list.xsl
===================================================================
--- trunk/examples/basecamp_api/views/message_list.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_remix2/views/message_list.xsl	2006-04-21 20:57:37 UTC (rev 54)
@@ -9,9 +9,13 @@
 </xsl:template>
 
 <xsl:template match="post">	
-	<li>
-		<a href='#' id='post_{id}' class='editPostLink'><xsl:value-of select="title"/></a>
-		&#160; <xsl:value-of select="category/name"/>
+	<li><a href='#' id='post__{id}' class='editMessageLink'><xsl:value-of select="title"/></a>
+		<br/>
+		<small>Posted on <xsl:value-of select="posted-on"/> in <xsl:value-of select="category/name"/>
+		<xsl:if test="attachments-count>0">
+			(<xsl:value-of select="attachments-count"/> attachements)
+		</xsl:if>
+		</small>
 		<xsl:apply-templates />
 	</li>
 </xsl:template>



From cedsav at berlios.de  Mon Apr 24 23:53:38 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Mon, 24 Apr 2006 23:53:38 +0200
Subject: [Freja-svn] r55 - in trunk/examples: . basecamp_api basecamp_api/models basecamp_api/views
Message-ID: <200604242153.k3OLrcJe029084@sheep.berlios.de>

Author: cedsav
Date: 2006-04-24 23:53:21 +0200 (Mon, 24 Apr 2006)
New Revision: 55

Added:
   trunk/examples/basecamp_api/
   trunk/examples/basecamp_api/models/new_post.xml
   trunk/examples/basecamp_api/models/new_request.xml
   trunk/examples/basecamp_api/views/message.xsl
Modified:
   trunk/examples/basecamp_api/basecamp.js
   trunk/examples/basecamp_api/index.html
   trunk/examples/basecamp_api/models/posts.xml
   trunk/examples/basecamp_api/views/message_list.xsl
   trunk/examples/basecamp_api/views/milestone_list.xsl
   trunk/examples/basecamp_api/views/project_selector.xsl
   trunk/examples/basecamp_api/views/todo_list.xsl
Log:


Copied: trunk/examples/basecamp_api (from rev 51, trunk/examples/basecamp_api)

Modified: trunk/examples/basecamp_api/basecamp.js
===================================================================
--- trunk/examples/basecamp_api/basecamp.js	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/basecamp.js	2006-04-24 21:53:21 UTC (rev 55)
@@ -4,142 +4,237 @@
 	// Error Handler
 	window.onerror = errorHandler;
 	
-	// RESOURCES
-	// ---------------------------------------------------------------------------------------------
 	// Constants
 	var BASECAMP_URL = "http://freja.projectpath.com";	
 
 	// 3rd party libraries.
 	var helpers = new wHELPERS();	// misc. javascript functions
 
+	// ---------------------------------------------------------------------------------------------
+	// ASSETS
+	// ---------------------------------------------------------------------------------------------
+
 	// Views
-	var project_view = getView("views/project.xsl");
+	var project_view         = getView("views/project.xsl");
 	var projectSelector_view = getView("views/project_selector.xsl");	
-	var todoList_view = getView("views/todo_list.xsl");
-	var messageList_view = getView("views/message_list.xsl");
-	var milestoneList_view = getView("views/milestone_list.xsl");
+	var todoList_view        = getView("views/todo_list.xsl");
+	var messageList_view     = getView("views/message_list.xsl");
+	var message_view         = getView("views/message.xsl");
+	var milestoneList_view   = getView("views/milestone_list.xsl");
 	
 	// Models
-	var projects = getModel("models/projects.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/project/list")));	
-	var todos = null; 	   
-	var messages = null;   
+	var projects   = getModel("models/projects.xml"); 	// Snapshot. Live data: getModel(addProxyToUrl("/project/list")));	
+	var todos      = null; 	   
+	var messages   = null;   
 	var milestones = null; 
+	var newMessage = null;
+	var categories = null;
+	
+	// Variables
+	var currentProjectId = null;
 
 	// Project Dependent Assets	
 	function loadProjectAssets(projectId) {	
 		
 		if(!projectId) 
-			var projectId = projects.get("//project[status='active']/id");				
+			currentProjectId = projects.get("//project[status='active']/id");				
+		else 
+			currentProjectId = projectId;
+			
+		todos      = getModel("models/todos.xml"); 		// Snapshot. Live data: getModel(addProxyToUrl("/projects/"+currentProjectId+"/todos/lists"));									
+		messages   = getModel("models/posts.xml"); 		// Snapshot. Live data: getModel(addProxyToUrl("/projects/"+currentProjectId+"/msg/archive"));	
+		milestones = getModel("models/milestones.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+currentProjectId+"/milestones/list"));
+		categories = getModel(addProxyToUrl("/projects/"+currentProjectId+"/post_categories"));
+		requestTemplate = getModel("models/new_request.xml");   // xml wrapper for posted data
+		messageTemplate = getModel("models/new_post.xml");      // skeleton for new data
 		
-		todos = getModel("models/todos.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/todos/lists"));							
-		Freja._aux.connect(todos, 'onload', function() { dispatch('showToDoList'); });	
 		
-		messages = getModel("models/posts.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/msg/archive"));
-		Freja._aux.connect(messages, 'onload', function() { dispatch('showMessageList'); });	
+		todoList_view.render(todos, 'placeholder_todos');
+		messageList_view.render(messages, 'placeholder_messages');
+		milestoneList_view.render(milestones, 'placeholder_milestones');
 		
-		milestones = getModel("models/milestones.xml"); // Snapshot. Live data: getModel(addProxyToUrl("/projects/"+projectId+"/milestones/list"));
-		Freja._aux.connect(milestones, 'onload', function() { dispatch('showMilestoneList'); });	
 	}
 	Freja._aux.connect(projects, 'onload', function(){loadProjectAssets()});
+
+	// ---------------------------------------------------------------------------------------------
+	// INITIALIZATION
+	// ---------------------------------------------------------------------------------------------	
+
+	function init() {
+		projectSelector_view.render(projects, 'placeholder_projectSelector');
+	}
 	
-	
 	// ---------------------------------------------------------------------------------------------
 	// VIEW BEHAVIORS
-	// ---------------------------------------------------------------------------------------------
+	// ---------------------------------------------------------------------------------------------	
+
+	todoList_view.behaviors["editToDoListLink"] = {
+		onclick : function(node) {
+			var id = extractId(node.id);
+		}
+	}
 	
-	function addProjectSelectorBehaviors() {
-		//showModelSnapshot(projects);
-		var select = document.getElementById('currentProjectSelector');
-		select.onchange = function(e) {
-			var projectId = select.options[select.selectedIndex].value;
-			loadProjectAssets(projectId);
+	messageList_view.behaviors["editMessageLink"] = {
+		onclick : function(node) {	
+			var id = extractId(node.id);			
+			if(!isMessageLoaded(id)) {
+				loadMessage(id, function() { editMessage(id); });
+			} else {
+				editMessage(id);
+			}			
+			return false;
 		}
-	}	
-	Freja._aux.connect(projectSelector_view, 'onrendercomplete', addProjectSelectorBehaviors);
+	}
+	
+	messageList_view.behaviors["newMessageLink"] = {
+		onclick : function(node) {				
+			id = createMessage();
+			message_view.render(messages, 'placeholder_messages', {messageId: id});
+			return false;
+		}
+	}
+	
+	message_view.behaviors["editMessageForm"] = {
+		onsubmit : function(node) {	
+			messages.updateFrom(message_view);
+			messageList_view.render(messages, 'placeholder_messages');
+			synchronize(messages,"/projects/"+currentProjectId+"/msg/create");
+			return false;
+		}
+	}
+	
+	message_view.behaviors["cancelAction"] = {
+		onclick : function(node) {				
+			messageList_view.render(messages, 'placeholder_messages');
+			return false;
+		}
+	}
+	
+	milestoneList_view.behaviors["editMilestoneLink"] = {
+		onclick : function(node) {
+			var id = extractId(node.id);
+			return false;
+		}
+	}
+	
+	projectSelector_view.behaviors["projectSelector"] = {
+		onchange: function(node) { 
+			var projectId = node.options[node.selectedIndex].value;
+			loadProjectAssets(projectId);			
+		}
+	}
+	
 
-	function addToDoListBehaviors() {
-		//showModelSnapshot(todos);
-		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
-		for (var i=0;i<el.length;i++) {
-			if (helpers.hasClass(el[i], "editToDoListLink")) {
-				el[i].onclick = function() {
-					dispatch('editToDoList', {toDoListId : extractId(this.id) });
-				}		
-			}			
-		} 
+	// ---------------------------------------------------------------------------------------------
+	// MESSAGE MANAGEMENT
+	// ---------------------------------------------------------------------------------------------
+	function isMessageLoaded(id) {		
+		var message = messages.document.selectSingleNode("//post[id='"+id+"']");
+		if(message) {
+			// message is in our message list, but could be the abbreviated version.
+			if(message.selectSingleNode('extended-body')) 
+				return true;			
+		}
+		return false;
 	}
-	Freja._aux.connect(todoList_view, 'onrendercomplete', addToDoListBehaviors);
+	
+	function loadMessage(id, callback) {
+		
+		var newMessage = getModel(addProxyToUrl("/msg/get/"+id));
+		
+		Freja._aux.connect(newMessage,'onload', function() {
+			
+			var importedNode = newMessage.document.documentElement;
+			
+			if(messages.document.importNode) {
+				importedNode = messages.document.importNode(importedNode,true);
+			} // else use cloneNode?
+			
+			var currentNode = messages.document.selectSingleNode("//post[id='"+id+"']");				
+			if(currentNode) {				
+				currentNode.parentNode.insertBefore(importedNode,currentNode);
+				currentNode.parentNode.removeChild(currentNode);
+			} else {		
+				messages.document.documentElement.appendChild(importedNode);				
+			}	
+				
+			callback();
 
-	function addMessageListBehaviors() {
-		//showModelSnapshot(messages);
-		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
-		for (var i=0;i<el.length;i++) {
-			if (helpers.hasClass(el[i], "editMessageLink")) {
-				el[i].onclick = function() {
-					dispatch('editMessage', {messageId : extractId(this.id) });
-				}		
-			}			
-		} 
+			// need to destroy newMessage ?			
+		});		
 	}
-	Freja._aux.connect(messageList_view, 'onrendercomplete', addMessageListBehaviors);
 	
+	function createMessage() {
 
-	function addMilestoneListBehaviors() {
-		//showModelSnapshot(milestones);
-		var el = document.getElementById('placeholder_main').getElementsByTagName("a");
-		for (var i=0;i<el.length;i++) {
-			if (helpers.hasClass(el[i], "editMilestoneLink")) {
-				el[i].onclick = function() {
-					dispatch('editMilestone', {milestoneId : extractId(this.id) });
-				}		
-			}			
+		if(!messageTemplate) {
+			// problem, template is not loaded.
+			return;
 		} 
+		var tmpid = 'tmp'+getRandomId();
+		messageTemplate.set('/post/id', tmpid);
+				
+		if(messages.document.importNode) {
+			newMessage = messages.document.importNode(messageTemplate.document.documentElement,true);
+		} // else try cloneNode
+
+		messages.document.documentElement.appendChild(newMessage);
+		return tmpid; 
 	}
-	Freja._aux.connect(milestoneList_view, 'onrendercomplete', addMilestoneListBehaviors);
 	
+	function editMessage(id) {
+		message_view.render(messages, 'placeholder_messages', {messageId: id});
+	}	
+	
 	// ---------------------------------------------------------------------------------------------
-	// DISPATCHER
+	//   
 	// ---------------------------------------------------------------------------------------------
 	
-	function dispatch(action, params) {
+	function synchronize(model, withUrl) {
 		
-		switch (action) {
-			default:	
-				// init												
-				dispatch('showProjectSelector');				
-				break;
-			case 'showProjectSelector':	
-				projectSelector_view.render(projects, 'placeholder_projectSelector');				
-				break;
-			case 'showToDoList':					
-				todoList_view.render(todos, 'placeholder_main');				
-				break;
-			case 'showMessageList':
-				messageList_view.render(messages, 'placeholder_main');				
-				break;	
-			case 'showMilestoneList':
-				milestoneList_view.render(milestones, 'placeholder_main');				
-				break;				
-			case 'editProject':
-				project_view.render(projects, 'placeholder_main', params);				
-				break;
-			case 'editCompany':
-				company_view.render(company, 'placeholder_main', params);				
-				break;
-				
+		// get first record to be synchronized
+		var outofsync = model.document.selectSingleNode("//*[@synchronized='false']"); 
+		
+		while(outofsync) {			
+			// build request
+			var requestNode = requestTemplate.document.documentElement
+			requestNode.appendChild(requestTemplate.document.importNode(outofsync, true));
+			requestTemplate.url = addProxyToUrl(withUrl);			
+
+			// clean tmp ids
+			var idNode = requestNode.getElementsByTagName('id')[0];
+			while(idNode) {
+				idNode.parentNode.removeChild(idNode);
+				idNode = requestNode.getElementsByTagName('id')[0];			
+			}
+			showModelSnapshot(requestTemplate);	
+
+			// send request			
+			var d = requestTemplate.save();	
+			d.addCallback(function(obj) {
+				alert('ok ' + obj.responseText + ' ' + obj.status + ' ' + obj.responseXML);
+				//outofsync.setAttribute('synchronized','true');
+			});
+			d.addErrback(function() {
+				alert('error ');
+				//outofsync.setAttribute('synchronized','false');
+			});
+			outofsync.setAttribute('synchronized','pending'); 
+			
+			//is there more to synchronize?
+			outofsync = model.document.selectSingleNode("//*[@synchronized='false']"); 
 		}
 	}
 	
 	// ---------------------------------------------------------------------------------------------
 	// MISC.
 	// ---------------------------------------------------------------------------------------------
+	
 	function extractId(obj) {
-		// format: 'anystring__id'. Returns the part after the '-'.
-		//         or [event object]
-		// used to encode a Model element id in a unique html id.
+		// parameter: 'anystring__id' or [event object] or [object]
+		// Get the id attribute if necessary and returns the part after the '__'.
+		// Used to encode a Model element id in a unique html id.
 		
-		if(!obj) obj = window.event;
-		
+		if(!obj) obj = window.event;		
 		switch(typeof obj) {
 			case 'string':
 				id = obj;
@@ -161,12 +256,23 @@
 		return id;
 	}
 	
+	function getRandomId() {
+		var seed = (new Date()).getTime();
+		seed = seed.toString().substr(6);
+		for (var i=0; i<3;i++)
+			seed += String.fromCharCode(48 + Math.floor((Math.random()*10)));
+		return "id-" + seed
+	}
+	
 	function addProxyToUrl(resourceUrl) {
 		return "proxy/php/proxy.php?url="+encodeURIComponent(BASECAMP_URL+resourceUrl);	
 	}
+	
+	
 	// ---------------------------------------------------------------------------------------------
 	// debug misc.
 	// ---------------------------------------------------------------------------------------------
+	
 	function showModelSnapshot(model) {
 		var xml = Freja._aux.serializeXML(model.document);
 		var dbg = document.getElementById('placeholder_debug');
@@ -174,9 +280,11 @@
 		dbg.style.display = "block";
 	}
 
+
 	// ---------------------------------------------------------------------------------------------
 	// errorHandler
 	// ---------------------------------------------------------------------------------------------
+	
 	function errorHandler(desc,page,line,chr)  {
 		 alert(
 			  'Sorry, a JavaScript error occurred! \n'
@@ -188,4 +296,4 @@
 	}
 	
 	// let's go!
-	window.onload = dispatch;
\ No newline at end of file
+	window.onload = init;
\ No newline at end of file

Modified: trunk/examples/basecamp_api/index.html
===================================================================
--- trunk/examples/basecamp_api/index.html	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/index.html	2006-04-24 21:53:21 UTC (rev 55)
@@ -4,8 +4,13 @@
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <title>BaseCamp Remixed with Freja</title>
 
+<link href="css/main.css" rel="stylesheet" type="text/css" />
+
+<!-- 3rd parties Scripts -->
+<script type="text/javascript" src="lib/helpers.js"></script>
+
 <!-- Freja Framework Script -->
-<script type="text/javascript" src="../../lib/Freja.js"></script>
+<script type="text/javascript" src="../lib/Freja.js"></script>
 
 <!-- Controller Code -->
 <script type="text/javascript" src="basecamp.js"></script>
@@ -13,6 +18,11 @@
 </head>
 
 <body>
-<div id="placeholder_projectList"></div>
+<div id="placeholder_projectSelector"></div>
+<div id="placeholder_main"></div>
+<div id="placeholder_todos"></div>
+<div id="placeholder_milestones"></div>
+<div id="placeholder_messages"></div>
+<div id="placeholder_debug"></div>
 </body>
 </html>

Added: trunk/examples/basecamp_api/models/new_post.xml
===================================================================
--- trunk/examples/basecamp_api/models/new_post.xml	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/models/new_post.xml	2006-04-24 21:53:21 UTC (rev 55)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<post>
+	<title></title>
+	<body></body>
+	<id type="integer" />
+	<category-id type="integer" />
+	<use-textile type="boolean">true</use-textile>
+	<extended-body />
+	<private type="boolean">true</private>
+</post>

Added: trunk/examples/basecamp_api/models/new_request.xml
===================================================================
--- trunk/examples/basecamp_api/models/new_request.xml	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/models/new_request.xml	2006-04-24 21:53:21 UTC (rev 55)
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<request>
+</request>

Modified: trunk/examples/basecamp_api/models/posts.xml
===================================================================
--- trunk/examples/basecamp_api/models/posts.xml	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/models/posts.xml	2006-04-24 21:53:21 UTC (rev 55)
@@ -2,13 +2,19 @@
 <!-- THIS IS A SNAPSHOT OF LIVE DATA FROM BASECAMP. USED DURING DEVELOPMENT ONLY -->
 <posts>
   <post>
+    <display-extended-body><p>This is the extended body of the message.</p></display-extended-body>
+    <project-id type="integer">427919</project-id>
     <title>This is a message</title>
+    <display-body><p>This is the body of the message.</p></display-body>
+    <body>This is the body of the message.</body>
     <attachments-count type="integer">0</attachments-count>
     <id type="integer">2194956</id>
-    <category>
-      <name>Assets</name>
-      <id type="integer">4007205</id>
-    </category>
+    <category-id type="integer">4007205</category-id>
+    <use-textile type="boolean">true</use-textile>
+    <extended-body>This is the extended body of the message.</extended-body>
+    <comments-count type="integer">0</comments-count>
+    <author-id type="integer">605851</author-id>
     <posted-on type="datetime">2006-04-18T20:52:59Z</posted-on>
+    <milestone-id type="integer">0</milestone-id>
   </post>
 </posts>
\ No newline at end of file

Added: trunk/examples/basecamp_api/views/message.xsl
===================================================================
--- trunk/examples/basecamp_api/views/message.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/views/message.xsl	2006-04-24 21:53:21 UTC (rev 55)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xsl:stylesheet version="1.0"
+	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
+<xsl:param name="messageId" ></xsl:param>
+
+<xsl:template match="posts">
+	<xsl:apply-templates select="//post[id=$messageId]" />
+</xsl:template>
+
+<xsl:template match="post">	
+	<form method="post" action="#" id="message__{id}" class="editMessageForm" >
+		<label for="posttitle" class="preField">Title: </label>
+		<input type="text" name="//post[id='{id}']/title" id="posttitle" value="{title}" /><br/>
+		<label for="postbody" class="preField">Body: </label>
+		<textarea name="//post[id='{id}']/body" id="postbody">
+			<xsl:value-of select="body" />
+		</textarea>
+		<p>Posted on: <xsl:value-of select="posted-on" /></p>
+		<p>
+			<input type="hidden" value="false" name="//post[id='{id}']/@synchronized" />
+			<input type="button" value="cancel" class="cancelAction" />
+			<input type="submit" value="ok" class="primaryAction" />
+		</p>
+	</form>
+</xsl:template>
+
+<xsl:template match="text()" />
+</xsl:stylesheet>
\ No newline at end of file

Modified: trunk/examples/basecamp_api/views/message_list.xsl
===================================================================
--- trunk/examples/basecamp_api/views/message_list.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/views/message_list.xsl	2006-04-24 21:53:21 UTC (rev 55)
@@ -3,15 +3,21 @@
 	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="/posts">	
+	<h3>Messages</h3>
+	<p><a href='#' class='newMessageLink'>post a new message</a></p>
 	<ul>
 		<xsl:apply-templates />
 	</ul>
 </xsl:template>
 
 <xsl:template match="post">	
-	<li>
-		<a href='#' id='post_{id}' class='editPostLink'><xsl:value-of select="title"/></a>
-		&#160; <xsl:value-of select="category/name"/>
+	<li><a href='#' id='post__{id}' class='editMessageLink'><xsl:value-of select="title"/></a>
+		<br/>
+		<small>Posted on <xsl:value-of select="posted-on"/> in <xsl:value-of select="category/name"/>
+		<xsl:if test="attachments-count>0">
+			(<xsl:value-of select="attachments-count"/> attachements)
+		</xsl:if>
+		</small>
 		<xsl:apply-templates />
 	</li>
 </xsl:template>

Modified: trunk/examples/basecamp_api/views/milestone_list.xsl
===================================================================
--- trunk/examples/basecamp_api/views/milestone_list.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/views/milestone_list.xsl	2006-04-24 21:53:21 UTC (rev 55)
@@ -3,6 +3,7 @@
 	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="/milestones">	
+	<h3>Milestones</h3>
 	<ul>
 		<xsl:apply-templates />
 	</ul>

Modified: trunk/examples/basecamp_api/views/project_selector.xsl
===================================================================
--- trunk/examples/basecamp_api/views/project_selector.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/views/project_selector.xsl	2006-04-24 21:53:21 UTC (rev 55)
@@ -4,7 +4,7 @@
 
 <xsl:template match="projects">	
 	<label for="currentProjectSelector" class="preField" >Current Project: </label>
-	<select id="currentProjectSelector">		
+	<select id="currentProjectSelector" class="projectSelector">		
 		<xsl:apply-templates />
 	</select>
 </xsl:template>

Modified: trunk/examples/basecamp_api/views/todo_list.xsl
===================================================================
--- trunk/examples/basecamp_api/views/todo_list.xsl	2006-04-19 21:50:27 UTC (rev 51)
+++ trunk/examples/basecamp_api/views/todo_list.xsl	2006-04-24 21:53:21 UTC (rev 55)
@@ -3,6 +3,7 @@
 	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="/todo-lists">	
+	<h3>To-do lists</h3>
 	<ul>
 		<xsl:apply-templates />
 	</ul>



From cedsav at berlios.de  Mon Apr 24 23:55:17 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Mon, 24 Apr 2006 23:55:17 +0200
Subject: [Freja-svn] r56 - trunk/examples
Message-ID: <200604242155.k3OLtH3j029319@sheep.berlios.de>

Author: cedsav
Date: 2006-04-24 23:55:13 +0200 (Mon, 24 Apr 2006)
New Revision: 56

Removed:
   trunk/examples/basecamp_remix2/
Log:




From troelskn at berlios.de  Tue Apr 25 00:58:56 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Tue, 25 Apr 2006 00:58:56 +0200
Subject: [Freja-svn] r57 - trunk/examples/basecamp_api
Message-ID: <200604242258.k3OMwuLw019080@sheep.berlios.de>

Author: troelskn
Date: 2006-04-25 00:58:51 +0200 (Tue, 25 Apr 2006)
New Revision: 57

Modified:
   trunk/examples/basecamp_api/index.html
Log:
updated path

Modified: trunk/examples/basecamp_api/index.html
===================================================================
--- trunk/examples/basecamp_api/index.html	2006-04-24 21:55:13 UTC (rev 56)
+++ trunk/examples/basecamp_api/index.html	2006-04-24 22:58:51 UTC (rev 57)
@@ -10,7 +10,7 @@
 <script type="text/javascript" src="lib/helpers.js"></script>
 
 <!-- Freja Framework Script -->
-<script type="text/javascript" src="../lib/Freja.js"></script>
+<script type="text/javascript" src="../../lib/Freja.js"></script>
 
 <!-- Controller Code -->
 <script type="text/javascript" src="basecamp.js"></script>



From cedsav at berlios.de  Tue Apr 25 17:00:15 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Tue, 25 Apr 2006 17:00:15 +0200
Subject: [Freja-svn] r58 - in trunk/examples/basecamp_api: . lib
Message-ID: <200604251500.k3PF0Ftf013650@sheep.berlios.de>

Author: cedsav
Date: 2006-04-25 17:00:11 +0200 (Tue, 25 Apr 2006)
New Revision: 58

Added:
   trunk/examples/basecamp_api/lib/
   trunk/examples/basecamp_api/lib/helpers.js
Log:


Added: trunk/examples/basecamp_api/lib/helpers.js
===================================================================
--- trunk/examples/basecamp_api/lib/helpers.js	2006-04-24 22:58:51 UTC (rev 57)
+++ trunk/examples/basecamp_api/lib/helpers.js	2006-04-25 15:00:11 UTC (rev 58)
@@ -0,0 +1,159 @@
+function wHELPERS() {};
+	
+	// addEvent adapated from http://ejohn.org/projects/flexible-javascript-events/
+	// and  Andy Smith's (http://weblogs.asp.net/asmith/archive/2003/10/06/30744.aspx)
+	wHELPERS.prototype.addEvent = function(obj, type, fn) {
+		if(!obj) { return; }
+		
+		if (obj.attachEvent) {
+			obj['e'+type+fn] = fn;
+			obj[type+fn] = function(){obj['e'+type+fn]( window.event );}
+			obj.attachEvent( 'on'+type, obj[type+fn] );
+		} else if(obj.addEventListener) {			
+			obj.addEventListener( type,fn, false );
+		} else {
+			var originalHandler = obj["on" + type]; 
+			if (originalHandler) { 
+			  obj["on" + type] = function(e){originalHandler(e);fn(e);}; 
+			} else { 
+			  obj["on" + type] = fn; 
+			} 
+		}
+	}
+	
+	wHELPERS.prototype.removeEvent = function(obj, type, fn) {
+		if (obj.detachEvent) {
+			if(obj[type+fn]) {
+				obj.detachEvent( 'on'+type, obj[type+fn] );
+				obj[type+fn] = null;
+			}
+		} else if(obj.removeEventListener)
+			obj.removeEventListener( type, fn, false );
+		else {
+			obj["on" + type] = null;
+		}
+	}
+	
+	
+	
+	
+	
+	// Returns the event's source element 
+	wHELPERS.prototype.getSourceElement = function(e) {	
+		if(!e) e = window.event;	
+		if(e.target)
+			var srcE = e.target;
+		else
+			var srcE = e.srcElement;
+		if(!srcE) return null;
+		if(srcE.nodeType == 3) srcE = srcE.parentNode; // safari weirdness		
+		if(srcE.tagName.toUpperCase()=='LABEL' && e.type=='click') { 
+			// when clicking a label, firefox fires the input onclick event
+			// but the label remains the source of the event. In Opera and IE 
+			// the source of the event is the input element. Which is the 
+			// expected behavior, I suppose.		
+			if(srcE.getAttribute('for')) {
+				srcE = document.getElementById(srcE.getAttribute('for'));
+			}
+		}
+		return srcE;
+	}
+	
+	// Cancel the default execution of an event.
+	wHELPERS.prototype.preventEvent = function(e) {
+		if (!e) e = window.event;
+		if (e.preventDefault) e.preventDefault();
+		else e.returnValue = false;
+		return false;
+	}
+	
+	// Cancel the propagation of the event
+	wHELPERS.prototype.stopPropagation = function(e) {
+		if (!e) var e = window.event;
+		e.cancelBubble = true;
+		if (e.stopPropagation) e.stopPropagation();
+	}
+	
+	// Generates a random ID
+	wHELPERS.prototype.randomId = function () {
+		var seed = (new Date()).getTime();
+		seed = seed.toString().substr(6);
+		for (var i=0; i<6;i++)
+			seed += String.fromCharCode(48 + Math.floor((Math.random()*10)));
+		return "id-" + seed;
+	}
+	
+	// Activating an Alternate Stylesheet (thx to: http://www.howtocreate.co.uk/tutorials/index.php?tut=0&part=27)
+	// Use this to activate a CSS Stylesheet that shouldn't be used if javascript is turned off.
+	// The stylesheet rel attribute should be 'alternate stylesheet'. The title attribute MUST be set.
+	wHELPERS.prototype.activateStylesheet = function(sheetref) {
+		if(document.getElementsByTagName) {
+			var ss=document.getElementsByTagName('link');
+		} else if (document.styleSheets) {
+			var ss = document.styleSheets;
+		}
+		for(var i=0;ss[i];i++ ) {
+			if(ss[i].href.indexOf(sheetref) != -1) {
+				ss[i].disabled = true;
+				ss[i].disabled = false;			
+			}
+		}
+	}
+	
+	// hasClass
+	wHELPERS.prototype.hasClass = function(element,className) {
+		if(element && element.className) {
+			if((' ' + element.className + ' ').indexOf(' ' + className +' ') != -1) {
+				return true;
+			}
+		}
+		return false;
+	}
+	wHELPERS.prototype.hasClassPrefix = function(element,className) {
+		if(element && element.className) {
+			if((' ' + element.className).indexOf(' ' + className) != -1) {
+				return true;
+			}
+		}
+		return false;
+	}
+	
+	// getTop / getLeft  
+	// Returns pixel coordinates from the top-left window corner.
+	wHELPERS.prototype.getTop = function(obj) {
+		var cur = 0;
+		if(obj.offsetParent) {		
+			while(obj.offsetParent) {
+				if((new wHELPERS()).getComputedStyle(obj,'position') == 'relative' ) {
+					// relatively postioned element
+					return cur;
+				}
+				cur+=obj.offsetTop;
+				obj = obj.offsetParent;
+			}
+		}
+		return cur;
+	}
+	wHELPERS.prototype.getLeft = function(obj) {
+		var cur = 0;
+		if(obj.offsetParent) {		
+			while(obj.offsetParent) {
+				if((new wHELPERS()).getComputedStyle(obj,'position') == 'relative' ) {
+					// relatively postioned element
+					return cur;
+				}
+				cur+=obj.offsetLeft;
+				obj = obj.offsetParent;
+			}
+		}
+		return cur;
+	}
+ 	
+	wHELPERS.prototype.getComputedStyle = function(element, styleName) {
+		if(window.getComputedStyle) {
+			return window.getComputedStyle(element,"").getPropertyValue(styleName);
+		} else if(element.currentStyle) {	
+			return element.currentStyle[styleName];
+		}
+		return false;
+	}



From troelskn at berlios.de  Tue Apr 25 19:40:43 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Tue, 25 Apr 2006 19:40:43 +0200
Subject: [Freja-svn] r59 - trunk/lib
Message-ID: <200604251740.k3PHehLC029030@sheep.berlios.de>

Author: troelskn
Date: 2006-04-25 19:39:58 +0200 (Tue, 25 Apr 2006)
New Revision: 59

Modified:
   trunk/lib/Freja.js
Log:
new build

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-04-25 15:00:11 UTC (rev 58)
+++ trunk/lib/Freja.js	2006-04-25 17:39:58 UTC (rev 59)
@@ -2,7 +2,7 @@
 
     Freja 2.0.alpha
 
-    Build $Mon, 10 Apr 2006 14:29:25 UTC$
+    Build $Tue, 25 Apr 2006 17:39:11 UTC$
 
     Target: minimal
 
@@ -93,6 +93,9 @@
 				if (input.checked) {
 					names.push(input.name);
 					values.push(input.value);
+				} else {
+					names.push(input.name);
+					values.push("");
 				}
 			} else {
 				names.push(input.name);
@@ -110,12 +113,12 @@
 	}
 	var selects = elem.getElementsByTagName("SELECT");
 	for (var i = 0; i < selects.length; ++i) {
-		var input = textareas[i];
+		var input = selects[i];
 		if (input.name) {
 			if (input.selectedIndex >= 0) {
 				var opt = input.options[input.selectedIndex];
 				names.push(input.name);
-				values.push((opt.value) ? opt.value : opt.text);
+				values.push((opt.value) ? opt.value : "");
 			}
 		}
 	}
@@ -261,8 +264,9 @@
 /** loadXML(string) : XMLDocument */
 Freja._aux.loadXML = function(text) {
 	if (window.ActiveXObject) {
-		var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.4.0");
+		var xmlDoc = new ActiveXObject("Msxml2.DOMDocument");
 		xmlDoc.loadXML(text);
+		xmlDoc.setProperty("SelectionLanguage", "XPath");
 		return xmlDoc;
 	}
 	return (new DOMParser()).parseFromString(text, "text/xml");
@@ -270,8 +274,25 @@
 /** transformXSL(XMLDocument, XSLDocument) : string */
 Freja._aux.transformXSL = function(xml, xsl, xslParameters) {
 	if (typeof(xml.transformNode) != "undefined") {
-		return xml.transformNode(xsl);
+		// set the parameters
+		for (var paramName in xslParameters) {
+			xsl.setProperty ("SelectionNamespaces", "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");
+			var paramNode = xsl.selectSingleNode("//xsl:param[@name='"+ paramName +"']");
+			paramNode.appendChild(xsl.createTextNode(xslParameters[paramName]));
+			// @TODO: check if we have the 'select' attribute and remove it.
+		}
+		var result = xml.transformNode(xsl);
+
+		// clean the stylesheet.
+		for (var paramName in xslParameters) {
+			var paramNode = xsl.selectSingleNode("//xsl:param[@name='"+ paramName +"']");
+			while(paramNode.firstChild) {
+				paramNode.removeChild(paramNode.firstChild);
+			}
+		}
+		return result;
 	};
+
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
 	for (var paramName in xslParameters) {
@@ -411,7 +432,71 @@
 			throw new Error("Method selectNodes is only supported by XML Elements");
 		}
 	};
-};
+};
+
+// Adapated From Sarissa
+// * @version 0.9.6.1
+// * @author: Manos Batsis, mailto: mbatsis at users full stop sourceforge full stop net
+
+Freja._aux.pickRecentProgID = function(idList) {
+    var bFound = false;
+    for(var i=0; i < idList.length && !bFound; i++){
+        try{
+            var oDoc = new ActiveXObject(idList[i]);
+            return idList[i];
+        } catch (objException){ // trap; try next progID
+        };
+    };
+    throw "Could not retrieve a valid progID.";
+}
+
+if(typeof XSLTProcessor == 'undefined' && typeof ActiveXObject  != 'undefined') {
+
+    _SARISSA_DOM_PROGID = Freja._aux.pickRecentProgID(["Msxml2.DOMDocument.5.0", "Msxml2.DOMDocument.4.0", "Msxml2.DOMDocument.3.0", "MSXML2.DOMDocument", "MSXML.DOMDocument", "Microsoft.XMLDOM"]);
+    _SARISSA_XMLHTTP_PROGID = Freja._aux.pickRecentProgID(["Msxml2.XMLHTTP.5.0", "Msxml2.XMLHTTP.4.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"]);
+    _SARISSA_THREADEDDOM_PROGID = Freja._aux.pickRecentProgID(["Msxml2.FreeThreadedDOMDocument.5.0", "MSXML2.FreeThreadedDOMDocument.4.0", "MSXML2.FreeThreadedDOMDocument.3.0"]);
+    _SARISSA_XSLTEMPLATE_PROGID = Freja._aux.pickRecentProgID(["Msxml2.XSLTemplate.5.0", "Msxml2.XSLTemplate.4.0", "MSXML2.XSLTemplate.3.0"]);
+
+	XSLTProcessor = function(){
+	    this.template = new ActiveXObject(_SARISSA_XSLTEMPLATE_PROGID);
+	    this.processor = null;
+	};
+
+	XSLTProcessor.prototype.importStylesheet = function(xslDoc){
+	    // convert stylesheet to free threaded
+	    var converted = new ActiveXObject(_SARISSA_THREADEDDOM_PROGID);
+	    converted.loadXML(xslDoc.xml);
+	    this.template.stylesheet = converted;
+	    this.processor = this.template.createProcessor();
+	    // (re)set default param values
+	    this.paramsSet = new Array();
+	};
+
+	XSLTProcessor.prototype.transformToDocument = function(sourceDoc){
+	    this.processor.input = sourceDoc;
+	    var outDoc = new ActiveXObject(_SARISSA_DOM_PROGID);
+	    this.processor.output = outDoc;
+	    this.processor.transform();
+	    return outDoc;
+	};
+
+	XSLTProcessor.prototype.setParameter = function(nsURI, name, value){
+	    /* nsURI is optional but cannot be null */
+	    if(nsURI){
+	        this.processor.addParameter(name, value, nsURI);
+	    }else{
+	        this.processor.addParameter(name, value);
+	    };
+	    /* update updated params for getParameter */
+	    if(!this.paramsSet[""+nsURI]){
+	        this.paramsSet[""+nsURI] = new Array();
+	    };
+	    this.paramsSet[""+nsURI][name] = value;
+	};
+
+}
+
+
 /**
   * The baseclass for queryengines
   * @abstract
@@ -435,6 +520,30 @@
 	var node = this._find(document, expression);	
 	if(node) {
 		node.nodeValue = value;
+	} else {
+		// text node not found. Might need to be created.
+		// try not to process field names that are not meant to be xpath expressions  
+		if(expression.lastIndexOf('/') != -1) {		 	
+			var nodeName = expression.substr(expression.lastIndexOf('/')+1);
+			
+			if(nodeName.charAt(0)=='@') {
+				// trying to set a non-existing attribute. Let's create it.
+				var newexpression =  expression.substring(0, expression.lastIndexOf('/'));
+				var node = document.selectSingleNode(newexpression);
+				if(node) 
+					node.setAttribute(nodeName.substr(1),value);
+			} else {
+				// this could be an empty node (<tag />)
+				// let's try to create the text node.
+				var node = document.selectSingleNode(expression);
+				if(node) {
+					var n = document.createTextNode(value);
+					node.appendChild(n);							
+				} else {
+					// the element does not exist.
+				}
+			}
+		}
 	}
 };
 /**
@@ -450,13 +559,7 @@
 		return node.firstChild;
 	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
-	} else if (node && !node.firstChild) {
-		// this is an empty node <tag />. When using 'get' it's fine to return null,
-		// but for 'set', we need to create a textnode somewhere.
-		// for lack of better idea, will do it here.
-		var n = document.createTextNode('');
-		return node.appendChild(n);
-	}
+	} 
 //	throw new Error("Can't evaluate expression " + expression);
 	return null;
 };
@@ -639,10 +742,10 @@
 	this.document = null;
 	this._renderer = renderer;
 	this._destination = null;
-	this.behaviours = [];
+	this.behaviors = [];
 	this.placeholder = null;
 	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
-	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehaviour, this));
+	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehavior, this));
 };
 /**
   * @param    model            Freja.Model
@@ -710,11 +813,11 @@
 	return d;
 };
 /**
-  * Decorates the output of the primary renderer, to inject behaviour.
+  * Decorates the output of the primary renderer, to inject behavior.
   * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
-  *       to identify targets for behaviour
+  *       to identify targets for behavior
   */
-Freja.View.prototype._connectBehaviour = function(destination) {
+Freja.View.prototype._connectBehavior = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
 
@@ -733,34 +836,35 @@
 				}, node)
 			);
 		};
-		var applyHandlers = function(node, behaviours) {
-
+		var applyHandlers = function(node, behaviors) {
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
 				if (child.nodeType == 1) {
-					var id = child.getAttribute("freja-behaviour");
-					if (id != "") {
-						var handler = behaviours[id];
-						if (handler) {
-							for (var eventType in handler) {
-								if (eventType == "init") {
-									handler.init(child);
-								} else {
-									connectCallback(child, eventType, handler[eventType]);
+					if(child.className) {
+						var classNames = child.className.split(' ');						
+						for (var j=0;j<classNames.length;j++) {											
+							var handler = behaviors[classNames[j]];
+							if (handler) {
+								for (var eventType in handler) {
+									if (eventType == "init") {
+										handler.init(child);
+									} else {
+										connectCallback(child, eventType, handler[eventType]);
+									}
 								}
 							}
 						}
 					}
-					applyHandlers(child, behaviours);
+					applyHandlers(child, behaviors);
 				}
 			}
 		};
 
 		// Avoid traversing the DOM tree if there's no handler to process.
-		// @note: is there a better way? this.behaviours.length is always 0.
-		// @note  This is fine. behaviours is a hashmap, not an array.
-		for (var ids in this.behaviours) {
-			applyHandlers(destination, this.behaviours);
+		// @note: is there a better way? this.behaviors.length is always 0.
+		// @note  This is fine. behaviors is a hashmap, not an array.
+		for (var ids in this.behaviors) {
+			applyHandlers(destination, this.behaviors);
 			break;
 		}
 
@@ -1069,13 +1173,15 @@
 		d.callback(document);
 	};
 	try {
-		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
+		/* Why using HTTP_METHOD_TUNNEL for a GET? 
+		  if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
 			var req = Freja._aux.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 		} else {
+		*/
 			var req = Freja._aux.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
-		}
+		/*}*/
 
 		// This shouldn't be nescesary, but alas it is - firefox chokes
 		// It's probably due to an error in MochiKit, so the problem
@@ -1103,7 +1209,14 @@
   * It ought to be replaced completely with Deferred
   */
 Freja.AssetManager.onerror = function(ex) {
-	alert("Freja.AssetManager.onerror\n" + ex.message);
+	if(ex.message) {
+		alert("Freja.AssetManager.onerror\n" + ex.message);
+	} 
+	// @note: on asynchronous calls, ex refers to the xmlhttpobject
+	// see Bug #7189 (http://developer.berlios.de/bugs/?func=detailbug&group_id=6277&bug_id=7189)
+	else if(ex.status){
+		alert('error '+ ex.status + ' ' +  ex.responseText);
+	}
 };
 /**
   * Global exports



From cedsav at berlios.de  Wed Apr 26 23:35:36 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Wed, 26 Apr 2006 23:35:36 +0200
Subject: [Freja-svn] r60 - trunk/src
Message-ID: <200604262135.k3QLZak5024528@sheep.berlios.de>

Author: cedsav
Date: 2006-04-26 23:35:32 +0200 (Wed, 26 Apr 2006)
New Revision: 60

Modified:
   trunk/src/View.js
Log:
Fixed xsl parameters for remoteXSLTTransformation

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-25 17:39:58 UTC (rev 59)
+++ trunk/src/View.js	2006-04-26 21:35:32 UTC (rev 60)
@@ -193,8 +193,15 @@
 	// prepare posted data  (no need to send the XSL document, just its url)
 	var xslUrl = view.url;
 	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja._aux.serializeXML(model.document));
-	if (xslParameters)
-		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParameters.toString());
+	
+	var xslParameterString = '';
+	for (var paramname in xslParameters) {
+		xslParameterString += encodeURIComponent(paramname + "," + xslParameters[paramname]);
+	}
+	if(xslParameterString.length > 0) {
+		postedData  = postedData + '&xslParam=' + xslParameterString;
+	} 
+
 	// send request to the server-side XSL transformation service
 	var req = Freja.AssetManager.openXMLHttpRequest("POST", Freja.AssetManager.XSLT_SERVICE_URL);
 	req.onreadystatechange = function() {



From cedsav at berlios.de  Fri Apr 28 23:18:32 2006
From: cedsav at berlios.de (cedsav at berlios.de)
Date: Fri, 28 Apr 2006 23:18:32 +0200
Subject: [Freja-svn] r61 - trunk/src
Message-ID: <200604282118.k3SLIWGX016513@sheep.berlios.de>

Author: cedsav
Date: 2006-04-28 23:18:29 +0200 (Fri, 28 Apr 2006)
New Revision: 61

Modified:
   trunk/src/QueryEngine.js
Log:
added support for /element[@attr=value]/ expression to simplepath. Fiddled with get,set and _find. Will need some more work.

Modified: trunk/src/QueryEngine.js
===================================================================
--- trunk/src/QueryEngine.js	2006-04-26 21:35:32 UTC (rev 60)
+++ trunk/src/QueryEngine.js	2006-04-28 21:18:29 UTC (rev 61)
@@ -13,37 +13,35 @@
 	}
 };
 Freja.QueryEngine.prototype.get = function(document, expression) {
-	var node = this._find(document, expression);
+	try {
+		var node = this._find(document, expression);
+	} catch(x) {
+		return null;
+	}
 	if(node) return node.nodeValue;
-	return null;
+	
 };
 Freja.QueryEngine.prototype.set = function(document, expression, value) {
-	var node = this._find(document, expression);	
-	if(node) {
-		node.nodeValue = value;
-	} else {
+	try {
+		var node = this._find(document, expression);
+		if(node)
+			node.nodeValue = value;
+	} catch(x) {
 		// text node not found. Might need to be created.
 		// try not to process field names that are not meant to be xpath expressions  
-		if(expression.lastIndexOf('/') != -1) {		 	
+		if(expression.lastIndexOf('/') != -1) {		
 			var nodeName = expression.substr(expression.lastIndexOf('/')+1);
-			
 			if(nodeName.charAt(0)=='@') {
 				// trying to set a non-existing attribute. Let's create it.
-				var newexpression =  expression.substring(0, expression.lastIndexOf('/'));
-				var node = document.selectSingleNode(newexpression);
-				if(node) 
-					node.setAttribute(nodeName.substr(1),value);
-			} else {
-				// this could be an empty node (<tag />)
-				// let's try to create the text node.
-				var node = document.selectSingleNode(expression);
-				if(node) {
-					var n = document.createTextNode(value);
-					node.appendChild(n);							
-				} else {
-					// the element does not exist.
+				var parentExpression =  expression.substring(0, expression.lastIndexOf('/'));
+				var pNode = this._find(document, parentExpression);
+				if(pNode) {
+					// this._find returns a text node
+					pNode = pNode.parentNode;
+					pNode.setAttribute(nodeName.substr(1),value);
 				}
 			}
+			// else parent element does not exist.. can't do anything
 		}
 	}
 };
@@ -56,53 +54,87 @@
 	var node = document.selectSingleNode(expression);
 	if (node && node.nodeType == 2) {
 		return node;
-	} else if (node && node.firstChild && node.firstChild.nodeType == 3) {
+	} 
+	if (node && node.firstChild && node.firstChild.nodeType == 3) {
 		return node.firstChild;
-	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
+	} 
+	if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
 	} 
-//	throw new Error("Can't evaluate expression " + expression);
+	if (node && node.nodeType==1 && !node.firstChild) {
+		// empty element (<tag/>). Let's create and return a blank text node
+		return node.appendChild(document.createTextNode(''));			  
+	}
+	
+	throw new Error("Can't evaluate expression " + expression);
 	return null;
-};
+}; 
 /**
   * SimplePath
   */
 Freja.QueryEngine.SimplePath = function() {};
 Freja.Class.extend(Freja.QueryEngine.SimplePath, Freja.QueryEngine);
 Freja.QueryEngine.SimplePath.prototype._find = function(document, expression) {
-	if (!expression.match(/^[\d\w\/@\[\]]*$/)) {
+	if (!expression.match(/^[\d\w\/@\[\]=_\-']*$/)) {
 		throw new Error("Can't evaluate expression " + expression);
 	}
 	var parts = expression.split(/\//);
 	var node = document;
 	var regAttr = new RegExp("^@([\\d\\w]*)");
 	var regOffset = new RegExp("^([@\\d\\w]*)\\[([\\d]*)\\]$");
+	var regFilter = new RegExp("^([\\d\\w]+)\\[@([@\\d\\w]+)=['\"]{1}(.*)['\"]{1}\\]$");
 	var attr = null;
 	var offset = 0;
 	for (var i = 0; i < parts.length; ++i) {
 		var part = parts[i];
-		offset = regOffset.exec(part);
-		if (offset) {
-			part = offset[1];
-			offset = offset[2] - 1;
-		} else {
-			offset = 0;
+		var filter = regFilter.exec(part);
+		if(filter) {
+			// filter[1] element name, filter[2] attribute name, filter[3] attribute value
+			if(i>0 && parts[i-1]=='') {
+				// expression was of type //element[...] 
+				var cn = node.getElementsByTagName(filter[1]);
+			} else {
+				var cn = node.childNodes;
+			}
+			for(var j=0, l=cn.length; j<l ; j++) {
+				if(cn[j].nodeType==1 && cn[j].tagName==filter[1] && cn[j].getAttribute(filter[2])== filter[3]) {
+					node = cn[j];
+					break;
+				}
+			}
+			if (j==l)
+				throw new Error("Can't evaluate expression " + part);
 		}
-		if (part != "") {
-			attr = regAttr.exec(part);
-			if (attr) {
-				node = node.getAttributeNode(attr[1]);
+		else {		
+			offset = regOffset.exec(part);
+			if (offset) {
+				part = offset[1];
+				offset = offset[2] - 1;
 			} else {
-				node = node.getElementsByTagName(part).item(offset);
+				offset = 0;
 			}
+			if (part != "") {
+				attr = regAttr.exec(part);
+				if (attr) {
+					node = node.getAttributeNode(attr[1]);
+				} else {
+					node = node.getElementsByTagName(part).item(offset);
+				}
+			}
 		}
 	}
 	if (node && node.firstChild && node.firstChild.nodeType == 3) {
 		return node.firstChild;
-	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
+	} 
+	if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
 	}
-	if (!node) {
+	if (node && node.nodeType==1 && !node.firstChild) {
+		// empty element (<tag/>). Let's create and return a blank text node
+		return node.appendChild(document.createTextNode(''));			  
+	}
+	
+	if (!node) {		
 		throw new Error("Can't evaluate expression " + expression);
 	}
 	return node;



From troelskn at berlios.de  Sat Apr 29 11:20:14 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sat, 29 Apr 2006 11:20:14 +0200
Subject: [Freja-svn] r62 - in trunk: lib src src/auxiliary tests tests/data
Message-ID: <200604290920.k3T9KEtm017688@sheep.berlios.de>

Author: troelskn
Date: 2006-04-29 11:20:10 +0200 (Sat, 29 Apr 2006)
New Revision: 62

Modified:
   trunk/lib/Freja.js
   trunk/lib/MochiKit.js
   trunk/src/Model.js
   trunk/src/QueryEngine.js
   trunk/src/View.js
   trunk/src/auxiliary/minimal.js
   trunk/src/auxiliary/mochi+sarissa.js
   trunk/tests/data/form-view.xsl
   trunk/tests/test_View.js
Log:
Upgraded MochiKit to latest release, which got rid of registerSignal
Also fixed a bug in SimplePath and fixed tests

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/lib/Freja.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -2,7 +2,7 @@
 
     Freja 2.0.alpha
 
-    Build $Tue, 25 Apr 2006 17:39:11 UTC$
+    Build $Sat, 29 Apr 2006 09:18:08 UTC$
 
     Target: minimal
 
@@ -133,8 +133,6 @@
 	}
 };
 
-/** registerSignals(src, signals) : void */
-Freja._aux.registerSignals = function(src, signals) { /* void */ };
 /** connect(src, signal, fnc) : void */
 Freja._aux.connect = function(src, signal, fnc) {
 
@@ -512,37 +510,35 @@
 	}
 };
 Freja.QueryEngine.prototype.get = function(document, expression) {
-	var node = this._find(document, expression);
+	try {
+		var node = this._find(document, expression);
+	} catch(x) {
+		return null;
+	}
 	if(node) return node.nodeValue;
-	return null;
+
 };
 Freja.QueryEngine.prototype.set = function(document, expression, value) {
-	var node = this._find(document, expression);	
-	if(node) {
-		node.nodeValue = value;
-	} else {
+	try {
+		var node = this._find(document, expression);
+		if(node)
+			node.nodeValue = value;
+	} catch(x) {
 		// text node not found. Might need to be created.
-		// try not to process field names that are not meant to be xpath expressions  
-		if(expression.lastIndexOf('/') != -1) {		 	
+		// try not to process field names that are not meant to be xpath expressions
+		if(expression.lastIndexOf('/') != -1) {
 			var nodeName = expression.substr(expression.lastIndexOf('/')+1);
-			
 			if(nodeName.charAt(0)=='@') {
 				// trying to set a non-existing attribute. Let's create it.
-				var newexpression =  expression.substring(0, expression.lastIndexOf('/'));
-				var node = document.selectSingleNode(newexpression);
-				if(node) 
-					node.setAttribute(nodeName.substr(1),value);
-			} else {
-				// this could be an empty node (<tag />)
-				// let's try to create the text node.
-				var node = document.selectSingleNode(expression);
-				if(node) {
-					var n = document.createTextNode(value);
-					node.appendChild(n);							
-				} else {
-					// the element does not exist.
+				var parentExpression =  expression.substring(0, expression.lastIndexOf('/'));
+				var pNode = this._find(document, parentExpression);
+				if(pNode) {
+					// this._find returns a text node
+					pNode = pNode.parentNode;
+					pNode.setAttribute(nodeName.substr(1),value);
 				}
 			}
+			// else parent element does not exist.. can't do anything
 		}
 	}
 };
@@ -555,12 +551,19 @@
 	var node = document.selectSingleNode(expression);
 	if (node && node.nodeType == 2) {
 		return node;
-	} else if (node && node.firstChild && node.firstChild.nodeType == 3) {
+	}
+	if (node && node.firstChild && node.firstChild.nodeType == 3) {
 		return node.firstChild;
-	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
+	}
+	if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
-	} 
-//	throw new Error("Can't evaluate expression " + expression);
+	}
+	if (node && node.nodeType==1 && !node.firstChild) {
+		// empty element (<tag/>). Let's create and return a blank text node
+		return node.appendChild(window.document.createTextNode(''));
+	}
+
+	throw new Error("Can't evaluate expression " + expression);
 	return null;
 };
 /**
@@ -569,38 +572,65 @@
 Freja.QueryEngine.SimplePath = function() {};
 Freja.Class.extend(Freja.QueryEngine.SimplePath, Freja.QueryEngine);
 Freja.QueryEngine.SimplePath.prototype._find = function(document, expression) {
-	if (!expression.match(/^[\d\w\/@\[\]]*$/)) {
+	if (!expression.match(/^[\d\w\/@\[\]=_\-']*$/)) {
 		throw new Error("Can't evaluate expression " + expression);
 	}
 	var parts = expression.split(/\//);
 	var node = document;
 	var regAttr = new RegExp("^@([\\d\\w]*)");
 	var regOffset = new RegExp("^([@\\d\\w]*)\\[([\\d]*)\\]$");
+	var regFilter = new RegExp("^([\\d\\w]+)\\[@([@\\d\\w]+)=['\"]{1}(.*)['\"]{1}\\]$");
 	var attr = null;
 	var offset = 0;
 	for (var i = 0; i < parts.length; ++i) {
 		var part = parts[i];
-		offset = regOffset.exec(part);
-		if (offset) {
-			part = offset[1];
-			offset = offset[2] - 1;
-		} else {
-			offset = 0;
+		var filter = regFilter.exec(part);
+		if(filter) {
+			// filter[1] element name, filter[2] attribute name, filter[3] attribute value
+			if(i>0 && parts[i-1]=='') {
+				// expression was of type //element[...]
+				var cn = node.getElementsByTagName(filter[1]);
+			} else {
+				var cn = node.childNodes;
+			}
+			for(var j=0, l=cn.length; j<l ; j++) {
+				if(cn[j].nodeType==1 && cn[j].tagName==filter[1] && cn[j].getAttribute(filter[2])== filter[3]) {
+					node = cn[j];
+					break;
+				}
+			}
+			if (j==l)
+				throw new Error("Can't evaluate expression " + part);
 		}
-		if (part != "") {
-			attr = regAttr.exec(part);
-			if (attr) {
-				node = node.getAttributeNode(attr[1]);
+		else {
+			offset = regOffset.exec(part);
+			if (offset) {
+				part = offset[1];
+				offset = offset[2] - 1;
 			} else {
-				node = node.getElementsByTagName(part).item(offset);
+				offset = 0;
 			}
+			if (part != "") {
+				attr = regAttr.exec(part);
+				if (attr) {
+					node = node.getAttributeNode(attr[1]);
+				} else {
+					node = node.getElementsByTagName(part).item(offset);
+				}
+			}
 		}
 	}
 	if (node && node.firstChild && node.firstChild.nodeType == 3) {
 		return node.firstChild;
-	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
+	}
+	if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
 	}
+	if (node && node.nodeType==1 && !node.firstChild) {
+		// empty element (<tag/>). Let's create and return a blank text node
+		return node.appendChild(window.document.createTextNode(''));
+	}
+
 	if (!node) {
 		throw new Error("Can't evaluate expression " + expression);
 	}
@@ -614,7 +644,6 @@
 	this.ready = false;
 	this.document = null;
 	this._query = query;
-	Freja._aux.registerSignals(this, ["onload"]);
 };
 /**
   * Returns a single value
@@ -744,7 +773,6 @@
 	this._destination = null;
 	this.behaviors = [];
 	this.placeholder = null;
-	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
 	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehavior, this));
 };
 /**
@@ -841,8 +869,8 @@
 				var child = c[i];
 				if (child.nodeType == 1) {
 					if(child.className) {
-						var classNames = child.className.split(' ');						
-						for (var j=0;j<classNames.length;j++) {											
+						var classNames = child.className.split(' ');
+						for (var j=0;j<classNames.length;j++) {
 							var handler = behaviors[classNames[j]];
 							if (handler) {
 								for (var eventType in handler) {
@@ -928,8 +956,15 @@
 	// prepare posted data  (no need to send the XSL document, just its url)
 	var xslUrl = view.url;
 	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja._aux.serializeXML(model.document));
-	if (xslParameters)
-		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParameters.toString());
+
+	var xslParameterString = '';
+	for (var paramname in xslParameters) {
+		xslParameterString += encodeURIComponent(paramname + "," + xslParameters[paramname]);
+	}
+	if(xslParameterString.length > 0) {
+		postedData  = postedData + '&xslParam=' + xslParameterString;
+	}
+
 	// send request to the server-side XSL transformation service
 	var req = Freja.AssetManager.openXMLHttpRequest("POST", Freja.AssetManager.XSLT_SERVICE_URL);
 	req.onreadystatechange = function() {

Modified: trunk/lib/MochiKit.js
===================================================================
--- trunk/lib/MochiKit.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/lib/MochiKit.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -1,6 +1,6 @@
 /***
 
-    MochiKit.MochiKit 1.3 : PACKED VERSION
+    MochiKit.MochiKit 1.3.1 : PACKED VERSION
 
     THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
     diff against the source tree, not this file.
@@ -20,15 +20,15 @@
 if(typeof (MochiKit.Base)=="undefined"){
 MochiKit.Base={};
 }
-MochiKit.Base.VERSION="1.3";
+MochiKit.Base.VERSION="1.3.1";
 MochiKit.Base.NAME="MochiKit.Base";
 MochiKit.Base.update=function(_1,_2){
-if(_1==null){
+if(_1===null){
 _1={};
 }
 for(var i=1;i<arguments.length;i++){
 var o=arguments[i];
-if(typeof (o)!="undefined"&&o!=null){
+if(typeof (o)!="undefined"&&o!==null){
 for(var k in o){
 _1[k]=o[k];
 }
@@ -41,7 +41,7 @@
 },toString:function(){
 return this.__repr__();
 },counter:function(n){
-if(arguments.length==0){
+if(arguments.length===0){
 n=1;
 }
 return function(){
@@ -53,10 +53,25 @@
 me.prototype=_7;
 return new me();
 }
-},extend:function(_9,obj,_11){
-if(!_11){
-_11=0;
+},flattenArguments:function(_9){
+var res=[];
+var m=MochiKit.Base;
+var _12=m.extend(null,arguments);
+while(_12.length){
+var o=_12.shift();
+if(o&&typeof (o)=="object"&&typeof (o.length)=="number"){
+for(var i=o.length-1;i>=0;i--){
+_12.unshift(o[i]);
 }
+}else{
+res.push(o);
+}
+}
+return res;
+},extend:function(_13,obj,_15){
+if(!_15){
+_15=0;
+}
 if(obj){
 var l=obj.length;
 if(typeof (l)!="number"){
@@ -67,68 +82,68 @@
 throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
 }
 }
-if(!_9){
-_9=[];
+if(!_13){
+_13=[];
 }
-for(var i=_11;i<l;i++){
-_9.push(obj[i]);
+for(var i=_15;i<l;i++){
+_13.push(obj[i]);
 }
 }
-return _9;
-},updatetree:function(_13,obj){
-if(_13==null){
-_13={};
+return _13;
+},updatetree:function(_17,obj){
+if(_17===null){
+_17={};
 }
 for(var i=1;i<arguments.length;i++){
 var o=arguments[i];
-if(typeof (o)!="undefined"&&o!=null){
+if(typeof (o)!="undefined"&&o!==null){
 for(var k in o){
 var v=o[k];
-if(typeof (_13[k])=="object"&&typeof (v)=="object"){
-arguments.callee(_13[k],v);
+if(typeof (_17[k])=="object"&&typeof (v)=="object"){
+arguments.callee(_17[k],v);
 }else{
-_13[k]=v;
+_17[k]=v;
 }
 }
 }
 }
-return _13;
-},setdefault:function(_15,obj){
-if(_15==null){
-_15={};
+return _17;
+},setdefault:function(_19,obj){
+if(_19===null){
+_19={};
 }
 for(var i=1;i<arguments.length;i++){
 var o=arguments[i];
 for(var k in o){
-if(!(k in _15)){
-_15[k]=o[k];
+if(!(k in _19)){
+_19[k]=o[k];
 }
 }
 }
-return _15;
+return _19;
 },keys:function(obj){
-var _16=[];
-for(var _17 in obj){
-_16.push(_17);
+var _20=[];
+for(var _21 in obj){
+_20.push(_21);
 }
-return _16;
+return _20;
 },items:function(obj){
-var _18=[];
+var _22=[];
 var e;
-for(var _20 in obj){
+for(var _24 in obj){
 var v;
 try{
-v=obj[_20];
+v=obj[_24];
 }
 catch(e){
 continue;
 }
-_18.push([_20,v]);
+_22.push([_24,v]);
 }
-return _18;
-},_newNamedError:function(_21,_22,_23){
-_23.prototype=new MochiKit.Base.NamedError(_21.NAME+"."+_22);
-_21[_22]=_23;
+return _22;
+},_newNamedError:function(_25,_26,_27){
+_27.prototype=new MochiKit.Base.NamedError(_25.NAME+"."+_26);
+_25[_26]=_27;
 },operator:{truth:function(a){
 return !!a;
 },lognot:function(a){
@@ -174,9 +189,9 @@
 },le:function(a,b){
 return a<=b;
 },ceq:function(a,b){
-return MochiKit.Base.compare(a,b)==0;
+return MochiKit.Base.compare(a,b)===0;
 },cne:function(a,b){
-return MochiKit.Base.compare(a,b)!=0;
+return MochiKit.Base.compare(a,b)!==0;
 },cgt:function(a,b){
 return MochiKit.Base.compare(a,b)==1;
 },cge:function(a,b){
@@ -191,23 +206,23 @@
 return a||b;
 },contains:function(a,b){
 return b in a;
-}},forward:function(_26){
+}},forwardCall:function(_30){
 return function(){
-return this[_26].apply(this,arguments);
+return this[_30].apply(this,arguments);
 };
-},itemgetter:function(_27){
+},itemgetter:function(_31){
 return function(arg){
-return arg[_27];
+return arg[_31];
 };
 },typeMatcher:function(){
-var _29={};
+var _33={};
 for(var i=0;i<arguments.length;i++){
 var typ=arguments[i];
-_29[typ]=typ;
+_33[typ]=typ;
 }
 return function(){
 for(var i=0;i<arguments.length;i++){
-if(!(typeof (arguments[i]) in _29)){
+if(!(typeof (arguments[i]) in _33)){
 return false;
 }
 }
@@ -223,11 +238,13 @@
 },isUndefinedOrNull:function(){
 for(var i=0;i<arguments.length;i++){
 var o=arguments[i];
-if(!(typeof (o)=="undefined"||o==null)){
+if(!(typeof (o)=="undefined"||o===null)){
 return false;
 }
 }
 return true;
+},isEmpty:function(obj){
+return !MochiKit.Base.isNotEmpty.apply(this,arguments);
 },isNotEmpty:function(obj){
 for(var i=0;i<arguments.length;i++){
 var o=arguments[i];
@@ -240,7 +257,7 @@
 for(var i=0;i<arguments.length;i++){
 var o=arguments[i];
 var typ=typeof (o);
-if((typ!="object"&&!(typ=="function"&&typeof (o.item)=="function"))||o==null||typeof (o.length)!="number"){
+if((typ!="object"&&!(typ=="function"&&typeof (o.item)=="function"))||o===null||typeof (o.length)!="number"){
 return false;
 }
 }
@@ -248,84 +265,85 @@
 },isDateLike:function(){
 for(var i=0;i<arguments.length;i++){
 var o=arguments[i];
-if(typeof (o)!="object"||o==null||typeof (o.getTime)!="function"){
+if(typeof (o)!="object"||o===null||typeof (o.getTime)!="function"){
 return false;
 }
 }
 return true;
 },xmap:function(fn){
-if(fn==null){
+if(fn===null){
 return MochiKit.Base.extend(null,arguments,1);
 }
-var _32=[];
+var _36=[];
 for(var i=1;i<arguments.length;i++){
-_32.push(fn(arguments[i]));
+_36.push(fn(arguments[i]));
 }
-return _32;
+return _36;
 },map:function(fn,lst){
 var m=MochiKit.Base;
-var _35=m.isArrayLike;
+var itr=MochiKit.Iter;
+var _39=m.isArrayLike;
 if(arguments.length<=2){
-if(!_35(lst)){
-if(MochiKit.Iter){
-lst=MochiKit.Iter.list(lst);
-if(fn==null){
+if(!_39(lst)){
+if(itr){
+lst=itr.list(lst);
+if(fn===null){
 return lst;
 }
 }else{
 throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
 }
 }
-if(fn==null){
+if(fn===null){
 return m.extend(null,lst);
 }
-var _36=[];
+var _40=[];
 for(var i=0;i<lst.length;i++){
-_36.push(fn(lst[i]));
+_40.push(fn(lst[i]));
 }
-return _36;
+return _40;
 }else{
-if(fn==null){
+if(fn===null){
 fn=Array;
 }
-var _37=null;
+var _41=null;
 for(i=1;i<arguments.length;i++){
-if(!_35(arguments[i])){
-if(MochiKit.Iter){
-arguments[i]=MochiKit.Iter.list(arguments[i]);
+if(!_39(arguments[i])){
+if(itr){
+return itr.list(itr.imap.apply(null,arguments));
 }else{
 throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
 }
 }
 var l=arguments[i].length;
-if(_37==null||_37>l){
-_37=l;
+if(_41===null||_41>l){
+_41=l;
 }
 }
-_36=[];
-for(i=0;i<_37;i++){
-var _38=[];
+_40=[];
+for(i=0;i<_41;i++){
+var _42=[];
 for(var j=1;j<arguments.length;j++){
-_38.push(arguments[j][i]);
+_42.push(arguments[j][i]);
 }
-_36.push(fn.apply(this,_38));
+_40.push(fn.apply(this,_42));
 }
-return _36;
+return _40;
 }
 },xfilter:function(fn){
-var _40=[];
-if(fn==null){
+var _44=[];
+if(fn===null){
 fn=MochiKit.Base.operator.truth;
 }
 for(var i=1;i<arguments.length;i++){
 var o=arguments[i];
 if(fn(o)){
-_40.push(o);
+_44.push(o);
 }
 }
-return _40;
-},filter:function(fn,lst,_41){
-var _42=[];
+return _44;
+},filter:function(fn,lst,_45){
+var _46=[];
 var m=MochiKit.Base;
 if(!m.isArrayLike(lst)){
 if(MochiKit.Iter){
@@ -334,116 +352,119 @@
 throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
 }
 }
-if(fn==null){
+if(fn===null){
 fn=m.operator.truth;
 }
 if(typeof (Array.prototype.filter)=="function"){
-return Array.prototype.filter.call(lst,fn,_41);
+return Array.prototype.filter.call(lst,fn,_45);
 }else{
-if(typeof (_41)=="undefined"||_41==null){
+if(typeof (_45)=="undefined"||_45===null){
 for(var i=0;i<lst.length;i++){
 var o=lst[i];
 if(fn(o)){
-_42.push(o);
+_46.push(o);
 }
 }
 }else{
 for(i=0;i<lst.length;i++){
 o=lst[i];
-if(fn.call(_41,o)){
-_42.push(o);
+if(fn.call(_45,o)){
+_46.push(o);
 }
 }
 }
 }
-return _42;
-},_wrapDumbFunction:function(_43){
+return _46;
+},_wrapDumbFunction:function(_47){
 return function(){
 switch(arguments.length){
 case 0:
-return _43();
+return _47();
 case 1:
-return _43(arguments[0]);
+return _47(arguments[0]);
 case 2:
-return _43(arguments[0],arguments[1]);
+return _47(arguments[0],arguments[1]);
 case 3:
-return _43(arguments[0],arguments[1],arguments[2]);
+return _47(arguments[0],arguments[1],arguments[2]);
 }
-var _44=[];
+var _48=[];
 for(var i=0;i<arguments.length;i++){
-_44.push("arguments["+i+"]");
+_48.push("arguments["+i+"]");
 }
-return eval("(func("+_44.join(",")+"))");
+return eval("(func("+_48.join(",")+"))");
 };
-},bind:function(_45,_46){
-if(typeof (_45)=="string"){
-_45=_46[_45];
+},method:function(_49,_50){
+var m=MochiKit.Base;
+return m.bind.apply(this,m.extend([_50,_49],arguments,2));
+},bind:function(_51,_52){
+if(typeof (_51)=="string"){
+_51=_52[_51];
 }
-var _47=_45.im_func;
-var _48=_45.im_preargs;
-var _49=_45.im_self;
+var _53=_51.im_func;
+var _54=_51.im_preargs;
+var _55=_51.im_self;
 var m=MochiKit.Base;
-if(typeof (_45)=="function"&&typeof (_45.apply)=="undefined"){
-_45=m._wrapDumbFunction(_45);
+if(typeof (_51)=="function"&&typeof (_51.apply)=="undefined"){
+_51=m._wrapDumbFunction(_51);
 }
-if(typeof (_47)!="function"){
-_47=_45;
+if(typeof (_53)!="function"){
+_53=_51;
 }
-if(typeof (_46)!="undefined"){
-_49=_46;
+if(typeof (_52)!="undefined"){
+_55=_52;
 }
-if(typeof (_48)=="undefined"){
-_48=[];
+if(typeof (_54)=="undefined"){
+_54=[];
 }else{
-_48=_48.slice();
+_54=_54.slice();
 }
-m.extend(_48,arguments,2);
-var _50=function(){
-var _51=arguments;
+m.extend(_54,arguments,2);
+var _56=function(){
+var _57=arguments;
 var me=arguments.callee;
 if(me.im_preargs.length>0){
-_51=m.concat(me.im_preargs,_51);
+_57=m.concat(me.im_preargs,_57);
 }
-var _46=me.im_self;
-if(!_46){
-_46=this;
+var _52=me.im_self;
+if(!_52){
+_52=this;
 }
-return me.im_func.apply(_46,_51);
+return me.im_func.apply(_52,_57);
 };
-_50.im_self=_49;
-_50.im_func=_47;
-_50.im_preargs=_48;
-return _50;
-},bindMethods:function(_52){
-var _53=MochiKit.Base.bind;
-for(var k in _52){
-var _54=_52[k];
-if(typeof (_54)=="function"){
-_52[k]=_53(_54,_52);
+_56.im_self=_55;
+_56.im_func=_53;
+_56.im_preargs=_54;
+return _56;
+},bindMethods:function(_58){
+var _59=MochiKit.Base.bind;
+for(var k in _58){
+var _60=_58[k];
+if(typeof (_60)=="function"){
+_58[k]=_59(_60,_58);
 }
 }
-},registerComparator:function(_55,_56,_57,_58){
-MochiKit.Base.comparatorRegistry.register(_55,_56,_57,_58);
+},registerComparator:function(_61,_62,_63,_64){
+MochiKit.Base.comparatorRegistry.register(_61,_62,_63,_64);
 },_primitives:{"bool":true,"string":true,"number":true},compare:function(a,b){
 if(a==b){
 return 0;
 }
-var _59=(typeof (a)=="undefined"||a==null);
-var _60=(typeof (b)=="undefined"||b==null);
-if(_59&&_60){
+var _65=(typeof (a)=="undefined"||a===null);
+var _66=(typeof (b)=="undefined"||b===null);
+if(_65&&_66){
 return 0;
 }else{
-if(_59){
+if(_65){
 return -1;
 }else{
-if(_60){
+if(_66){
 return 1;
 }
 }
 }
 var m=MochiKit.Base;
-var _61=m._primitives;
-if(!(typeof (a) in _61&&typeof (b) in _61)){
+var _67=m._primitives;
+if(!(typeof (a) in _67&&typeof (b) in _67)){
 try{
 return m.comparatorRegistry.match(a,b);
 }
@@ -460,31 +481,31 @@
 return 1;
 }
 }
-var _62=m.repr;
-throw new TypeError(_62(a)+" and "+_62(b)+" can not be compared");
+var _68=m.repr;
+throw new TypeError(_68(a)+" and "+_68(b)+" can not be compared");
 },compareDateLike:function(a,b){
 return MochiKit.Base.compare(a.getTime(),b.getTime());
 },compareArrayLike:function(a,b){
-var _63=MochiKit.Base.compare;
-var _64=a.length;
-var _65=0;
-if(_64>b.length){
-_65=1;
-_64=b.length;
+var _69=MochiKit.Base.compare;
+var _70=a.length;
+var _71=0;
+if(_70>b.length){
+_71=1;
+_70=b.length;
 }else{
-if(_64<b.length){
-_65=-1;
+if(_70<b.length){
+_71=-1;
 }
 }
-for(var i=0;i<_64;i++){
-var cmp=_63(a[i],b[i]);
+for(var i=0;i<_70;i++){
+var cmp=_69(a[i],b[i]);
 if(cmp){
 return cmp;
 }
 }
-return _65;
-},registerRepr:function(_67,_68,_69,_70){
-MochiKit.Base.reprRegistry.register(_67,_68,_69,_70);
+return _71;
+},registerRepr:function(_73,_74,_75,_76){
+MochiKit.Base.reprRegistry.register(_73,_74,_75,_76);
 },repr:function(o){
 if(typeof (o)=="undefined"){
 return "undefined";
@@ -509,19 +530,19 @@
 }
 }
 try{
-var _71=(o+"");
+var _77=(o+"");
 }
 catch(e){
 return "["+typeof (o)+"]";
 }
 if(typeof (o)=="function"){
-o=_71.replace(/^\s+/,"");
+o=_77.replace(/^\s+/,"");
 var idx=o.indexOf("{");
 if(idx!=-1){
 o=o.substr(0,idx)+"{...}";
 }
 }
-return _71;
+return _77;
 },reprArrayLike:function(o){
 var m=MochiKit.Base;
 return "["+m.map(m.repr,o).join(", ")+"]";
@@ -529,16 +550,16 @@
 return ("\""+o.replace(/(["\\])/g,"\\$1")+"\"").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r");
 },reprNumber:function(o){
 return o+"";
-},registerJSON:function(_73,_74,_75,_76){
-MochiKit.Base.jsonRegistry.register(_73,_74,_75,_76);
+},registerJSON:function(_79,_80,_81,_82){
+MochiKit.Base.jsonRegistry.register(_79,_80,_81,_82);
 },evalJSON:function(){
 return eval("("+arguments[0]+")");
 },serializeJSON:function(o){
-var _77=typeof (o);
-if(_77=="undefined"){
+var _83=typeof (o);
+if(_83=="undefined"){
 return "undefined";
 }else{
-if(_77=="number"||_77=="boolean"){
+if(_83=="number"||_83=="boolean"){
 return o+"";
 }else{
 if(o===null){
@@ -547,25 +568,25 @@
 }
 }
 var m=MochiKit.Base;
-var _78=m.reprString;
-if(_77=="string"){
-return _78(o);
+var _84=m.reprString;
+if(_83=="string"){
+return _84(o);
 }
 var me=arguments.callee;
-var _79;
+var _85;
 if(typeof (o.__json__)=="function"){
-_79=o.__json__();
-if(o!==_79){
-return me(_79);
+_85=o.__json__();
+if(o!==_85){
+return me(_85);
 }
 }
 if(typeof (o.json)=="function"){
-_79=o.json();
-if(o!==_79){
-return me(_79);
+_85=o.json();
+if(o!==_85){
+return me(_85);
 }
 }
-if(_77!="function"&&typeof (o.length)=="number"){
+if(_83!="function"&&typeof (o.length)=="number"){
 var res=[];
 for(var i=0;i<o.length;i++){
 var val=me(o[i]);
@@ -577,25 +598,25 @@
 return "["+res.join(", ")+"]";
 }
 try{
-_79=m.jsonRegistry.match(o);
-return me(_79);
+_85=m.jsonRegistry.match(o);
+return me(_85);
 }
 catch(e){
 if(e!=m.NotFound){
 throw e;
 }
 }
-if(_77=="function"){
+if(_83=="function"){
 return null;
 }
 res=[];
 for(var k in o){
-var _82;
+var _87;
 if(typeof (k)=="number"){
-_82="\""+k+"\"";
+_87="\""+k+"\"";
 }else{
 if(typeof (k)=="string"){
-_82=_78(k);
+_87=_84(k);
 }else{
 continue;
 }
@@ -604,57 +625,57 @@
 if(typeof (val)!="string"){
 continue;
 }
-res.push(_82+":"+val);
+res.push(_87+":"+val);
 }
 return "{"+res.join(", ")+"}";
 },objEqual:function(a,b){
-return (MochiKit.Base.compare(a,b)==0);
-},arrayEqual:function(_83,arr){
-if(_83.length!=arr.length){
+return (MochiKit.Base.compare(a,b)===0);
+},arrayEqual:function(_88,arr){
+if(_88.length!=arr.length){
 return false;
 }
-return (MochiKit.Base.compare(_83,arr)==0);
+return (MochiKit.Base.compare(_88,arr)===0);
 },concat:function(){
-var _85=[];
-var _86=MochiKit.Base.extend;
+var _90=[];
+var _91=MochiKit.Base.extend;
 for(var i=0;i<arguments.length;i++){
-_86(_85,arguments[i]);
+_91(_90,arguments[i]);
 }
-return _85;
+return _90;
 },keyComparator:function(key){
 var m=MochiKit.Base;
-var _88=m.compare;
+var _93=m.compare;
 if(arguments.length==1){
 return function(a,b){
-return _88(a[key],b[key]);
+return _93(a[key],b[key]);
 };
 }
-var _89=m.extend(null,arguments);
+var _94=m.extend(null,arguments);
 return function(a,b){
-var _90=0;
-for(var i=0;(_90==0)&&(i<_89.length);i++){
-var key=_89[i];
-_90=_88(a[key],b[key]);
+var _95=0;
+for(var i=0;(_95===0)&&(i<_94.length);i++){
+var key=_94[i];
+_95=_93(a[key],b[key]);
 }
-return _90;
+return _95;
 };
 },reverseKeyComparator:function(key){
-var _91=MochiKit.Base.keyComparator.apply(this,arguments);
+var _96=MochiKit.Base.keyComparator.apply(this,arguments);
 return function(a,b){
-return _91(b,a);
+return _96(b,a);
 };
-},partial:function(_92){
+},partial:function(_97){
 var m=MochiKit.Base;
-return m.bind.apply(this,m.extend([_92,undefined],arguments,1));
-},listMinMax:function(_93,lst){
-if(lst.length==0){
+return m.bind.apply(this,m.extend([_97,undefined],arguments,1));
+},listMinMax:function(_98,lst){
+if(lst.length===0){
 return null;
 }
 var cur=lst[0];
-var _95=MochiKit.Base.compare;
+var _100=MochiKit.Base.compare;
 for(var i=1;i<lst.length;i++){
 var o=lst[i];
-if(_95(o,cur)==_93){
+if(_100(o,cur)==_98){
 cur=o;
 }
 }
@@ -663,45 +684,45 @@
 return MochiKit.Base.listMinMax(1,arguments);
 },objMin:function(){
 return MochiKit.Base.listMinMax(-1,arguments);
-},findIdentical:function(lst,_96,_97,end){
-if(typeof (end)=="undefined"||end==null){
+},findIdentical:function(lst,_101,_102,end){
+if(typeof (end)=="undefined"||end===null){
 end=lst.length;
 }
-for(var i=(_97||0);i<end;i++){
-if(lst[i]===_96){
+for(var i=(_102||0);i<end;i++){
+if(lst[i]===_101){
 return i;
 }
 }
 return -1;
-},find:function(lst,_99,_100,end){
-if(typeof (end)=="undefined"||end==null){
+},findValue:function(lst,_104,_105,end){
+if(typeof (end)=="undefined"||end===null){
 end=lst.length;
 }
 var cmp=MochiKit.Base.compare;
-for(var i=(_100||0);i<end;i++){
-if(cmp(lst[i],_99)==0){
+for(var i=(_105||0);i<end;i++){
+if(cmp(lst[i],_104)===0){
 return i;
 }
 }
 return -1;
-},nodeWalk:function(node,_102){
-var _103=[node];
-var _104=MochiKit.Base.extend;
-while(_103.length){
-var res=_102(_103.shift());
+},nodeWalk:function(node,_107){
+var _108=[node];
+var _109=MochiKit.Base.extend;
+while(_108.length){
+var res=_107(_108.shift());
 if(res){
-_104(_103,res);
+_109(_108,res);
 }
 }
-},nameFunctions:function(_105){
-var base=_105.NAME;
+},nameFunctions:function(_110){
+var base=_110.NAME;
 if(typeof (base)=="undefined"){
 base="";
 }else{
 base=base+".";
 }
-for(var name in _105){
-var o=_105[name];
+for(var name in _110){
+var o=_110[name];
 if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
 try{
 o.NAME=base+name;
@@ -710,59 +731,59 @@
 }
 }
 }
-},queryString:function(_108,_109){
-if(typeof (MochiKit.DOM)!="undefined"&&arguments.length==1&&(typeof (_108)=="string"||(typeof (_108.nodeType)!="undefined"&&_108.nodeType>0))){
-var kv=MochiKit.DOM.formContents(_108);
-_108=kv[0];
-_109=kv[1];
+},queryString:function(_113,_114){
+if(typeof (MochiKit.DOM)!="undefined"&&arguments.length==1&&(typeof (_113)=="string"||(typeof (_113.nodeType)!="undefined"&&_113.nodeType>0))){
+var kv=MochiKit.DOM.formContents(_113);
+_113=kv[0];
+_114=kv[1];
 }else{
 if(arguments.length==1){
-var o=_108;
-_108=[];
-_109=[];
+var o=_113;
+_113=[];
+_114=[];
 for(var k in o){
 var v=o[k];
 if(typeof (v)!="function"){
-_108.push(k);
-_109.push(v);
+_113.push(k);
+_114.push(v);
 }
 }
 }
 }
 var rval=[];
-var len=Math.min(_108.length,_109.length);
-var _113=MochiKit.Base.urlEncode;
+var len=Math.min(_113.length,_114.length);
+var _118=MochiKit.Base.urlEncode;
 for(var i=0;i<len;i++){
-v=_109[i];
-if(typeof (v)!="undefined"&&v!=null){
-rval.push(_113(_108[i])+"="+_113(v));
+v=_114[i];
+if(typeof (v)!="undefined"&&v!==null){
+rval.push(_118(_113[i])+"="+_118(v));
 }
 }
 return rval.join("&");
-},parseQueryString:function(_114,_115){
-var _116=_114.replace(/\+/g,"%20").split("&");
+},parseQueryString:function(_119,_120){
+var _121=_119.replace(/\+/g,"%20").split("&");
 var o={};
-var _117;
+var _122;
 if(typeof (decodeURIComponent)!="undefined"){
-_117=decodeURIComponent;
+_122=decodeURIComponent;
 }else{
-_117=unescape;
+_122=unescape;
 }
-if(_115){
-for(var i=0;i<_116.length;i++){
-var pair=_116[i].split("=");
-var name=_117(pair[0]);
+if(_120){
+for(var i=0;i<_121.length;i++){
+var pair=_121[i].split("=");
+var name=_122(pair[0]);
 var arr=o[name];
 if(!(arr instanceof Array)){
 arr=[];
 o[name]=arr;
 }
-arr.push(_117(pair[1]));
+arr.push(_122(pair[1]));
 }
 }else{
-for(i=0;i<_116.length;i++){
-pair=_116[i].split("=");
-o[_117(pair[0])]=_117(pair[1]);
+for(i=0;i<_121.length;i++){
+pair=_121[i].split("=");
+o[_122(pair[0])]=_122(pair[1]);
 }
 }
 return o;
@@ -770,11 +791,11 @@
 MochiKit.Base.AdapterRegistry=function(){
 this.pairs=[];
 };
-MochiKit.Base.AdapterRegistry.prototype={register:function(name,_119,wrap,_121){
-if(_121){
-this.pairs.unshift([name,_119,wrap]);
+MochiKit.Base.AdapterRegistry.prototype={register:function(name,_124,wrap,_126){
+if(_126){
+this.pairs.unshift([name,_124,wrap]);
 }else{
-this.pairs.push([name,_119,wrap]);
+this.pairs.push([name,_124,wrap]);
 }
 },match:function(){
 for(var i=0;i<this.pairs.length;i++){
@@ -794,29 +815,31 @@
 }
 return false;
 }};
-MochiKit.Base.EXPORT=["counter","clone","extend","update","updatetree","setdefault","keys","items","NamedError","operator","forward","itemgetter","typeMatcher","isCallable","isUndefined","isUndefinedOrNull","isNull","isNotEmpty","isArrayLike","isDateLike","xmap","map","xfilter","filter","bind","bindMethods","NotFound","AdapterRegistry","registerComparator","compare","registerRepr","repr","objEqual","arrayEqual","concat","keyComparator","reverseKeyComparator","partial","merge","listMinMax","listMax","listMin","objMax","objMin","nodeWalk","zip","urlEncode","queryString","serializeJSON","registerJSON","evalJSON","parseQueryString","find","findIdentical"];
+MochiKit.Base.EXPORT=["counter","clone","extend","update","updatetree","setdefault","keys","items","NamedError","operator","forwardCall","itemgetter","typeMatcher","isCallable","isUndefined","isUndefinedOrNull","isNull","isEmpty","isNotEmpty","isArrayLike","isDateLike","xmap","map","xfilter","filter","bind","bindMethods","NotFound","AdapterRegistry","registerComparator","compare","registerRepr","repr","objEqual","arrayEqual","concat","keyComparator","reverseKeyComparator","partial","merge","listMinMax","listMax","listMin","objMax","objMin","nodeWalk","zip","urlEncode","queryString","serializeJSON","registerJSON","evalJSON","parseQueryString","findValue","findIdentical","flattenArguments","method"];
 MochiKit.Base.EXPORT_OK=["nameFunctions","comparatorRegistry","reprRegistry","jsonRegistry","compareDateLike","compareArrayLike","reprArrayLike","reprString","reprNumber"];
-MochiKit.Base._exportSymbols=function(_122,_123){
+MochiKit.Base._exportSymbols=function(_127,_128){
 if(typeof (MochiKit.__export__)=="undefined"){
 MochiKit.__export__=(MochiKit.__compat__||(typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined"));
 }
 if(!MochiKit.__export__){
 return;
 }
-var all=_123.EXPORT_TAGS[":all"];
+var all=_128.EXPORT_TAGS[":all"];
 for(var i=0;i<all.length;i++){
-_122[all[i]]=_123[all[i]];
+_127[all[i]]=_128[all[i]];
 }
 };
 MochiKit.Base.__new__=function(){
 var m=this;
+m.forward=m.forwardCall;
+m.find=m.findValue;
 if(typeof (encodeURIComponent)!="undefined"){
-m.urlEncode=function(_125){
-return encodeURIComponent(_125).replace(/\'/g,"%27");
+m.urlEncode=function(_130){
+return encodeURIComponent(_130).replace(/\'/g,"%27");
 };
 }else{
-m.urlEncode=function(_126){
-return escape(_126).replace(/\+/g,"%2B").replace(/\"/g,"%22").rval.replace(/\'/g,"%27");
+m.urlEncode=function(_131){
+return escape(_131).replace(/\+/g,"%2B").replace(/\"/g,"%22").rval.replace(/\'/g,"%27");
 };
 }
 m.NamedError=function(name){
@@ -830,7 +853,7 @@
 }else{
 return this.name+"()";
 }
-},toString:m.forward("repr")});
+},toString:m.forwardCall("repr")});
 m.NotFound=new m.NamedError("MochiKit.Base.NotFound");
 m.listMax=m.partial(m.listMinMax,1);
 m.listMin=m.partial(m.listMinMax,-1);
@@ -851,7 +874,9 @@
 m.nameFunctions(this);
 };
 MochiKit.Base.__new__();
+if(!MochiKit.__compat__){
 compare=MochiKit.Base.compare;
+}
 MochiKit.Base._exportSymbols(this,MochiKit.Base);
 if(typeof (dojo)!="undefined"){
 dojo.provide("MochiKit.Iter");
@@ -872,34 +897,34 @@
 MochiKit.Iter={};
 }
 MochiKit.Iter.NAME="MochiKit.Iter";
-MochiKit.Iter.VERSION="1.3";
+MochiKit.Iter.VERSION="1.3.1";
 MochiKit.Base.update(MochiKit.Iter,{__repr__:function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 },toString:function(){
 return this.__repr__();
-},registerIteratorFactory:function(name,_127,_128,_129){
-MochiKit.Iter.iteratorRegistry.register(name,_127,_128,_129);
-},iter:function(_130,_131){
+},registerIteratorFactory:function(name,_132,_133,_134){
+MochiKit.Iter.iteratorRegistry.register(name,_132,_133,_134);
+},iter:function(_135,_136){
 var self=MochiKit.Iter;
 if(arguments.length==2){
 return self.takewhile(function(a){
-return a!=_131;
-},_130);
+return a!=_136;
+},_135);
 }
-if(typeof (_130.next)=="function"){
-return _130;
+if(typeof (_135.next)=="function"){
+return _135;
 }else{
-if(typeof (_130.iter)=="function"){
-return _130.iter();
+if(typeof (_135.iter)=="function"){
+return _135.iter();
 }
 }
 try{
-return self.iteratorRegistry.match(_130);
+return self.iteratorRegistry.match(_135);
 }
 catch(e){
 var m=MochiKit.Base;
 if(e==m.NotFound){
-e=new TypeError(typeof (_130)+": "+m.repr(_130)+" is not iterable");
+e=new TypeError(typeof (_135)+": "+m.repr(_135)+" is not iterable");
 }
 throw e;
 }
@@ -910,17 +935,17 @@
 var m=MochiKit.Base;
 return {repr:function(){
 return "count("+n+")";
-},toString:m.forward("repr"),next:m.counter(n)};
+},toString:m.forwardCall("repr"),next:m.counter(n)};
 },cycle:function(p){
 var self=MochiKit.Iter;
 var m=MochiKit.Base;
 var lst=[];
-var _134=self.iter(p);
+var _139=self.iter(p);
 return {repr:function(){
 return "cycle(...)";
-},toString:m.forward("repr"),next:function(){
+},toString:m.forwardCall("repr"),next:function(){
 try{
-var rval=_134.next();
+var rval=_139.next();
 lst.push(rval);
 return rval;
 }
@@ -928,7 +953,7 @@
 if(e!=self.StopIteration){
 throw e;
 }
-if(lst.length==0){
+if(lst.length===0){
 this.next=function(){
 throw self.StopIteration;
 };
@@ -947,39 +972,39 @@
 if(typeof (n)=="undefined"){
 return {repr:function(){
 return "repeat("+m.repr(elem)+")";
-},toString:m.forward("repr"),next:function(){
+},toString:m.forwardCall("repr"),next:function(){
 return elem;
 }};
 }
 return {repr:function(){
 return "repeat("+m.repr(elem)+", "+n+")";
-},toString:m.forward("repr"),next:function(){
+},toString:m.forwardCall("repr"),next:function(){
 if(n<=0){
 throw MochiKit.Iter.StopIteration;
 }
 n-=1;
 return elem;
 }};
-},next:function(_136){
-return _136.next();
+},next:function(_141){
+return _141.next();
 },izip:function(p,q){
 var m=MochiKit.Base;
 var next=MochiKit.Iter.next;
-var _139=m.map(iter,arguments);
+var _144=m.map(iter,arguments);
 return {repr:function(){
 return "izip(...)";
-},toString:m.forward("repr"),next:function(){
-return m.map(next,_139);
+},toString:m.forwardCall("repr"),next:function(){
+return m.map(next,_144);
 }};
 },ifilter:function(pred,seq){
 var m=MochiKit.Base;
 seq=MochiKit.Iter.iter(seq);
-if(pred==null){
+if(pred===null){
 pred=m.operator.truth;
 }
 return {repr:function(){
 return "ifilter(...)";
-},toString:m.forward("repr"),next:function(){
+},toString:m.forwardCall("repr"),next:function(){
 while(true){
 var rval=seq.next();
 if(pred(rval)){
@@ -991,12 +1016,12 @@
 },ifilterfalse:function(pred,seq){
 var m=MochiKit.Base;
 seq=MochiKit.Iter.iter(seq);
-if(pred==null){
+if(pred===null){
 pred=m.operator.truth;
 }
 return {repr:function(){
 return "ifilterfalse(...)";
-},toString:m.forward("repr"),next:function(){
+},toString:m.forwardCall("repr"),next:function(){
 while(true){
 var rval=seq.next();
 if(!pred(rval)){
@@ -1009,7 +1034,7 @@
 var self=MochiKit.Iter;
 var m=MochiKit.Base;
 seq=self.iter(seq);
-var _142=0;
+var _147=0;
 var stop=0;
 var step=1;
 var i=-1;
@@ -1017,45 +1042,45 @@
 stop=arguments[1];
 }else{
 if(arguments.length==3){
-_142=arguments[1];
+_147=arguments[1];
 stop=arguments[2];
 }else{
-_142=arguments[1];
+_147=arguments[1];
 stop=arguments[2];
 step=arguments[3];
 }
 }
 return {repr:function(){
-return "islice("+["...",_142,stop,step].join(", ")+")";
-},toString:m.forward("repr"),next:function(){
+return "islice("+["...",_147,stop,step].join(", ")+")";
+},toString:m.forwardCall("repr"),next:function(){
 var rval;
-while(i<_142){
+while(i<_147){
 rval=seq.next();
 i++;
 }
-if(_142>=stop){
+if(_147>=stop){
 throw self.StopIteration;
 }
-_142+=step;
+_147+=step;
 return rval;
 }};
 },imap:function(fun,p,q){
 var m=MochiKit.Base;
 var self=MochiKit.Iter;
-var _146=m.map(self.iter,m.extend(null,arguments,1));
+var _151=m.map(self.iter,m.extend(null,arguments,1));
 var map=m.map;
 var next=self.next;
 return {repr:function(){
 return "imap(...)";
-},toString:m.forward("repr"),next:function(){
-return fun.apply(this,map(next,_146));
+},toString:m.forwardCall("repr"),next:function(){
+return fun.apply(this,map(next,_151));
 }};
 },applymap:function(fun,seq,self){
 seq=MochiKit.Iter.iter(seq);
 var m=MochiKit.Base;
 return {repr:function(){
 return "applymap(...)";
-},toString:m.forward("repr"),next:function(){
+},toString:m.forwardCall("repr"),next:function(){
 return fun.apply(self,seq.next());
 }};
 },chain:function(p,q){
@@ -1064,23 +1089,23 @@
 if(arguments.length==1){
 return self.iter(arguments[0]);
 }
-var _148=m.map(self.iter,arguments);
+var _153=m.map(self.iter,arguments);
 return {repr:function(){
 return "chain(...)";
-},toString:m.forward("repr"),next:function(){
-while(_148.length>1){
+},toString:m.forwardCall("repr"),next:function(){
+while(_153.length>1){
 try{
-return _148[0].next();
+return _153[0].next();
 }
 catch(e){
 if(e!=self.StopIteration){
 throw e;
 }
-_148.shift();
+_153.shift();
 }
 }
-if(_148.length==1){
-var arg=_148.shift();
+if(_153.length==1){
+var arg=_153.shift();
 this.next=m.bind("next",arg);
 return this.next();
 }
@@ -1091,7 +1116,7 @@
 seq=self.iter(seq);
 return {repr:function(){
 return "takewhile(...)";
-},toString:MochiKit.Base.forward("repr"),next:function(){
+},toString:MochiKit.Base.forwardCall("repr"),next:function(){
 var rval=seq.next();
 if(!pred(rval)){
 this.next=function(){
@@ -1107,7 +1132,7 @@
 var bind=m.bind;
 return {"repr":function(){
 return "dropwhile(...)";
-},"toString":m.forward("repr"),"next":function(){
+},"toString":m.forwardCall("repr"),"next":function(){
 while(true){
 var rval=seq.next();
 if(!pred(rval)){
@@ -1117,58 +1142,58 @@
 this.next=bind("next",seq);
 return rval;
 }};
-},_tee:function(_150,sync,_152){
-sync.pos[_150]=-1;
+},_tee:function(_155,sync,_157){
+sync.pos[_155]=-1;
 var m=MochiKit.Base;
-var _153=m.listMin;
+var _158=m.listMin;
 return {repr:function(){
-return "tee("+_150+", ...)";
-},toString:m.forward("repr"),next:function(){
+return "tee("+_155+", ...)";
+},toString:m.forwardCall("repr"),next:function(){
 var rval;
-var i=sync.pos[_150];
+var i=sync.pos[_155];
 if(i==sync.max){
-rval=_152.next();
+rval=_157.next();
 sync.deque.push(rval);
 sync.max+=1;
-sync.pos[_150]+=1;
+sync.pos[_155]+=1;
 }else{
 rval=sync.deque[i-sync.min];
-sync.pos[_150]+=1;
-if(i==sync.min&&_153(sync.pos)!=sync.min){
+sync.pos[_155]+=1;
+if(i==sync.min&&_158(sync.pos)!=sync.min){
 sync.min+=1;
 sync.deque.shift();
 }
 }
 return rval;
 }};
-},tee:function(_154,n){
+},tee:function(_159,n){
 var rval=[];
 var sync={"pos":[],"deque":[],"max":-1,"min":-1};
 if(arguments.length==1){
 n=2;
 }
 var self=MochiKit.Iter;
-_154=self.iter(_154);
+_159=self.iter(_159);
 var _tee=self._tee;
 for(var i=0;i<n;i++){
-rval.push(_tee(i,sync,_154));
+rval.push(_tee(i,sync,_159));
 }
 return rval;
-},list:function(_156){
+},list:function(_161){
 var m=MochiKit.Base;
-if(typeof (_156.slice)=="function"){
-return _156.slice();
+if(typeof (_161.slice)=="function"){
+return _161.slice();
 }else{
-if(m.isArrayLike(_156)){
-return m.concat(_156);
+if(m.isArrayLike(_161)){
+return m.concat(_161);
 }
 }
 var self=MochiKit.Iter;
-_156=self.iter(_156);
+_161=self.iter(_161);
 var rval=[];
 try{
 while(true){
-rval.push(_156.next());
+rval.push(_161.next());
 }
 }
 catch(e){
@@ -1178,14 +1203,14 @@
 return rval;
 }
 return undefined;
-},reduce:function(fn,_157,_158){
+},reduce:function(fn,_162,_163){
 var i=0;
-var x=_158;
+var x=_163;
 var self=MochiKit.Iter;
-_157=self.iter(_157);
+_162=self.iter(_162);
 if(arguments.length<3){
 try{
-x=_157.next();
+x=_162.next();
 }
 catch(e){
 if(e==self.StopIteration){
@@ -1197,7 +1222,7 @@
 }
 try{
 while(true){
-x=fn(x,_157.next());
+x=fn(x,_162.next());
 }
 }
 catch(e){
@@ -1207,18 +1232,18 @@
 }
 return x;
 },range:function(){
-var _160=0;
+var _165=0;
 var stop=0;
 var step=1;
 if(arguments.length==1){
 stop=arguments[0];
 }else{
 if(arguments.length==2){
-_160=arguments[0];
+_165=arguments[0];
 stop=arguments[1];
 }else{
 if(arguments.length==3){
-_160=arguments[0];
+_165=arguments[0];
 stop=arguments[1];
 step=arguments[2];
 }else{
@@ -1226,26 +1251,26 @@
 }
 }
 }
-if(step==0){
+if(step===0){
 throw new TypeError("range() step must not be 0");
 }
 return {next:function(){
-if((step>0&&_160>=stop)||(step<0&&_160<=stop)){
+if((step>0&&_165>=stop)||(step<0&&_165<=stop)){
 throw MochiKit.Iter.StopIteration;
 }
-var rval=_160;
-_160+=step;
+var rval=_165;
+_165+=step;
 return rval;
 },repr:function(){
-return "range("+[_160,stop,step].join(", ")+")";
-},toString:MochiKit.Base.forward("repr")};
-},sum:function(_161,_162){
-var x=_162||0;
+return "range("+[_165,stop,step].join(", ")+")";
+},toString:MochiKit.Base.forwardCall("repr")};
+},sum:function(_166,_167){
+var x=_167||0;
 var self=MochiKit.Iter;
-_161=self.iter(_161);
+_166=self.iter(_166);
 try{
 while(true){
-x+=_161.next();
+x+=_166.next();
 }
 }
 catch(e){
@@ -1254,12 +1279,12 @@
 }
 }
 return x;
-},exhaust:function(_163){
+},exhaust:function(_168){
 var self=MochiKit.Iter;
-_163=self.iter(_163);
+_168=self.iter(_168);
 try{
 while(true){
-_163.next();
+_168.next();
 }
 }
 catch(e){
@@ -1267,15 +1292,15 @@
 throw e;
 }
 }
-},forEach:function(_164,func,self){
+},forEach:function(_169,func,self){
 var m=MochiKit.Base;
 if(arguments.length>2){
 func=m.bind(func,self);
 }
-if(m.isArrayLike(_164)){
+if(m.isArrayLike(_169)){
 try{
-for(var i=0;i<_164.length;i++){
-func(_164[i]);
+for(var i=0;i<_169.length;i++){
+func(_169[i]);
 }
 }
 catch(e){
@@ -1285,12 +1310,12 @@
 }
 }else{
 self=MochiKit.Iter;
-self.exhaust(self.imap(func,_164));
+self.exhaust(self.imap(func,_169));
 }
-},every:function(_166,func){
+},every:function(_171,func){
 var self=MochiKit.Iter;
 try{
-self.ifilterfalse(func,_166).next();
+self.ifilterfalse(func,_171).next();
 return false;
 }
 catch(e){
@@ -1299,21 +1324,21 @@
 }
 return true;
 }
-},sorted:function(_167,cmp){
-var rval=MochiKit.Iter.list(_167);
+},sorted:function(_172,cmp){
+var rval=MochiKit.Iter.list(_172);
 if(arguments.length==1){
 cmp=MochiKit.Base.compare;
 }
 rval.sort(cmp);
 return rval;
-},reversed:function(_168){
-var rval=MochiKit.Iter.list(_168);
+},reversed:function(_173){
+var rval=MochiKit.Iter.list(_173);
 rval.reverse();
 return rval;
-},some:function(_169,func){
+},some:function(_174,func){
 var self=MochiKit.Iter;
 try{
-self.ifilter(func,_169).next();
+self.ifilter(func,_174).next();
 return true;
 }
 catch(e){
@@ -1322,17 +1347,17 @@
 }
 return false;
 }
-},iextend:function(lst,_170){
-if(MochiKit.Base.isArrayLike(_170)){
-for(var i=0;i<_170.length;i++){
-lst.push(_170[i]);
+},iextend:function(lst,_175){
+if(MochiKit.Base.isArrayLike(_175)){
+for(var i=0;i<_175.length;i++){
+lst.push(_175[i]);
 }
 }else{
 var self=MochiKit.Iter;
-_170=self.iter(_170);
+_175=self.iter(_175);
 try{
 while(true){
-lst.push(_170.next());
+lst.push(_175.next());
 }
 }
 catch(e){
@@ -1342,33 +1367,33 @@
 }
 }
 return lst;
-},groupby:function(_171,_172){
+},groupby:function(_176,_177){
 var m=MochiKit.Base;
 var self=MochiKit.Iter;
 if(arguments.length<2){
-_172=m.operator.identity;
+_177=m.operator.identity;
 }
-_171=self.iter(_171);
+_176=self.iter(_176);
 var pk=undefined;
 var k=undefined;
 var v;
 function fetch(){
-v=_171.next();
-k=_172(v);
+v=_176.next();
+k=_177(v);
 }
 function eat(){
 var ret=v;
 v=undefined;
 return ret;
 }
-var _175=true;
+var _180=true;
 return {repr:function(){
 return "groupby(...)";
 },next:function(){
 while(k==pk){
 fetch();
-if(_175){
-_175=false;
+if(_180){
+_180=false;
 break;
 }
 }
@@ -1383,20 +1408,20 @@
 return eat();
 }}];
 }};
-},groupby_as_array:function(_176,_177){
+},groupby_as_array:function(_181,_182){
 var m=MochiKit.Base;
 var self=MochiKit.Iter;
 if(arguments.length<2){
-_177=m.operator.identity;
+_182=m.operator.identity;
 }
-_176=self.iter(_176);
-var _178=[];
-var _179=true;
-var _180;
+_181=self.iter(_181);
+var _183=[];
+var _184=true;
+var _185;
 while(true){
 try{
-var _181=_176.next();
-var key=_177(_181);
+var _186=_181.next();
+var key=_182(_186);
 }
 catch(e){
 if(e==self.StopIteration){
@@ -1404,32 +1429,32 @@
 }
 throw e;
 }
-if(_179||key!=_180){
-var _182=[];
-_178.push([key,_182]);
+if(_184||key!=_185){
+var _187=[];
+_183.push([key,_187]);
 }
-_182.push(_181);
-_179=false;
-_180=key;
+_187.push(_186);
+_184=false;
+_185=key;
 }
-return _178;
-},arrayLikeIter:function(_183){
+return _183;
+},arrayLikeIter:function(_188){
 var i=0;
 return {repr:function(){
 return "arrayLikeIter(...)";
-},toString:MochiKit.Base.forward("repr"),next:function(){
-if(i>=_183.length){
+},toString:MochiKit.Base.forwardCall("repr"),next:function(){
+if(i>=_188.length){
 throw MochiKit.Iter.StopIteration;
 }
-return _183[i++];
+return _188[i++];
 }};
-},hasIterateNext:function(_184){
-return (_184&&typeof (_184.iterateNext)=="function");
-},iterateNextIter:function(_185){
+},hasIterateNext:function(_189){
+return (_189&&typeof (_189.iterateNext)=="function");
+},iterateNextIter:function(_190){
 return {repr:function(){
 return "iterateNextIter(...)";
-},toString:MochiKit.Base.forward("repr"),next:function(){
-var rval=_185.iterateNext();
+},toString:MochiKit.Base.forwardCall("repr"),next:function(){
+var rval=_190.iterateNext();
 if(rval===null||rval===undefined){
 throw MochiKit.Iter.StopIteration;
 }
@@ -1448,7 +1473,9 @@
 m.nameFunctions(this);
 };
 MochiKit.Iter.__new__();
+if(!MochiKit.__compat__){
 reduce=MochiKit.Iter.reduce;
+}
 MochiKit.Base._exportSymbols(this,MochiKit.Iter);
 if(typeof (dojo)!="undefined"){
 dojo.provide("MochiKit.Logging");
@@ -1469,7 +1496,7 @@
 MochiKit.Logging={};
 }
 MochiKit.Logging.NAME="MochiKit.Logging";
-MochiKit.Logging.VERSION="1.3";
+MochiKit.Logging.VERSION="1.3.1";
 MochiKit.Logging.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
@@ -1478,32 +1505,32 @@
 };
 MochiKit.Logging.EXPORT=["LogLevel","LogMessage","Logger","alertListener","logger","log","logError","logDebug","logFatal","logWarning"];
 MochiKit.Logging.EXPORT_OK=["logLevelAtLeast","isLogMessage","compareLogMessage"];
-MochiKit.Logging.LogMessage=function(num,_187,info){
+MochiKit.Logging.LogMessage=function(num,_192,info){
 this.num=num;
-this.level=_187;
+this.level=_192;
 this.info=info;
 this.timestamp=new Date();
 };
 MochiKit.Logging.LogMessage.prototype={repr:function(){
 var m=MochiKit.Base;
 return "LogMessage("+m.map(m.repr,[this.num,this.level,this.info]).join(", ")+")";
-},toString:MochiKit.Base.forward("repr")};
-MochiKit.Base.update(MochiKit.Logging,{logLevelAtLeast:function(_189){
+},toString:MochiKit.Base.forwardCall("repr")};
+MochiKit.Base.update(MochiKit.Logging,{logLevelAtLeast:function(_194){
 var self=MochiKit.Logging;
-if(typeof (_189)=="string"){
-_189=self.LogLevel[_189];
+if(typeof (_194)=="string"){
+_194=self.LogLevel[_194];
 }
 return function(msg){
-var _191=msg.level;
-if(typeof (_191)=="string"){
-_191=self.LogLevel[_191];
+var _196=msg.level;
+if(typeof (_196)=="string"){
+_196=self.LogLevel[_196];
 }
-return _191>=_189;
+return _196>=_194;
 };
 },isLogMessage:function(){
-var _192=MochiKit.Logging.LogMessage;
+var _197=MochiKit.Logging.LogMessage;
 for(var i=0;i<arguments.length;i++){
-if(!(arguments[i] instanceof _192)){
+if(!(arguments[i] instanceof _197)){
 return false;
 }
 }
@@ -1513,17 +1540,30 @@
 },alertListener:function(msg){
 alert("num: "+msg.num+"\nlevel: "+msg.level+"\ninfo: "+msg.info.join(" "));
 }});
-MochiKit.Logging.Logger=function(_193){
+MochiKit.Logging.Logger=function(_198){
 this.counter=0;
-if(typeof (_193)=="undefined"||_193==null){
-_193=-1;
+if(typeof (_198)=="undefined"||_198===null){
+_198=-1;
 }
-this.maxSize=_193;
+this.maxSize=_198;
 this._messages=[];
 this.listeners={};
+this.useNativeConsole=false;
 };
 MochiKit.Logging.Logger.prototype={clear:function(){
 this._messages.splice(0,this._messages.length);
+},logToConsole:function(msg){
+if(typeof (window)!="undefined"&&window.console&&window.console.log){
+window.console.log(msg);
+}else{
+if(typeof (opera)!="undefined"&&opera.postError){
+opera.postError(msg);
+}else{
+if(typeof (printfire)=="function"){
+printfire(msg);
+}
+}
+}
 },dispatchListeners:function(msg){
 for(var k in this.listeners){
 var pair=this.listeners[k];
@@ -1532,72 +1572,84 @@
 }
 pair[1](msg);
 }
-},addListener:function(_194,_195,_196){
-if(typeof (_195)=="string"){
-_195=MochiKit.Logging.logLevelAtLeast(_195);
+},addListener:function(_199,_200,_201){
+if(typeof (_200)=="string"){
+_200=MochiKit.Logging.logLevelAtLeast(_200);
 }
-var _197=[_195,_196];
-_197.ident=_194;
-this.listeners[_194]=_197;
-},removeListener:function(_198){
-delete this.listeners[_198];
-},baseLog:function(_199,_200){
-var msg=new MochiKit.Logging.LogMessage(this.counter,_199,MochiKit.Base.extend(null,arguments,1));
+var _202=[_200,_201];
+_202.ident=_199;
+this.listeners[_199]=_202;
+},removeListener:function(_203){
+delete this.listeners[_203];
+},baseLog:function(_204,_205){
+var msg=new MochiKit.Logging.LogMessage(this.counter,_204,MochiKit.Base.extend(null,arguments,1));
 this._messages.push(msg);
 this.dispatchListeners(msg);
+if(this.useNativeConsole){
+this.logToConsole(msg.level+": "+msg.info.join(" "));
+}
 this.counter+=1;
 while(this.maxSize>=0&&this._messages.length>this.maxSize){
 this._messages.shift();
 }
-},getMessages:function(_201){
-var _202=0;
-if(!(typeof (_201)=="undefined"||_201==null)){
-_202=Math.max(0,this._messages.length-_201);
+},getMessages:function(_206){
+var _207=0;
+if(!(typeof (_206)=="undefined"||_206===null)){
+_207=Math.max(0,this._messages.length-_206);
 }
-return this._messages.slice(_202);
-},getMessageText:function(_203){
-if(typeof (_203)=="undefined"||_203==null){
-_203=30;
+return this._messages.slice(_207);
+},getMessageText:function(_208){
+if(typeof (_208)=="undefined"||_208===null){
+_208=30;
 }
-var _204=this.getMessages(_203);
-if(_204.length){
+var _209=this.getMessages(_208);
+if(_209.length){
 var lst=map(function(m){
 return "\n  ["+m.num+"] "+m.level+": "+m.info.join(" ");
-},_204);
-lst.unshift("LAST "+_204.length+" MESSAGES:");
+},_209);
+lst.unshift("LAST "+_209.length+" MESSAGES:");
 return lst.join("");
 }
 return "";
-},debuggingBookmarklet:function(_205){
+},debuggingBookmarklet:function(_210){
 if(typeof (MochiKit.LoggingPane)=="undefined"){
 alert(this.getMessageText());
 }else{
-MochiKit.LoggingPane.createLoggingPane(_205||false);
+MochiKit.LoggingPane.createLoggingPane(_210||false);
 }
 }};
 MochiKit.Logging.__new__=function(){
 this.LogLevel={ERROR:40,FATAL:50,WARNING:30,INFO:20,DEBUG:10};
 var m=MochiKit.Base;
 m.registerComparator("LogMessage",this.isLogMessage,this.compareLogMessage);
-var _206=m.partial;
-var _207=this.Logger;
-var _208=_207.prototype.baseLog;
-m.update(this.Logger.prototype,{debug:_206(_208,"DEBUG"),log:_206(_208,"INFO"),error:_206(_208,"ERROR"),fatal:_206(_208,"FATAL"),warning:_206(_208,"WARNING")});
+var _211=m.partial;
+var _212=this.Logger;
+var _213=_212.prototype.baseLog;
+m.update(this.Logger.prototype,{debug:_211(_213,"DEBUG"),log:_211(_213,"INFO"),error:_211(_213,"ERROR"),fatal:_211(_213,"FATAL"),warning:_211(_213,"WARNING")});
 var self=this;
-var _209=function(name){
+var _214=function(name){
 return function(){
 self.logger[name].apply(self.logger,arguments);
 };
 };
-this.log=_209("log");
-this.logError=_209("error");
-this.logDebug=_209("debug");
-this.logFatal=_209("fatal");
-this.logWarning=_209("warning");
-this.logger=new _207();
+this.log=_214("log");
+this.logError=_214("error");
+this.logDebug=_214("debug");
+this.logFatal=_214("fatal");
+this.logWarning=_214("warning");
+this.logger=new _212();
+this.logger.useNativeConsole=true;
 this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
 m.nameFunctions(this);
 };
+if(typeof (printfire)=="undefined"&&typeof (document)!="undefined"&&document.createEvent&&typeof (dispatchEvent)!="undefined"){
+printfire=function(){
+printfire.args=arguments;
+var ev=document.createEvent("Events");
+ev.initEvent("printfire",false,true);
+dispatchEvent(ev);
+};
+}
 MochiKit.Logging.__new__();
 MochiKit.Base._exportSymbols(this,MochiKit.Logging);
 if(typeof (dojo)!="undefined"){
@@ -1610,7 +1662,7 @@
 MochiKit.DateTime={};
 }
 MochiKit.DateTime.NAME="MochiKit.DateTime";
-MochiKit.DateTime.VERSION="1.3";
+MochiKit.DateTime.VERSION="1.3.1";
 MochiKit.DateTime.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
@@ -1619,11 +1671,11 @@
 };
 MochiKit.DateTime.isoDate=function(str){
 str=str+"";
-if(typeof (str)!="string"||str.length==0){
+if(typeof (str)!="string"||str.length===0){
 return null;
 }
 var iso=str.split("-");
-if(iso.length==0){
+if(iso.length===0){
 return null;
 }
 return new Date(iso[0],iso[1]-1,iso[2]);
@@ -1631,38 +1683,38 @@
 MochiKit.DateTime._isoRegexp=/(\d{4,})(?:-(\d{1,2})(?:-(\d{1,2})(?:[T ](\d{1,2}):(\d{1,2})(?::(\d{1,2})(?:\.(\d+))?)?(?:(Z)|([+-])(\d{1,2})(?::(\d{1,2}))?)?)?)?)?/;
 MochiKit.DateTime.isoTimestamp=function(str){
 str=str+"";
-if(typeof (str)!="string"||str.length==0){
+if(typeof (str)!="string"||str.length===0){
 return null;
 }
 var res=str.match(MochiKit.DateTime._isoRegexp);
-if(typeof (res)=="undefined"||res==null){
+if(typeof (res)=="undefined"||res===null){
 return null;
 }
 var year,month,day,hour,min,sec,msec;
 year=parseInt(res[1],10);
-if(typeof (res[2])=="undefined"||res[2]==""){
+if(typeof (res[2])=="undefined"||res[2]===""){
 return new Date(year);
 }
 month=parseInt(res[2],10)-1;
 day=parseInt(res[3],10);
-if(typeof (res[4])=="undefined"||res[4]==""){
+if(typeof (res[4])=="undefined"||res[4]===""){
 return new Date(year,month,day);
 }
 hour=parseInt(res[4],10);
 min=parseInt(res[5],10);
-sec=(typeof (res[6])!="undefined"&&res[6]!="")?parseInt(res[6],10):0;
-if(typeof (res[7])!="undefined"&&res[7]!=""){
+sec=(typeof (res[6])!="undefined"&&res[6]!=="")?parseInt(res[6],10):0;
+if(typeof (res[7])!="undefined"&&res[7]!==""){
 msec=Math.round(1000*parseFloat("0."+res[7]));
 }else{
 msec=0;
 }
-if((typeof (res[8])=="undefined"||res[8]=="")&&(typeof (res[9])=="undefined"||res[9]=="")){
+if((typeof (res[8])=="undefined"||res[8]==="")&&(typeof (res[9])=="undefined"||res[9]==="")){
 return new Date(year,month,day,hour,min,sec,msec);
 }
 var ofs;
-if(typeof (res[9])!="undefined"&&res[9]!=""){
+if(typeof (res[9])!="undefined"&&res[9]!==""){
 ofs=parseInt(res[10],10)*3600000;
-if(typeof (res[11])!="undefined"&&res[11]!=""){
+if(typeof (res[11])!="undefined"&&res[11]!==""){
 ofs+=parseInt(res[11],10)*60000;
 }
 if(res[9]=="-"){
@@ -1673,37 +1725,37 @@
 }
 return new Date(Date.UTC(year,month,day,hour,min,sec,msec)-ofs);
 };
-MochiKit.DateTime.toISOTime=function(date,_215){
-if(typeof (date)=="undefined"||date==null){
+MochiKit.DateTime.toISOTime=function(date,_221){
+if(typeof (date)=="undefined"||date===null){
 return null;
 }
 var hh=date.getHours();
 var mm=date.getMinutes();
 var ss=date.getSeconds();
-var lst=[((_215&&(hh<10))?"0"+hh:hh),((mm<10)?"0"+mm:mm),((ss<10)?"0"+ss:ss)];
+var lst=[((_221&&(hh<10))?"0"+hh:hh),((mm<10)?"0"+mm:mm),((ss<10)?"0"+ss:ss)];
 return lst.join(":");
 };
-MochiKit.DateTime.toISOTimestamp=function(date,_219){
-if(typeof (date)=="undefined"||date==null){
+MochiKit.DateTime.toISOTimestamp=function(date,_225){
+if(typeof (date)=="undefined"||date===null){
 return null;
 }
-var sep=_219?"T":" ";
-var foot=_219?"Z":"";
-if(_219){
+var sep=_225?"T":" ";
+var foot=_225?"Z":"";
+if(_225){
 date=new Date(date.getTime()+(date.getTimezoneOffset()*60000));
 }
-return MochiKit.DateTime.toISODate(date)+sep+MochiKit.DateTime.toISOTime(date,_219)+foot;
+return MochiKit.DateTime.toISODate(date)+sep+MochiKit.DateTime.toISOTime(date,_225)+foot;
 };
 MochiKit.DateTime.toISODate=function(date){
-if(typeof (date)=="undefined"||date==null){
+if(typeof (date)=="undefined"||date===null){
 return null;
 }
-var _222=MochiKit.DateTime._padTwo;
-return [date.getFullYear(),_222(date.getMonth()+1),_222(date.getDate())].join("-");
+var _228=MochiKit.DateTime._padTwo;
+return [date.getFullYear(),_228(date.getMonth()+1),_228(date.getDate())].join("-");
 };
 MochiKit.DateTime.americanDate=function(d){
 d=d+"";
-if(typeof (d)!="string"||d.length==0){
+if(typeof (d)!="string"||d.length===0){
 return null;
 }
 var a=d.split("/");
@@ -1713,14 +1765,14 @@
 return (n>9)?n:"0"+n;
 };
 MochiKit.DateTime.toPaddedAmericanDate=function(d){
-if(typeof (d)=="undefined"||d==null){
+if(typeof (d)=="undefined"||d===null){
 return null;
 }
-var _224=MochiKit.DateTime._padTwo;
-return [_224(d.getMonth()+1),_224(d.getDate()),d.getFullYear()].join("/");
+var _230=MochiKit.DateTime._padTwo;
+return [_230(d.getMonth()+1),_230(d.getDate()),d.getFullYear()].join("/");
 };
 MochiKit.DateTime.toAmericanDate=function(d){
-if(typeof (d)=="undefined"||d==null){
+if(typeof (d)=="undefined"||d===null){
 return null;
 }
 return [d.getMonth()+1,d.getDate(),d.getFullYear()].join("/");
@@ -1745,11 +1797,11 @@
 if(typeof (MochiKit.Base)!="undefined"){
 MochiKit.Base._exportSymbols(this,MochiKit.DateTime);
 }else{
-(function(_225,_226){
+(function(_231,_232){
 if((typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined")||(typeof (MochiKit.__compat__)=="boolean"&&MochiKit.__compat__)){
-var all=_226.EXPORT_TAGS[":all"];
+var all=_232.EXPORT_TAGS[":all"];
 for(var i=0;i<all.length;i++){
-_225[all[i]]=_226[all[i]];
+_231[all[i]]=_232[all[i]];
 }
 }
 })(this,MochiKit.DateTime);
@@ -1764,87 +1816,87 @@
 MochiKit.Format={};
 }
 MochiKit.Format.NAME="MochiKit.Format";
-MochiKit.Format.VERSION="1.3";
+MochiKit.Format.VERSION="1.3.1";
 MochiKit.Format.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
 MochiKit.Format.toString=function(){
 return this.__repr__();
 };
-MochiKit.Format._numberFormatter=function(_227,_228,_229,_230,_231,_232,_233,_234,_235){
+MochiKit.Format._numberFormatter=function(_233,_234,_235,_236,_237,_238,_239,_240,_241){
 return function(num){
 num=parseFloat(num);
-if(typeof (num)=="undefined"||num==null||isNaN(num)){
-return _227;
+if(typeof (num)=="undefined"||num===null||isNaN(num)){
+return _233;
 }
-var _236=_228;
-var _237=_229;
+var _242=_234;
+var _243=_235;
 if(num<0){
 num=-num;
 }else{
-_236=_236.replace(/-/,"");
+_242=_242.replace(/-/,"");
 }
 var me=arguments.callee;
-var fmt=MochiKit.Format.formatLocale(_230);
-if(_231){
+var fmt=MochiKit.Format.formatLocale(_236);
+if(_237){
 num=num*100;
-_237=fmt.percent+_237;
+_243=fmt.percent+_243;
 }
-num=MochiKit.Format.roundToFixed(num,_232);
-var _239=num.split(/\./);
-var _240=_239[0];
-var frac=(_239.length==1)?"":_239[1];
+num=MochiKit.Format.roundToFixed(num,_238);
+var _245=num.split(/\./);
+var _246=_245[0];
+var frac=(_245.length==1)?"":_245[1];
 var res="";
-while(_240.length<_233){
-_240="0"+_240;
+while(_246.length<_239){
+_246="0"+_246;
 }
-if(_234){
-while(_240.length>_234){
-var i=_240.length-_234;
-res=fmt.separator+_240.substring(i,_240.length)+res;
-_240=_240.substring(0,i);
+if(_240){
+while(_246.length>_240){
+var i=_246.length-_240;
+res=fmt.separator+_246.substring(i,_246.length)+res;
+_246=_246.substring(0,i);
 }
 }
-res=_240+res;
-if(_232>0){
-while(frac.length<_235){
+res=_246+res;
+if(_238>0){
+while(frac.length<_241){
 frac=frac+"0";
 }
 res=res+fmt.decimal+frac;
 }
-return _236+res+_237;
+return _242+res+_243;
 };
 };
-MochiKit.Format.numberFormatter=function(_242,_243,_244){
-if(typeof (_243)=="undefined"){
-_243="";
+MochiKit.Format.numberFormatter=function(_248,_249,_250){
+if(typeof (_249)=="undefined"){
+_249="";
 }
-var _245=_242.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);
-if(!_245){
+var _251=_248.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);
+if(!_251){
 throw TypeError("Invalid pattern");
 }
-var _246=_242.substr(0,_245.index);
-var _247=_242.substr(_245.index+_245[0].length);
-if(_246.search(/-/)==-1){
-_246=_246+"-";
+var _252=_248.substr(0,_251.index);
+var _253=_248.substr(_251.index+_251[0].length);
+if(_252.search(/-/)==-1){
+_252=_252+"-";
 }
-var _248=_245[1];
-var frac=(typeof (_245[2])=="string"&&_245[2]!="")?_245[2]:"";
-var _249=(typeof (_245[3])=="string"&&_245[3]!="");
-var tmp=_248.split(/,/);
-var _251;
-if(typeof (_244)=="undefined"){
-_244="default";
+var _254=_251[1];
+var frac=(typeof (_251[2])=="string"&&_251[2]!="")?_251[2]:"";
+var _255=(typeof (_251[3])=="string"&&_251[3]!="");
+var tmp=_254.split(/,/);
+var _257;
+if(typeof (_250)=="undefined"){
+_250="default";
 }
 if(tmp.length==1){
-_251=null;
+_257=null;
 }else{
-_251=tmp[1].length;
+_257=tmp[1].length;
 }
-var _252=_248.length-_248.replace(/0/g,"").length;
-var _253=frac.length-frac.replace(/0/g,"").length;
-var _254=frac.length;
-var rval=MochiKit.Format._numberFormatter(_243,_246,_247,_244,_249,_254,_252,_251,_253);
+var _258=_254.length-_254.replace(/0/g,"").length;
+var _259=frac.length-frac.replace(/0/g,"").length;
+var _260=frac.length;
+var rval=MochiKit.Format._numberFormatter(_249,_252,_253,_250,_255,_260,_258,_257,_259);
 var m=MochiKit.Base;
 if(m){
 var fn=arguments.callee;
@@ -1855,33 +1907,33 @@
 }
 return rval;
 };
-MochiKit.Format.formatLocale=function(_256){
-if(typeof (_256)=="undefined"||_256==null){
-_256="default";
+MochiKit.Format.formatLocale=function(_262){
+if(typeof (_262)=="undefined"||_262===null){
+_262="default";
 }
-if(typeof (_256)=="string"){
-var rval=MochiKit.Format.LOCALE[_256];
+if(typeof (_262)=="string"){
+var rval=MochiKit.Format.LOCALE[_262];
 if(typeof (rval)=="string"){
 rval=arguments.callee(rval);
-MochiKit.Format.LOCALE[_256]=rval;
+MochiKit.Format.LOCALE[_262]=rval;
 }
 return rval;
 }else{
-return _256;
+return _262;
 }
 };
-MochiKit.Format.twoDigitAverage=function(_257,_258){
-if(_258){
-var res=_257/_258;
+MochiKit.Format.twoDigitAverage=function(_263,_264){
+if(_264){
+var res=_263/_264;
 if(!isNaN(res)){
-return MochiKit.Format.twoDigitFloat(_257/_258);
+return MochiKit.Format.twoDigitFloat(_263/_264);
 }
 }
 return "0";
 };
-MochiKit.Format.twoDigitFloat=function(_259){
-var sign=(_259<0?"-":"");
-var s=Math.floor(Math.abs(_259)*100).toString();
+MochiKit.Format.twoDigitFloat=function(_265){
+var sign=(_265<0?"-":"");
+var s=Math.floor(Math.abs(_265)*100).toString();
 if(s=="0"){
 return s;
 }
@@ -1903,45 +1955,45 @@
 }
 }
 };
-MochiKit.Format.lstrip=function(str,_264){
+MochiKit.Format.lstrip=function(str,_270){
 str=str+"";
 if(typeof (str)!="string"){
 return null;
 }
-if(!_264){
+if(!_270){
 return str.replace(/^\s+/,"");
 }else{
-return str.replace(new RegExp("^["+_264+"]+"),"");
+return str.replace(new RegExp("^["+_270+"]+"),"");
 }
 };
-MochiKit.Format.rstrip=function(str,_265){
+MochiKit.Format.rstrip=function(str,_271){
 str=str+"";
 if(typeof (str)!="string"){
 return null;
 }
-if(!_265){
+if(!_271){
 return str.replace(/\s+$/,"");
 }else{
-return str.replace(new RegExp("["+_265+"]+$"),"");
+return str.replace(new RegExp("["+_271+"]+$"),"");
 }
 };
-MochiKit.Format.strip=function(str,_266){
+MochiKit.Format.strip=function(str,_272){
 var self=MochiKit.Format;
-return self.rstrip(self.lstrip(str,_266),_266);
+return self.rstrip(self.lstrip(str,_272),_272);
 };
-MochiKit.Format.truncToFixed=function(_267,_268){
-_267=Math.floor(_267*Math.pow(10,_268));
-var res=(_267*Math.pow(10,-_268)).toFixed(_268);
+MochiKit.Format.truncToFixed=function(_273,_274){
+_273=Math.floor(_273*Math.pow(10,_274));
+var res=(_273*Math.pow(10,-_274)).toFixed(_274);
 if(res.charAt(0)=="."){
 res="0"+res;
 }
 return res;
 };
-MochiKit.Format.roundToFixed=function(_269,_270){
-return MochiKit.Format.truncToFixed(_269+0.5*Math.pow(10,-_270),_270);
+MochiKit.Format.roundToFixed=function(_275,_276){
+return MochiKit.Format.truncToFixed(_275+0.5*Math.pow(10,-_276),_276);
 };
-MochiKit.Format.percentFormat=function(_271){
-return MochiKit.Format.twoDigitFloat(100*_271)+"%";
+MochiKit.Format.percentFormat=function(_277){
+return MochiKit.Format.twoDigitFloat(100*_277)+"%";
 };
 MochiKit.Format.EXPORT=["truncToFixed","roundToFixed","numberFormatter","formatLocale","twoDigitAverage","twoDigitFloat","percentFormat","lstrip","rstrip","strip"];
 MochiKit.Format.LOCALE={en_US:{separator:",",decimal:".",percent:"%"},de_DE:{separator:".",decimal:",",percent:"%"},fr_FR:{separator:" ",decimal:",",percent:"%"},"default":"en_US"};
@@ -1974,11 +2026,11 @@
 if(typeof (MochiKit.Base)!="undefined"){
 MochiKit.Base._exportSymbols(this,MochiKit.Format);
 }else{
-(function(_272,_273){
+(function(_278,_279){
 if((typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined")||(typeof (MochiKit.__compat__)=="boolean"&&MochiKit.__compat__)){
-var all=_273.EXPORT_TAGS[":all"];
+var all=_279.EXPORT_TAGS[":all"];
 for(var i=0;i<all.length;i++){
-_272[all[i]]=_273[all[i]];
+_278[all[i]]=_279[all[i]];
 }
 }
 })(this,MochiKit.Format);
@@ -2002,35 +2054,36 @@
 MochiKit.Async={};
 }
 MochiKit.Async.NAME="MochiKit.Async";
-MochiKit.Async.VERSION="1.3";
+MochiKit.Async.VERSION="1.3.1";
 MochiKit.Async.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
 MochiKit.Async.toString=function(){
 return this.__repr__();
 };
-MochiKit.Async.Deferred=function(_274){
+MochiKit.Async.Deferred=function(_280){
 this.chain=[];
 this.id=this._nextId();
 this.fired=-1;
 this.paused=0;
 this.results=[null,null];
-this.canceller=_274;
+this.canceller=_280;
 this.silentlyCancelled=false;
+this.chained=false;
 };
 MochiKit.Async.Deferred.prototype={repr:function(){
-var _275;
+var _281;
 if(this.fired==-1){
-_275="unfired";
+_281="unfired";
 }else{
-if(this.fired==0){
-_275="success";
+if(this.fired===0){
+_281="success";
 }else{
-_275="error";
+_281="error";
 }
 }
-return "Deferred("+this.id+", "+_275+")";
-},toString:MochiKit.Base.forward("repr"),_nextId:MochiKit.Base.counter(),cancel:function(){
+return "Deferred("+this.id+", "+_281+")";
+},toString:MochiKit.Base.forwardCall("repr"),_nextId:MochiKit.Base.counter(),cancel:function(){
 var self=MochiKit.Async;
 if(this.fired==-1){
 if(this.canceller){
@@ -2042,7 +2095,7 @@
 this.errback(new self.CancelledError(this));
 }
 }else{
-if((this.fired==0)&&(this.results[0] instanceof self.Deferred)){
+if((this.fired===0)&&(this.results[0] instanceof self.Deferred)){
 this.results[0].cancel();
 }
 }
@@ -2050,7 +2103,7 @@
 this.paused++;
 },_unpause:function(){
 this.paused--;
-if((this.paused==0)&&(this.fired>=0)){
+if((this.paused===0)&&(this.fired>=0)){
 this._fire();
 }
 },_continue:function(res){
@@ -2070,11 +2123,18 @@
 }
 },callback:function(res){
 this._check();
+if(res instanceof MochiKit.Async.Deferred){
+throw new Error("Deferred instances can only be chained if they are the result of a callback");
+}
 this._resback(res);
 },errback:function(res){
 this._check();
+var self=MochiKit.Async;
+if(res instanceof self.Deferred){
+throw new Error("Deferred instances can only be chained if they are the result of a callback");
+}
 if(!(res instanceof Error)){
-res=new MochiKit.Async.GenericError(res);
+res=new self.GenericError(res);
 }
 this._resback(res);
 },addBoth:function(fn){
@@ -2093,26 +2153,29 @@
 }
 return this.addCallbacks(null,fn);
 },addCallbacks:function(cb,eb){
+if(this.chained){
+throw new Error("Chained Deferreds can not be re-used");
+}
 this.chain.push([cb,eb]);
 if(this.fired>=0){
 this._fire();
 }
 return this;
 },_fire:function(){
-var _278=this.chain;
-var _279=this.fired;
-var res=this.results[_279];
+var _284=this.chain;
+var _285=this.fired;
+var res=this.results[_285];
 var self=this;
 var cb=null;
-while(_278.length>0&&this.paused==0){
-var pair=_278.shift();
-var f=pair[_279];
-if(f==null){
+while(_284.length>0&&this.paused===0){
+var pair=_284.shift();
+var f=pair[_285];
+if(f===null){
 continue;
 }
 try{
 res=f(res);
-_279=((res instanceof Error)?1:0);
+_285=((res instanceof Error)?1:0);
 if(res instanceof MochiKit.Async.Deferred){
 cb=function(res){
 self._continue(res);
@@ -2121,33 +2184,34 @@
 }
 }
 catch(err){
-_279=1;
+_285=1;
 if(!(err instanceof Error)){
 err=new MochiKit.Async.GenericError(err);
 }
 res=err;
 }
 }
-this.fired=_279;
-this.results[_279]=res;
+this.fired=_285;
+this.results[_285]=res;
 if(cb&&this.paused){
 res.addBoth(cb);
+res.chained=true;
 }
 }};
 MochiKit.Base.update(MochiKit.Async,{evalJSONRequest:function(){
 return eval("("+arguments[0].responseText+")");
-},succeed:function(_281){
+},succeed:function(_287){
 var d=new MochiKit.Async.Deferred();
 d.callback.apply(d,arguments);
 return d;
-},fail:function(_282){
+},fail:function(_288){
 var d=new MochiKit.Async.Deferred();
 d.errback.apply(d,arguments);
 return d;
 },getXMLHttpRequest:function(){
 var self=arguments.callee;
 if(!self.XMLHttpRequest){
-var _283=[function(){
+var _289=[function(){
 return new XMLHttpRequest();
 },function(){
 return new ActiveXObject("Msxml2.XMLHTTP");
@@ -2158,8 +2222,8 @@
 },function(){
 throw new MochiKit.Async.BrowserComplianceError("Browser does not support XMLHttpRequest");
 }];
-for(var i=0;i<_283.length;i++){
-var func=_283[i];
+for(var i=0;i<_289.length;i++){
+var func=_289[i];
 try{
 self.XMLHttpRequest=func;
 return func();
@@ -2169,52 +2233,32 @@
 }
 }
 return self.XMLHttpRequest();
-},sendXMLHttpRequest:function(req,_285){
-if(typeof (_285)=="undefined"){
-_285="";
-}
-var _286=function(){
+},_nothing:function(){
+},_xhr_onreadystatechange:function(d){
+if(this.readyState==4){
 try{
-req.onreadystatechange=null;
+this.onreadystatechange=null;
 }
 catch(e){
 try{
-req.onreadystatechange=function(){
-};
+this.onreadystatechange=MochiKit.Async._nothing;
 }
 catch(e){
 }
 }
-req.abort();
-};
-var self=MochiKit.Async;
-var d=new self.Deferred(_286);
-var _287=function(){
-if(req.readyState==4){
+var _290=null;
 try{
-req.onreadystatechange=null;
+_290=this.status;
+if(!_290&&MochiKit.Base.isNotEmpty(this.responseText)){
+_290=304;
 }
-catch(e){
-try{
-req.onreadystatechange=function(){
-};
 }
 catch(e){
 }
-}
-var _288=null;
-try{
-_288=req.status;
-if(!_288&&MochiKit.Base.isNotEmpty(req.responseText)){
-_288=304;
-}
-}
-catch(e){
-}
-if(_288==200||_288==304){
-d.callback(req);
+if(_290==200||_290==304){
+d.callback(this);
 }else{
-var err=new self.XMLHttpRequestError(req,"Request failed");
+var err=new MochiKit.Async.XMLHttpRequestError(this,"Request failed");
 if(err.number){
 d.errback(err);
 }else{
@@ -2222,13 +2266,31 @@
 }
 }
 }
-};
+},_xhr_canceller:function(req){
 try{
-req.onreadystatechange=_287;
-req.send(_285);
+req.onreadystatechange=null;
 }
 catch(e){
 try{
+req.onreadystatechange=MochiKit.Async._nothing;
+}
+catch(e){
+}
+}
+req.abort();
+},sendXMLHttpRequest:function(req,_293){
+if(typeof (_293)=="undefined"||_293===null){
+_293="";
+}
+var m=MochiKit.Base;
+var self=MochiKit.Async;
+var d=new self.Deferred(m.partial(self._xhr_canceller,req));
+try{
+req.onreadystatechange=m.bind(self._xhr_onreadystatechange,req,d);
+req.send(_293);
+}
+catch(e){
+try{
 req.onreadystatechange=null;
 }
 catch(ignore){
@@ -2253,28 +2315,28 @@
 var d=self.doSimpleXMLHttpRequest.apply(self,arguments);
 d=d.addCallback(self.evalJSONRequest);
 return d;
-},wait:function(_292,_293){
+},wait:function(_296,_297){
 var d=new MochiKit.Async.Deferred();
 var m=MochiKit.Base;
-if(typeof (_293)!="undefined"){
+if(typeof (_297)!="undefined"){
 d.addCallback(function(){
-return _293;
+return _297;
 });
 }
-var _294=setTimeout(m.bind("callback",d),Math.floor(_292*1000));
+var _298=setTimeout(m.bind("callback",d),Math.floor(_296*1000));
 d.canceller=function(){
 try{
-clearTimeout(_294);
+clearTimeout(_298);
 }
 catch(e){
 }
 };
 return d;
-},callLater:function(_295,func){
+},callLater:function(_299,func){
 var m=MochiKit.Base;
-var _296=m.partial.apply(m,m.extend(null,arguments,1));
-return MochiKit.Async.wait(_295).addCallback(function(res){
-return _296();
+var _300=m.partial.apply(m,m.extend(null,arguments,1));
+return MochiKit.Async.wait(_299).addCallback(function(res){
+return _300();
 });
 }});
 MochiKit.Async.DeferredLock=function(){
@@ -2301,24 +2363,101 @@
 this.waiting.shift().callback(this);
 }
 },_nextId:MochiKit.Base.counter(),repr:function(){
-var _297;
+var _301;
 if(this.locked){
-_297="locked, "+this.waiting.length+" waiting";
+_301="locked, "+this.waiting.length+" waiting";
 }else{
-_297="unlocked";
+_301="unlocked";
 }
-return "DeferredLock("+this.id+", "+_297+")";
-},toString:MochiKit.Base.forward("repr")};
-MochiKit.Async.EXPORT=["AlreadyCalledError","CancelledError","BrowserComplianceError","GenericError","XMLHttpRequestError","Deferred","succeed","fail","getXMLHttpRequest","doSimpleXMLHttpRequest","loadJSONDoc","wait","callLater","sendXMLHttpRequest","DeferredLock"];
+return "DeferredLock("+this.id+", "+_301+")";
+},toString:MochiKit.Base.forwardCall("repr")};
+MochiKit.Async.DeferredList=function(list,_303,_304,_305,_306){
+this.list=list;
+this.resultList=new Array(this.list.length);
+this.chain=[];
+this.id=this._nextId();
+this.fired=-1;
+this.paused=0;
+this.results=[null,null];
+this.canceller=_306;
+this.silentlyCancelled=false;
+if(this.list.length===0&&!_303){
+this.callback(this.resultList);
+}
+this.finishedCount=0;
+this.fireOnOneCallback=_303;
+this.fireOnOneErrback=_304;
+this.consumeErrors=_305;
+var _307=0;
+MochiKit.Base.map(MochiKit.Base.bind(function(d){
+d.addCallback(MochiKit.Base.bind(this._cbDeferred,this),_307,true);
+d.addErrback(MochiKit.Base.bind(this._cbDeferred,this),_307,false);
+_307+=1;
+},this),this.list);
+};
+MochiKit.Base.update(MochiKit.Async.DeferredList.prototype,MochiKit.Async.Deferred.prototype);
+MochiKit.Base.update(MochiKit.Async.DeferredList.prototype,{_cbDeferred:function(_308,_309,_310){
+this.resultList[_308]=[_309,_310];
+this.finishedCount+=1;
+if(this.fired!==0){
+if(_309&&this.fireOnOneCallback){
+this.callback([_308,_310]);
+}else{
+if(!_309&&this.fireOnOneErrback){
+this.errback(_310);
+}else{
+if(this.finishedCount==this.list.length){
+this.callback(this.resultList);
+}
+}
+}
+}
+if(!_309&&this.consumeErrors){
+_310=null;
+}
+return _310;
+}});
+MochiKit.Async.gatherResults=function(_311){
+var d=new MochiKit.Async.DeferredList(_311,false,true,false);
+d.addCallback(function(_312){
+var ret=[];
+for(var i=0;i<_312.length;i++){
+ret.push(_312[i][1]);
+}
+return ret;
+});
+return d;
+};
+MochiKit.Async.maybeDeferred=function(func){
+var self=MochiKit.Async;
+var _313;
+try{
+var r=func.apply(null,MochiKit.Base.extend([],arguments,1));
+if(r instanceof self.Deferred){
+_313=r;
+}else{
+if(r instanceof Error){
+_313=self.fail(r);
+}else{
+_313=self.succeed(r);
+}
+}
+}
+catch(e){
+_313=self.fail(e);
+}
+return _313;
+};
+MochiKit.Async.EXPORT=["AlreadyCalledError","CancelledError","BrowserComplianceError","GenericError","XMLHttpRequestError","Deferred","succeed","fail","getXMLHttpRequest","doSimpleXMLHttpRequest","loadJSONDoc","wait","callLater","sendXMLHttpRequest","DeferredLock","DeferredList","gatherResults","maybeDeferred"];
 MochiKit.Async.EXPORT_OK=["evalJSONRequest"];
 MochiKit.Async.__new__=function(){
 var m=MochiKit.Base;
 var ne=m.partial(m._newNamedError,this);
-ne("AlreadyCalledError",function(_299){
-this.deferred=_299;
+ne("AlreadyCalledError",function(_316){
+this.deferred=_316;
 });
-ne("CancelledError",function(_300){
-this.deferred=_300;
+ne("CancelledError",function(_317){
+this.deferred=_317;
 });
 ne("BrowserComplianceError",function(msg){
 this.message=msg;
@@ -2359,7 +2498,7 @@
 MochiKit.DOM={};
 }
 MochiKit.DOM.NAME="MochiKit.DOM";
-MochiKit.DOM.VERSION="1.3";
+MochiKit.DOM.VERSION="1.3.1";
 MochiKit.DOM.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
@@ -2384,6 +2523,9 @@
 var repr=MochiKit.Base.repr;
 return "{x: "+repr(this.x)+", y: "+repr(this.y)+"}";
 };
+MochiKit.DOM.Coordinates.prototype.toString=function(){
+return this.repr();
+};
 MochiKit.Base.update(MochiKit.DOM,{setOpacity:function(elem,o){
 elem=MochiKit.DOM.getElement(elem);
 MochiKit.DOM.updateNodeAttributes(elem,{"style":{"opacity":o,"-moz-opacity":o,"-khtml-opacity":o,"filter":" alpha(opacity="+(o*100)+")"}});
@@ -2419,39 +2561,42 @@
 return new self.Dimensions(elem.offsetWidth||0,elem.offsetHeight||0);
 }
 var s=elem.style;
-var _305=s.visibility;
-var _306=s.position;
+var _322=s.visibility;
+var _323=s.position;
 s.visibility="hidden";
 s.position="absolute";
 s.display="";
-var _307=elem.offsetWidth;
-var _308=elem.offsetHeight;
+var _324=elem.offsetWidth;
+var _325=elem.offsetHeight;
 s.display="none";
-s.position=_306;
-s.visibility=_305;
-return new self.Dimensions(_307,_308);
-},elementPosition:function(elem,_309){
+s.position=_323;
+s.visibility=_322;
+return new self.Dimensions(_324,_325);
+},elementPosition:function(elem,_326){
 var self=MochiKit.DOM;
 elem=self.getElement(elem);
-if(!elem||elem.parentNode===null||self.computedStyle(elem,"display")=="none"){
+if(!elem){
 return undefined;
 }
 var c=new self.Coordinates(0,0);
+if(elem.x&&elem.y){
+c.x+=elem.x||0;
+c.y+=elem.y||0;
+return c;
+}else{
+if(elem.parentNode===null||self.computedStyle(elem,"display")=="none"){
+return undefined;
+}
+}
 var box=null;
-var _312=null;
+var _329=null;
 var d=MochiKit.DOM._document;
-if(typeof (_309)!="undefined"){
-_309=arguments.callee(_309);
-if(_309){
-c.x-=(_309.x||0);
-c.y-=(_309.y||0);
-}
-}
+var de=d.documentElement;
+var b=d.body;
 if(elem.getBoundingClientRect){
 box=elem.getBoundingClientRect();
-c.x+=box.left+(d.documentElement.scrollLeft||d.body.scrollLeft);
-c.y+=box.top+(d.documentElement.scrollTop||d.body.scrollTop);
-return c;
+c.x+=box.left+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||b.clientLeft);
+c.y+=box.top+(de.scrollTop||b.scrollTop)-(de.clientTop||b.clientTop);
 }else{
 if(d.getBoxObjectFor){
 box=d.getBoxObjectFor(elem);
@@ -2461,60 +2606,64 @@
 if(elem.offsetParent){
 c.x+=elem.offsetLeft;
 c.y+=elem.offsetTop;
-_312=elem.offsetParent;
-if(_312!=elem){
-while(_312){
-c.x+=_312.offsetLeft;
-c.y+=_312.offsetTop;
-_312=_312.offsetParent;
+_329=elem.offsetParent;
+if(_329!=elem){
+while(_329){
+c.x+=_329.offsetLeft;
+c.y+=_329.offsetTop;
+_329=_329.offsetParent;
 }
 }
 var ua=navigator.userAgent.toLowerCase();
-if(ua.indexOf("opera")!=-1||(ua.indexOf("safari")!=-1&&self.computedStyle(elem,"position")=="absolute")){
-c.y-=d.body.offsetTop;
+if((typeof (opera)!="undefined"&&parseFloat(opera.version())<9)||(ua.indexOf("safari")!=-1&&self.computedStyle(elem,"position")=="absolute")){
+c.x-=b.offsetLeft;
+c.y-=b.offsetTop;
 }
-}else{
-c.x+=elem.x||0;
-c.y+=elem.y||0;
-return c;
 }
 }
 }
+if(typeof (_326)!="undefined"){
+_326=arguments.callee(_326);
+if(_326){
+c.x-=(_326.x||0);
+c.y-=(_326.y||0);
+}
+}
 if(elem.parentNode){
-_312=elem.parentNode;
+_329=elem.parentNode;
 }else{
-_312=null;
+_329=null;
 }
-while(_312&&_312.tagName!="BODY"&&_312.tagName!="HTML"){
-c.x-=_312.scrollLeft;
-c.y-=_312.scrollTop;
-if(_312.parentNode){
-_312=_312.parentNode;
+while(_329&&_329.tagName!="BODY"&&_329.tagName!="HTML"){
+c.x-=_329.scrollLeft;
+c.y-=_329.scrollTop;
+if(_329.parentNode){
+_329=_329.parentNode;
 }else{
-_312=null;
+_329=null;
 }
 }
 return c;
-},setElementDimensions:function(elem,_314,_315){
+},setElementDimensions:function(elem,_332,_333){
 elem=MochiKit.DOM.getElement(elem);
-if(typeof (_315)=="undefined"){
-_315="px";
+if(typeof (_333)=="undefined"){
+_333="px";
 }
-MochiKit.DOM.updateNodeAttributes(elem,{"style":{"width":_314.w+_315,"height":_314.h+_315}});
-},setElementPosition:function(elem,_316,_317){
+MochiKit.DOM.updateNodeAttributes(elem,{"style":{"width":_332.w+_333,"height":_332.h+_333}});
+},setElementPosition:function(elem,_334,_335){
 elem=MochiKit.DOM.getElement(elem);
-if(typeof (_317)=="undefined"){
-_317="px";
+if(typeof (_335)=="undefined"){
+_335="px";
 }
-MochiKit.DOM.updateNodeAttributes(elem,{"style":{"left":_316.x+_317,"top":_316.y+_317}});
+MochiKit.DOM.updateNodeAttributes(elem,{"style":{"left":_334.x+_335,"top":_334.y+_335}});
 },currentWindow:function(){
 return MochiKit.DOM._window;
 },currentDocument:function(){
 return MochiKit.DOM._document;
 },withWindow:function(win,func){
 var self=MochiKit.DOM;
-var _319=self._document;
-var _320=self._win;
+var _337=self._document;
+var _338=self._win;
 var rval;
 try{
 self._window=win;
@@ -2522,16 +2671,16 @@
 rval=func();
 }
 catch(e){
-self._window=_320;
-self._document=_319;
+self._window=_338;
+self._document=_337;
 throw e;
 }
-self._window=_320;
-self._document=_319;
+self._window=_338;
+self._document=_337;
 return rval;
 },formContents:function(elem){
-var _321=[];
-var _322=[];
+var _339=[];
+var _340=[];
 var m=MochiKit.Base;
 var self=MochiKit.DOM;
 if(typeof (elem)=="undefined"||elem===null){
@@ -2542,56 +2691,56 @@
 m.nodeWalk(elem,function(elem){
 var name=elem.name;
 if(m.isNotEmpty(name)){
-var _323=elem.nodeName;
-if(_323=="INPUT"&&(elem.type=="radio"||elem.type=="checkbox")&&!elem.checked){
+var _341=elem.nodeName;
+if(_341=="INPUT"&&(elem.type=="radio"||elem.type=="checkbox")&&!elem.checked){
 return null;
 }
-if(_323=="SELECT"){
+if(_341=="SELECT"){
 if(elem.selectedIndex>=0){
 var opt=elem.options[elem.selectedIndex];
-_321.push(name);
-_322.push((opt.value)?opt.value:opt.text);
+_339.push(name);
+_340.push((opt.value)?opt.value:opt.text);
 return null;
 }
-_321.push(name);
-_322.push("");
+_339.push(name);
+_340.push("");
 return null;
 }
-if(_323=="FORM"||_323=="P"||_323=="SPAN"||_323=="DIV"){
+if(_341=="FORM"||_341=="P"||_341=="SPAN"||_341=="DIV"){
 return elem.childNodes;
 }
-_321.push(name);
-_322.push(elem.value||"");
+_339.push(name);
+_340.push(elem.value||"");
 return null;
 }
 return elem.childNodes;
 });
-return [_321,_322];
+return [_339,_340];
 },withDocument:function(doc,func){
 var self=MochiKit.DOM;
-var _326=self._document;
+var _344=self._document;
 var rval;
 try{
 self._document=doc;
 rval=func();
 }
 catch(e){
-self._document=_326;
+self._document=_344;
 throw e;
 }
-self._document=_326;
+self._document=_344;
 return rval;
-},registerDOMConverter:function(name,_327,wrap,_328){
-MochiKit.DOM.domConverters.register(name,_327,wrap,_328);
+},registerDOMConverter:function(name,_345,wrap,_346){
+MochiKit.DOM.domConverters.register(name,_345,wrap,_346);
 },coerceToDOM:function(node,ctx){
 var im=MochiKit.Iter;
 var self=MochiKit.DOM;
 var iter=im.iter;
-var _332=im.repeat;
+var _350=im.repeat;
 var imap=im.imap;
-var _334=self.domConverters;
-var _335=self.coerceToDOM;
-var _336=MochiKit.Base.NotFound;
+var _352=self.domConverters;
+var _353=self.coerceToDOM;
+var _354=MochiKit.Base.NotFound;
 while(true){
 if(typeof (node)=="undefined"||node===null){
 return null;
@@ -2613,30 +2762,30 @@
 node=node(ctx);
 continue;
 }
-var _337=null;
+var _355=null;
 try{
-_337=iter(node);
+_355=iter(node);
 }
 catch(e){
 }
-if(_337){
-return imap(_335,_337,_332(ctx));
+if(_355){
+return imap(_353,_355,_350(ctx));
 }
 try{
-node=_334.match(node,ctx);
+node=_352.match(node,ctx);
 continue;
 }
 catch(e){
-if(e!=_336){
+if(e!=_354){
 throw e;
 }
 }
 return self._document.createTextNode(node.toString());
 }
 return undefined;
-},setNodeAttribute:function(node,attr,_339){
+},setNodeAttribute:function(node,attr,_357){
 var o={};
-o[attr]=_339;
+o[attr]=_357;
 try{
 return MochiKit.DOM.updateNodeAttributes(node,o);
 }
@@ -2645,30 +2794,30 @@
 return null;
 },getNodeAttribute:function(node,attr){
 var self=MochiKit.DOM;
-var _340=self.attributeArray.renames[attr];
+var _358=self.attributeArray.renames[attr];
 node=self.getElement(node);
 try{
-if(_340){
-return node[_340];
+if(_358){
+return node[_358];
 }
 return node.getAttribute(attr);
 }
 catch(e){
 }
 return null;
-},updateNodeAttributes:function(node,_341){
+},updateNodeAttributes:function(node,_359){
 var elem=node;
 var self=MochiKit.DOM;
 if(typeof (node)=="string"){
 elem=self.getElement(node);
 }
-if(_341){
-var _342=MochiKit.Base.updatetree;
+if(_359){
+var _360=MochiKit.Base.updatetree;
 if(self.attributeArray.compliant){
-for(var k in _341){
-var v=_341[k];
+for(var k in _359){
+var v=_359[k];
 if(typeof (v)=="object"&&typeof (elem[k])=="object"){
-_342(elem[k],v);
+_360(elem[k],v);
 }else{
 if(k.substring(0,2)=="on"){
 if(typeof (v)=="string"){
@@ -2681,18 +2830,18 @@
 }
 }
 }else{
-var _343=self.attributeArray.renames;
-for(k in _341){
-v=_341[k];
-var _344=_343[k];
+var _361=self.attributeArray.renames;
+for(k in _359){
+v=_359[k];
+var _362=_361[k];
 if(k=="style"&&typeof (v)=="string"){
 elem.style.cssText=v;
 }else{
-if(typeof (_344)=="string"){
-elem[_344]=v;
+if(typeof (_362)=="string"){
+elem[_362]=v;
 }else{
 if(typeof (elem[k])=="object"&&typeof (v)=="object"){
-_342(elem[k],v);
+_360(elem[k],v);
 }else{
 if(k.substring(0,2)=="on"){
 if(typeof (v)=="string"){
@@ -2715,16 +2864,16 @@
 if(typeof (node)=="string"){
 elem=self.getElement(node);
 }
-var _345=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
-var _346=MochiKit.Base.concat;
-while(_345.length){
-var n=_345.shift();
+var _363=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
+var _364=MochiKit.Base.concat;
+while(_363.length){
+var n=_363.shift();
 if(typeof (n)=="undefined"||n===null){
 }else{
 if(typeof (n.nodeType)=="number"){
 elem.appendChild(n);
 }else{
-_345=_346(n,_345);
+_363=_364(n,_363);
 }
 }
 }
@@ -2736,33 +2885,38 @@
 elem=self.getElement(node);
 arguments[0]=elem;
 }
-var _347;
-while((_347=elem.firstChild)){
-elem.removeChild(_347);
+var _365;
+while((_365=elem.firstChild)){
+elem.removeChild(_365);
 }
 if(arguments.length<2){
 return elem;
 }else{
 return self.appendChildNodes.apply(this,arguments);
 }
-},createDOM:function(name,_348){
+},createDOM:function(name,_366){
 var elem;
 var self=MochiKit.DOM;
+var m=MochiKit.Base;
+if(typeof (_366)=="string"||typeof (_366)=="number"){
+var args=m.extend([name,null],arguments,1);
+return arguments.callee.apply(this,args);
+}
 if(typeof (name)=="string"){
-if(_348&&"name" in _348&&!self.attributeArray.compliant){
-name=("<"+name+" name=\""+self.escapeHTML(_348.name)+"\">");
+if(_366&&"name" in _366&&!self.attributeArray.compliant){
+name=("<"+name+" name=\""+self.escapeHTML(_366.name)+"\">");
 }
 elem=self._document.createElement(name);
 }else{
 elem=name;
 }
-if(_348){
-self.updateNodeAttributes(elem,_348);
+if(_366){
+self.updateNodeAttributes(elem,_366);
 }
 if(arguments.length<=2){
 return elem;
 }else{
-var args=MochiKit.Base.extend([elem],arguments,2);
+var args=m.extend([elem],arguments,2);
 return self.appendChildNodes.apply(this,args);
 }
 },createDOMFunc:function(){
@@ -2771,12 +2925,12 @@
 },swapDOM:function(dest,src){
 var self=MochiKit.DOM;
 dest=self.getElement(dest);
-var _351=dest.parentNode;
+var _369=dest.parentNode;
 if(src){
 src=self.getElement(src);
-_351.replaceChild(src,dest);
+_369.replaceChild(src,dest);
 }else{
-_351.removeChild(dest);
+_369.removeChild(dest);
 }
 return src;
 },getElement:function(id){
@@ -2786,60 +2940,60 @@
 }else{
 return MochiKit.Base.map(self.getElement,arguments);
 }
-},computedStyle:function(_353,_354,_355){
+},computedStyle:function(_371,_372,_373){
 if(arguments.length==2){
-_355=_354;
+_373=_372;
 }
 var self=MochiKit.DOM;
-var el=self.getElement(_353);
-var _357=self._document;
-if(!el||el==_357){
+var el=self.getElement(_371);
+var _375=self._document;
+if(!el||el==_375){
 return undefined;
 }
 if(el.currentStyle){
-return el.currentStyle[_354];
+return el.currentStyle[_372];
 }
-if(typeof (_357.defaultView)=="undefined"){
+if(typeof (_375.defaultView)=="undefined"){
 return undefined;
 }
-if(_357.defaultView===null){
+if(_375.defaultView===null){
 return undefined;
 }
-var _358=_357.defaultView.getComputedStyle(el,null);
-if(typeof (_358)=="undefined"||_358===null){
+var _376=_375.defaultView.getComputedStyle(el,null);
+if(typeof (_376)=="undefined"||_376===null){
 return undefined;
 }
-return _358.getPropertyValue(_355);
-},getElementsByTagAndClassName:function(_359,_360,_361){
+return _376.getPropertyValue(_373);
+},getElementsByTagAndClassName:function(_377,_378,_379){
 var self=MochiKit.DOM;
-if(typeof (_359)=="undefined"||_359===null){
-_359="*";
+if(typeof (_377)=="undefined"||_377===null){
+_377="*";
 }
-if(typeof (_361)=="undefined"||_361===null){
-_361=self._document;
+if(typeof (_379)=="undefined"||_379===null){
+_379=self._document;
 }
-_361=self.getElement(_361);
-var _362=(_361.getElementsByTagName(_359)||self._document.all);
-if(typeof (_360)=="undefined"||_360===null){
-return MochiKit.Base.extend(null,_362);
+_379=self.getElement(_379);
+var _380=(_379.getElementsByTagName(_377)||self._document.all);
+if(typeof (_378)=="undefined"||_378===null){
+return MochiKit.Base.extend(null,_380);
 }
-var _363=[];
-for(var i=0;i<_362.length;i++){
-var _364=_362[i];
-var _365=_364.className.split(" ");
-for(var j=0;j<_365.length;j++){
-if(_365[j]==_360){
-_363.push(_364);
+var _381=[];
+for(var i=0;i<_380.length;i++){
+var _382=_380[i];
+var _383=_382.className.split(" ");
+for(var j=0;j<_383.length;j++){
+if(_383[j]==_378){
+_381.push(_382);
 break;
 }
 }
 }
-return _363;
+return _381;
 },_newCallStack:function(path,once){
 var rval=function(){
-var _368=arguments.callee.callStack;
-for(var i=0;i<_368.length;i++){
-if(_368[i].apply(this,arguments)===false){
+var _386=arguments.callee.callStack;
+for(var i=0;i<_386.length;i++){
+if(_386[i].apply(this,arguments)===false){
 break;
 }
 }
@@ -2853,98 +3007,98 @@
 };
 rval.callStack=[];
 return rval;
-},addToCallStack:function(_369,path,func,once){
+},addToCallStack:function(_387,path,func,once){
 var self=MochiKit.DOM;
-var _370=_369[path];
-var _371=_370;
-if(!(typeof (_370)=="function"&&typeof (_370.callStack)=="object"&&_370.callStack!==null)){
-_371=self._newCallStack(path,once);
-if(typeof (_370)=="function"){
-_371.callStack.push(_370);
+var _388=_387[path];
+var _389=_388;
+if(!(typeof (_388)=="function"&&typeof (_388.callStack)=="object"&&_388.callStack!==null)){
+_389=self._newCallStack(path,once);
+if(typeof (_388)=="function"){
+_389.callStack.push(_388);
 }
-_369[path]=_371;
+_387[path]=_389;
 }
-_371.callStack.push(func);
+_389.callStack.push(func);
 },addLoadEvent:function(func){
 var self=MochiKit.DOM;
 self.addToCallStack(self._window,"onload",func,true);
-},focusOnLoad:function(_372){
+},focusOnLoad:function(_390){
 var self=MochiKit.DOM;
 self.addLoadEvent(function(){
-_372=self.getElement(_372);
-if(_372){
-_372.focus();
+_390=self.getElement(_390);
+if(_390){
+_390.focus();
 }
 });
-},setElementClass:function(_373,_374){
+},setElementClass:function(_391,_392){
 var self=MochiKit.DOM;
-var obj=self.getElement(_373);
+var obj=self.getElement(_391);
 if(self.attributeArray.compliant){
-obj.setAttribute("class",_374);
+obj.setAttribute("class",_392);
 }else{
-obj.setAttribute("className",_374);
+obj.setAttribute("className",_392);
 }
-},toggleElementClass:function(_375){
+},toggleElementClass:function(_393){
 var self=MochiKit.DOM;
 for(var i=1;i<arguments.length;i++){
 var obj=self.getElement(arguments[i]);
-if(!self.addElementClass(obj,_375)){
-self.removeElementClass(obj,_375);
+if(!self.addElementClass(obj,_393)){
+self.removeElementClass(obj,_393);
 }
 }
-},addElementClass:function(_376,_377){
+},addElementClass:function(_394,_395){
 var self=MochiKit.DOM;
-var obj=self.getElement(_376);
+var obj=self.getElement(_394);
 var cls=obj.className;
 if(cls.length===0){
-self.setElementClass(obj,_377);
+self.setElementClass(obj,_395);
 return true;
 }
-if(cls==_377){
+if(cls==_395){
 return false;
 }
-var _379=obj.className.split(" ");
-for(var i=0;i<_379.length;i++){
-if(_379[i]==_377){
+var _397=obj.className.split(" ");
+for(var i=0;i<_397.length;i++){
+if(_397[i]==_395){
 return false;
 }
 }
-self.setElementClass(obj,cls+" "+_377);
+self.setElementClass(obj,cls+" "+_395);
 return true;
-},removeElementClass:function(_380,_381){
+},removeElementClass:function(_398,_399){
 var self=MochiKit.DOM;
-var obj=self.getElement(_380);
+var obj=self.getElement(_398);
 var cls=obj.className;
 if(cls.length===0){
 return false;
 }
-if(cls==_381){
+if(cls==_399){
 self.setElementClass(obj,"");
 return true;
 }
-var _382=obj.className.split(" ");
-for(var i=0;i<_382.length;i++){
-if(_382[i]==_381){
-_382.splice(i,1);
-self.setElementClass(obj,_382.join(" "));
+var _400=obj.className.split(" ");
+for(var i=0;i<_400.length;i++){
+if(_400[i]==_399){
+_400.splice(i,1);
+self.setElementClass(obj,_400.join(" "));
 return true;
 }
 }
 return false;
-},swapElementClass:function(_383,_384,_385){
-var obj=MochiKit.DOM.getElement(_383);
-var res=MochiKit.DOM.removeElementClass(obj,_384);
+},swapElementClass:function(_401,_402,_403){
+var obj=MochiKit.DOM.getElement(_401);
+var res=MochiKit.DOM.removeElementClass(obj,_402);
 if(res){
-MochiKit.DOM.addElementClass(obj,_385);
+MochiKit.DOM.addElementClass(obj,_403);
 }
 return res;
-},hasElementClass:function(_386,_387){
-var obj=MochiKit.DOM.getElement(_386);
-var _388=obj.className.split(" ");
+},hasElementClass:function(_404,_405){
+var obj=MochiKit.DOM.getElement(_404);
+var _406=obj.className.split(" ");
 for(var i=1;i<arguments.length;i++){
 var good=false;
-for(var j=0;j<_388.length;j++){
-if(_388[j]==arguments[i]){
+for(var j=0;j<_406.length;j++){
+if(_406[j]==arguments[i]){
 good=true;
 break;
 }
@@ -2962,55 +3116,55 @@
 if(typeof (lst)=="undefined"||lst===null){
 lst=[];
 }
-var _391=[dom];
+var _409=[dom];
 var self=MochiKit.DOM;
-var _392=self.escapeHTML;
-var _393=self.attributeArray;
-while(_391.length){
-dom=_391.pop();
+var _410=self.escapeHTML;
+var _411=self.attributeArray;
+while(_409.length){
+dom=_409.pop();
 if(typeof (dom)=="string"){
 lst.push(dom);
 }else{
 if(dom.nodeType==1){
 lst.push("<"+dom.nodeName.toLowerCase());
-var _394=[];
-var _395=_393(dom);
-for(var i=0;i<_395.length;i++){
-var a=_395[i];
-_394.push([" ",a.name,"=\"",_392(a.value),"\""]);
+var _412=[];
+var _413=_411(dom);
+for(var i=0;i<_413.length;i++){
+var a=_413[i];
+_412.push([" ",a.name,"=\"",_410(a.value),"\""]);
 }
-_394.sort();
-for(i=0;i<_394.length;i++){
-var _396=_394[i];
-for(var j=0;j<_396.length;j++){
-lst.push(_396[j]);
+_412.sort();
+for(i=0;i<_412.length;i++){
+var _414=_412[i];
+for(var j=0;j<_414.length;j++){
+lst.push(_414[j]);
 }
 }
 if(dom.hasChildNodes()){
 lst.push(">");
-_391.push("</"+dom.nodeName.toLowerCase()+">");
-var _397=dom.childNodes;
-for(i=_397.length-1;i>=0;i--){
-_391.push(_397[i]);
+_409.push("</"+dom.nodeName.toLowerCase()+">");
+var _415=dom.childNodes;
+for(i=_415.length-1;i>=0;i--){
+_409.push(_415[i]);
 }
 }else{
 lst.push("/>");
 }
 }else{
 if(dom.nodeType==3){
-lst.push(_392(dom.nodeValue));
+lst.push(_410(dom.nodeValue));
 }
 }
 }
 }
 return lst;
-},setDisplayForElement:function(_398,_399){
+},setDisplayForElement:function(_416,_417){
 var m=MochiKit.Base;
-var _400=m.extend(null,arguments,1);
-MochiKit.Iter.forEach(m.filter(null,m.map(MochiKit.DOM.getElement,_400)),function(_399){
-_399.style.display=_398;
+var _418=m.extend(null,arguments,1);
+MochiKit.Iter.forEach(m.filter(null,m.map(MochiKit.DOM.getElement,_418)),function(_417){
+_417.style.display=_416;
 });
-},scrapeText:function(node,_401){
+},scrapeText:function(node,_419){
 var rval=[];
 (function(node){
 var cn=node.childNodes;
@@ -3019,12 +3173,12 @@
 arguments.callee.call(this,cn[i]);
 }
 }
-var _403=node.nodeValue;
-if(typeof (_403)=="string"){
-rval.push(_403);
+var _421=node.nodeValue;
+if(typeof (_421)=="string"){
+rval.push(_421);
 }
 })(MochiKit.DOM.getElement(node));
-if(_401){
+if(_419){
 return rval;
 }else{
 return rval.join("");
@@ -3034,65 +3188,65 @@
 this._document=document;
 this._window=win;
 this.domConverters=new m.AdapterRegistry();
-var _404=this._document.createElement("span");
-var _405;
-if(_404&&_404.attributes&&_404.attributes.length>0){
-var _406=m.filter;
-_405=function(node){
-return _406(_405.ignoreAttrFilter,node.attributes);
+var _422=this._document.createElement("span");
+var _423;
+if(_422&&_422.attributes&&_422.attributes.length>0){
+var _424=m.filter;
+_423=function(node){
+return _424(_423.ignoreAttrFilter,node.attributes);
 };
-_405.ignoreAttr={};
-MochiKit.Iter.forEach(_404.attributes,function(a){
-_405.ignoreAttr[a.name]=a.value;
+_423.ignoreAttr={};
+MochiKit.Iter.forEach(_422.attributes,function(a){
+_423.ignoreAttr[a.name]=a.value;
 });
-_405.ignoreAttrFilter=function(a){
-return (_405.ignoreAttr[a.name]!=a.value);
+_423.ignoreAttrFilter=function(a){
+return (_423.ignoreAttr[a.name]!=a.value);
 };
-_405.compliant=false;
-_405.renames={"class":"className","checked":"defaultChecked","usemap":"useMap","for":"htmlFor"};
+_423.compliant=false;
+_423.renames={"class":"className","checked":"defaultChecked","usemap":"useMap","for":"htmlFor"};
 }else{
-_405=function(node){
+_423=function(node){
 return node.attributes;
 };
-_405.compliant=true;
-_405.renames={};
+_423.compliant=true;
+_423.renames={};
 }
-this.attributeArray=_405;
-var _407=this.createDOMFunc;
-this.UL=_407("ul");
-this.OL=_407("ol");
-this.LI=_407("li");
-this.TD=_407("td");
-this.TR=_407("tr");
-this.TBODY=_407("tbody");
-this.THEAD=_407("thead");
-this.TFOOT=_407("tfoot");
-this.TABLE=_407("table");
-this.TH=_407("th");
-this.INPUT=_407("input");
-this.SPAN=_407("span");
-this.A=_407("a");
-this.DIV=_407("div");
-this.IMG=_407("img");
-this.BUTTON=_407("button");
-this.TT=_407("tt");
-this.PRE=_407("pre");
-this.H1=_407("h1");
-this.H2=_407("h2");
-this.H3=_407("h3");
-this.BR=_407("br");
-this.HR=_407("hr");
-this.LABEL=_407("label");
-this.TEXTAREA=_407("textarea");
-this.FORM=_407("form");
-this.P=_407("p");
-this.SELECT=_407("select");
-this.OPTION=_407("option");
-this.OPTGROUP=_407("optgroup");
-this.LEGEND=_407("legend");
-this.FIELDSET=_407("fieldset");
-this.STRONG=_407("strong");
-this.CANVAS=_407("canvas");
+this.attributeArray=_423;
+var _425=this.createDOMFunc;
+this.UL=_425("ul");
+this.OL=_425("ol");
+this.LI=_425("li");
+this.TD=_425("td");
+this.TR=_425("tr");
+this.TBODY=_425("tbody");
+this.THEAD=_425("thead");
+this.TFOOT=_425("tfoot");
+this.TABLE=_425("table");
+this.TH=_425("th");
+this.INPUT=_425("input");
+this.SPAN=_425("span");
+this.A=_425("a");
+this.DIV=_425("div");
+this.IMG=_425("img");
+this.BUTTON=_425("button");
+this.TT=_425("tt");
+this.PRE=_425("pre");
+this.H1=_425("h1");
+this.H2=_425("h2");
+this.H3=_425("h3");
+this.BR=_425("br");
+this.HR=_425("hr");
+this.LABEL=_425("label");
+this.TEXTAREA=_425("textarea");
+this.FORM=_425("form");
+this.P=_425("p");
+this.SELECT=_425("select");
+this.OPTION=_425("option");
+this.OPTGROUP=_425("optgroup");
+this.LEGEND=_425("legend");
+this.FIELDSET=_425("fieldset");
+this.STRONG=_425("strong");
+this.CANVAS=_425("canvas");
 this.hideElement=m.partial(this.setDisplayForElement,"none");
 this.showElement=m.partial(this.setDisplayForElement,"block");
 this.removeElement=this.swapDOM;
@@ -3100,9 +3254,11 @@
 this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
 m.nameFunctions(this);
 }});
-MochiKit.DOM.__new__(this);
+MochiKit.DOM.__new__(((typeof (window)=="undefined")?this:window));
+if(!MochiKit.__compat__){
 withWindow=MochiKit.DOM.withWindow;
 withDocument=MochiKit.DOM.withDocument;
+}
 MochiKit.Base._exportSymbols(this,MochiKit.DOM);
 if(typeof (dojo)!="undefined"){
 dojo.provide("MochiKit.LoggingPane");
@@ -3125,40 +3281,40 @@
 MochiKit.LoggingPane={};
 }
 MochiKit.LoggingPane.NAME="MochiKit.LoggingPane";
-MochiKit.LoggingPane.VERSION="1.3";
+MochiKit.LoggingPane.VERSION="1.3.1";
 MochiKit.LoggingPane.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
 MochiKit.LoggingPane.toString=function(){
 return this.__repr__();
 };
-MochiKit.LoggingPane.createLoggingPane=function(_408){
+MochiKit.LoggingPane.createLoggingPane=function(_426){
 var m=MochiKit.LoggingPane;
-_408=!(!_408);
-if(m._loggingPane&&m._loggingPane.inline!=_408){
+_426=!(!_426);
+if(m._loggingPane&&m._loggingPane.inline!=_426){
 m._loggingPane.closePane();
 m._loggingPane=null;
 }
 if(!m._loggingPane||m._loggingPane.closed){
-m._loggingPane=new m.LoggingPane(_408,MochiKit.Logging.logger);
+m._loggingPane=new m.LoggingPane(_426,MochiKit.Logging.logger);
 }
 return m._loggingPane;
 };
-MochiKit.LoggingPane.LoggingPane=function(_409,_410){
-if(typeof (_410)=="undefined"||_410==null){
-_410=MochiKit.Logging.logger;
+MochiKit.LoggingPane.LoggingPane=function(_427,_428){
+if(typeof (_428)=="undefined"||_428===null){
+_428=MochiKit.Logging.logger;
 }
-this.logger=_410;
-var _411=MochiKit.Base.update;
-var _412=MochiKit.Base.updatetree;
+this.logger=_428;
+var _429=MochiKit.Base.update;
+var _430=MochiKit.Base.updatetree;
 var bind=MochiKit.Base.bind;
-var _413=MochiKit.Base.clone;
+var _431=MochiKit.Base.clone;
 var win=window;
 var uid="_MochiKit_LoggingPane";
 if(typeof (MochiKit.DOM)!="undefined"){
 win=MochiKit.DOM.currentWindow();
 }
-if(!_409){
+if(!_427){
 var url=win.location.href.split("?")[0].replace(/[:\/.><&]/g,"_");
 var name=uid+"_"+url;
 var nwin=win.open("",name,"dependent,resizable,height=200");
@@ -3173,89 +3329,89 @@
 }
 var doc=win.document;
 this.doc=doc;
-var _416=doc.getElementById(uid);
-var _417=!!_416;
-if(_416&&typeof (_416.loggingPane)!="undefined"){
-_416.loggingPane.logger=this.logger;
-_416.loggingPane.buildAndApplyFilter();
-return _416.loggingPane;
+var _434=doc.getElementById(uid);
+var _435=!!_434;
+if(_434&&typeof (_434.loggingPane)!="undefined"){
+_434.loggingPane.logger=this.logger;
+_434.loggingPane.buildAndApplyFilter();
+return _434.loggingPane;
 }
-if(_417){
-var _418;
-while((_418=_416.firstChild)){
-_416.removeChild(_418);
+if(_435){
+var _436;
+while((_436=_434.firstChild)){
+_434.removeChild(_436);
 }
 }else{
-_416=doc.createElement("div");
-_416.id=uid;
+_434=doc.createElement("div");
+_434.id=uid;
 }
-_416.loggingPane=this;
-var _419=doc.createElement("input");
-var _420=doc.createElement("input");
-var _421=doc.createElement("button");
-var _422=doc.createElement("button");
-var _423=doc.createElement("button");
-var _424=doc.createElement("button");
-var _425=doc.createElement("div");
-var _426=doc.createElement("div");
-var _427=uid+"_Listener";
-this.colorTable=_413(this.colorTable);
-var _428=[];
-var _429=null;
-var _430=function(msg){
-var _431=msg.level;
-if(typeof (_431)=="number"){
-_431=MochiKit.Logging.LogLevel[_431];
+_434.loggingPane=this;
+var _437=doc.createElement("input");
+var _438=doc.createElement("input");
+var _439=doc.createElement("button");
+var _440=doc.createElement("button");
+var _441=doc.createElement("button");
+var _442=doc.createElement("button");
+var _443=doc.createElement("div");
+var _444=doc.createElement("div");
+var _445=uid+"_Listener";
+this.colorTable=_431(this.colorTable);
+var _446=[];
+var _447=null;
+var _448=function(msg){
+var _449=msg.level;
+if(typeof (_449)=="number"){
+_449=MochiKit.Logging.LogLevel[_449];
 }
-return _431;
+return _449;
 };
-var _432=function(msg){
+var _450=function(msg){
 return msg.info.join(" ");
 };
-var _433=bind(function(msg){
-var _434=_430(msg);
-var text=_432(msg);
-var c=this.colorTable[_434];
+var _451=bind(function(msg){
+var _452=_448(msg);
+var text=_450(msg);
+var c=this.colorTable[_452];
 var p=doc.createElement("span");
-p.className="MochiKit-LogMessage MochiKit-LogLevel-"+_434;
+p.className="MochiKit-LogMessage MochiKit-LogLevel-"+_452;
 p.style.cssText="margin: 0px; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; white-space: pre-wrap; white-space: pre-line; word-wrap: break-word; wrap-option: emergency; color: "+c;
-p.appendChild(doc.createTextNode(_434+": "+text));
-_426.appendChild(p);
-_426.appendChild(doc.createElement("br"));
-if(_425.offsetHeight>_425.scrollHeight){
-_425.scrollTop=0;
+p.appendChild(doc.createTextNode(_452+": "+text));
+_444.appendChild(p);
+_444.appendChild(doc.createElement("br"));
+if(_443.offsetHeight>_443.scrollHeight){
+_443.scrollTop=0;
 }else{
-_425.scrollTop=_425.scrollHeight;
+_443.scrollTop=_443.scrollHeight;
 }
 },this);
-var _436=function(msg){
-_428[_428.length]=msg;
-_433(msg);
+var _454=function(msg){
+_446[_446.length]=msg;
+_451(msg);
 };
-var _437=function(){
-var _438,infore;
+var _455=function(){
+var _456,infore;
 try{
-_438=new RegExp(_419.value);
-infore=new RegExp(_420.value);
+_456=new RegExp(_437.value);
+infore=new RegExp(_438.value);
 }
 catch(e){
 logDebug("Error in filter regex: "+e.message);
 return null;
 }
 return function(msg){
-return (_438.test(_430(msg))&&infore.test(_432(msg)));
+return (_456.test(_448(msg))&&infore.test(_450(msg)));
 };
 };
-var _439=function(){
-while(_426.firstChild){
-_426.removeChild(_426.firstChild);
+var _457=function(){
+while(_444.firstChild){
+_444.removeChild(_444.firstChild);
 }
 };
-var _440=function(){
-_428=[];
-_439();
+var _458=function(){
+_446=[];
+_457();
 };
-var _441=bind(function(){
+var _459=bind(function(){
 if(this.closed){
 return;
 }
@@ -3263,85 +3419,85 @@
 if(MochiKit.LoggingPane._loggingPane==this){
 MochiKit.LoggingPane._loggingPane=null;
 }
-this.logger.removeListener(_427);
-_416.loggingPane=null;
-if(_409){
-_416.parentNode.removeChild(_416);
+this.logger.removeListener(_445);
+_434.loggingPane=null;
+if(_427){
+_434.parentNode.removeChild(_434);
 }else{
 this.win.close();
 }
 },this);
-var _442=function(){
-_439();
-for(var i=0;i<_428.length;i++){
-var msg=_428[i];
-if(_429==null||_429(msg)){
-_433(msg);
+var _460=function(){
+_457();
+for(var i=0;i<_446.length;i++){
+var msg=_446[i];
+if(_447===null||_447(msg)){
+_451(msg);
 }
 }
 };
 this.buildAndApplyFilter=function(){
-_429=_437();
-_442();
-this.logger.removeListener(_427);
-this.logger.addListener(_427,_429,_436);
+_447=_455();
+_460();
+this.logger.removeListener(_445);
+this.logger.addListener(_445,_447,_454);
 };
-var _443=bind(function(){
-_428=this.logger.getMessages();
-_442();
+var _461=bind(function(){
+_446=this.logger.getMessages();
+_460();
 },this);
-var _444=bind(function(_445){
-_445=_445||window.event;
-key=_445.which||_445.keyCode;
+var _462=bind(function(_463){
+_463=_463||window.event;
+key=_463.which||_463.keyCode;
 if(key==13){
 this.buildAndApplyFilter();
 }
 },this);
-var _446="display: block; left: 0px; bottom: 0px; position: fixed; width: 100%; background-color: white; font: "+this.logFont;
-if(_409){
-_446+="; height: 10em; border-top: 2px solid black";
+var _464="display: block; z-index: 1000; left: 0px; bottom: 0px; position: fixed; width: 100%; background-color: white; font: "+this.logFont;
+if(_427){
+_464+="; height: 10em; border-top: 2px solid black";
 }else{
-_446+="; height: 100%;";
+_464+="; height: 100%;";
 }
-_416.style.cssText=_446;
-if(!_417){
-doc.body.appendChild(_416);
+_434.style.cssText=_464;
+if(!_435){
+doc.body.appendChild(_434);
 }
-_446={"cssText":"width: 33%; display: inline; font: "+this.logFont};
-_412(_419,{"value":"FATAL|ERROR|WARNING|INFO|DEBUG","onkeypress":_444,"style":_446});
-_416.appendChild(_419);
-_412(_420,{"value":".*","onkeypress":_444,"style":_446});
-_416.appendChild(_420);
-_446="width: 8%; display:inline; font: "+this.logFont;
-_421.appendChild(doc.createTextNode("Filter"));
-_421.onclick=bind("buildAndApplyFilter",this);
-_421.style.cssText=_446;
-_416.appendChild(_421);
-_422.appendChild(doc.createTextNode("Load"));
-_422.onclick=_443;
-_422.style.cssText=_446;
-_416.appendChild(_422);
-_423.appendChild(doc.createTextNode("Clear"));
-_423.onclick=_440;
-_423.style.cssText=_446;
-_416.appendChild(_423);
-_424.appendChild(doc.createTextNode("Close"));
-_424.onclick=_441;
-_424.style.cssText=_446;
-_416.appendChild(_424);
-_425.style.cssText="overflow: auto; width: 100%";
-_426.style.cssText="width: 100%; height: "+(_409?"8em":"100%");
-_425.appendChild(_426);
-_416.appendChild(_425);
+_464={"cssText":"width: 33%; display: inline; font: "+this.logFont};
+_430(_437,{"value":"FATAL|ERROR|WARNING|INFO|DEBUG","onkeypress":_462,"style":_464});
+_434.appendChild(_437);
+_430(_438,{"value":".*","onkeypress":_462,"style":_464});
+_434.appendChild(_438);
+_464="width: 8%; display:inline; font: "+this.logFont;
+_439.appendChild(doc.createTextNode("Filter"));
+_439.onclick=bind("buildAndApplyFilter",this);
+_439.style.cssText=_464;
+_434.appendChild(_439);
+_440.appendChild(doc.createTextNode("Load"));
+_440.onclick=_461;
+_440.style.cssText=_464;
+_434.appendChild(_440);
+_441.appendChild(doc.createTextNode("Clear"));
+_441.onclick=_458;
+_441.style.cssText=_464;
+_434.appendChild(_441);
+_442.appendChild(doc.createTextNode("Close"));
+_442.onclick=_459;
+_442.style.cssText=_464;
+_434.appendChild(_442);
+_443.style.cssText="overflow: auto; width: 100%";
+_444.style.cssText="width: 100%; height: "+(_427?"8em":"100%");
+_443.appendChild(_444);
+_434.appendChild(_443);
 this.buildAndApplyFilter();
-_443();
-if(_409){
+_461();
+if(_427){
 this.win=undefined;
 }else{
 this.win=win;
 }
-this.inline=_409;
-this.closePane=_441;
+this.inline=_427;
+this.closePane=_459;
 this.closed=false;
 return this;
 };
@@ -3374,60 +3530,60 @@
 MochiKit.Color={};
 }
 MochiKit.Color.NAME="MochiKit.Color";
-MochiKit.Color.VERSION="1.3";
+MochiKit.Color.VERSION="1.3.1";
 MochiKit.Color.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
 MochiKit.Color.toString=function(){
 return this.__repr__();
 };
-MochiKit.Color.Color=function(red,_448,blue,_450){
-if(typeof (_450)=="undefined"||_450==null){
-_450=1;
+MochiKit.Color.Color=function(red,_466,blue,_468){
+if(typeof (_468)=="undefined"||_468===null){
+_468=1;
 }
-this.rgb={r:red,g:_448,b:blue,a:_450};
+this.rgb={r:red,g:_466,b:blue,a:_468};
 };
-MochiKit.Color.Color.prototype={__class__:MochiKit.Color.Color,colorWithAlpha:function(_451){
+MochiKit.Color.Color.prototype={__class__:MochiKit.Color.Color,colorWithAlpha:function(_469){
 var rgb=this.rgb;
 var m=MochiKit.Color;
-return m.Color.fromRGB(rgb.r,rgb.g,rgb.b,_451);
+return m.Color.fromRGB(rgb.r,rgb.g,rgb.b,_469);
 },colorWithHue:function(hue){
 var hsl=this.asHSL();
 hsl.h=hue;
 var m=MochiKit.Color;
 return m.Color.fromHSL(hsl);
-},colorWithSaturation:function(_455){
+},colorWithSaturation:function(_473){
 var hsl=this.asHSL();
-hsl.s=_455;
+hsl.s=_473;
 var m=MochiKit.Color;
 return m.Color.fromHSL(hsl);
-},colorWithLightness:function(_456){
+},colorWithLightness:function(_474){
 var hsl=this.asHSL();
-hsl.l=_456;
+hsl.l=_474;
 var m=MochiKit.Color;
 return m.Color.fromHSL(hsl);
-},darkerColorWithLevel:function(_457){
+},darkerColorWithLevel:function(_475){
 var hsl=this.asHSL();
-hsl.l=Math.max(hsl.l-_457,0);
+hsl.l=Math.max(hsl.l-_475,0);
 var m=MochiKit.Color;
 return m.Color.fromHSL(hsl);
-},lighterColorWithLevel:function(_458){
+},lighterColorWithLevel:function(_476){
 var hsl=this.asHSL();
-hsl.l=Math.min(hsl.l+_458,1);
+hsl.l=Math.min(hsl.l+_476,1);
 var m=MochiKit.Color;
 return m.Color.fromHSL(hsl);
-},blendedColor:function(_459,_460){
-if(typeof (_460)=="undefined"||_460==null){
-_460=0.5;
+},blendedColor:function(_477,_478){
+if(typeof (_478)=="undefined"||_478===null){
+_478=0.5;
 }
-var sf=1-_460;
+var sf=1-_478;
 var s=this.rgb;
-var d=_459.rgb;
-var df=_460;
+var d=_477.rgb;
+var df=_478;
 return MochiKit.Color.Color.fromRGB((s.r*sf)+(d.r*df),(s.g*sf)+(d.g*df),(s.b*sf)+(d.b*df),(s.a*sf)+(d.a*df));
-},compareRGB:function(_463){
+},compareRGB:function(_481){
 var a=this.asRGB();
-var b=_463.asRGB();
+var b=_481.asRGB();
 return MochiKit.Base.compare([a.r,a.g,a.b,a.a],[b.r,b.g,b.b,b.a]);
 },isLight:function(){
 return this.asHSL().b>0.5;
@@ -3481,7 +3637,7 @@
 },asHSV:function(){
 var hsv=this.hsv;
 var c=this.rgb;
-if(typeof (hsv)=="undefined"||hsv==null){
+if(typeof (hsv)=="undefined"||hsv===null){
 hsv=MochiKit.Color.rgbToHSV(this.rgb);
 this.hsv=hsv;
 }
@@ -3489,7 +3645,7 @@
 },asHSL:function(){
 var hsl=this.hsl;
 var c=this.rgb;
-if(typeof (hsl)=="undefined"||hsl==null){
+if(typeof (hsl)=="undefined"||hsl===null){
 hsl=MochiKit.Color.rgbToHSL(this.rgb);
 this.hsl=hsl;
 }
@@ -3501,111 +3657,114 @@
 var col=[c.r,c.g,c.b,c.a];
 return this.__class__.NAME+"("+col.join(", ")+")";
 }};
-MochiKit.Base.update(MochiKit.Color.Color,{fromRGB:function(red,_468,blue,_469){
-var _470=MochiKit.Color.Color;
+MochiKit.Base.update(MochiKit.Color.Color,{fromRGB:function(red,_486,blue,_487){
+var _488=MochiKit.Color.Color;
 if(arguments.length==1){
 var rgb=red;
 red=rgb.r;
-_468=rgb.g;
+_486=rgb.g;
 blue=rgb.b;
 if(typeof (rgb.a)=="undefined"){
-_469=undefined;
+_487=undefined;
 }else{
-_469=rgb.a;
+_487=rgb.a;
 }
 }
-return new _470(red,_468,blue,_469);
-},fromHSL:function(hue,_471,_472,_473){
+return new _488(red,_486,blue,_487);
+},fromHSL:function(hue,_489,_490,_491){
 var m=MochiKit.Color;
 return m.Color.fromRGB(m.hslToRGB.apply(m,arguments));
-},fromHSV:function(hue,_474,_475,_476){
+},fromHSV:function(hue,_492,_493,_494){
 var m=MochiKit.Color;
 return m.Color.fromRGB(m.hsvToRGB.apply(m,arguments));
 },fromName:function(name){
-var _477=MochiKit.Color.Color;
-var _478=_477._namedColors[name.toLowerCase()];
-if(typeof (_478)=="string"){
-return _477.fromHexString(_478);
+var _495=MochiKit.Color.Color;
+if(name.charAt(0)=="\""){
+name=name.substr(1,name.length-2);
+}
+var _496=_495._namedColors[name.toLowerCase()];
+if(typeof (_496)=="string"){
+return _495.fromHexString(_496);
 }else{
 if(name=="transparent"){
-return _477.transparentColor();
+return _495.transparentColor();
 }
 }
 return null;
-},fromString:function(_479){
+},fromString:function(_497){
 var self=MochiKit.Color.Color;
-var _480=_479.substr(0,3);
-if(_480=="rgb"){
-return self.fromRGBString(_479);
+var _498=_497.substr(0,3);
+if(_498=="rgb"){
+return self.fromRGBString(_497);
 }else{
-if(_480=="hsl"){
-return self.fromHSLString(_479);
+if(_498=="hsl"){
+return self.fromHSLString(_497);
 }else{
-if(_479.charAt(0)=="#"){
-return self.fromHexString(_479);
+if(_497.charAt(0)=="#"){
+return self.fromHexString(_497);
 }
 }
 }
-return self.fromName(_479);
-},fromHexString:function(_481){
-if(_481.charAt(0)=="#"){
-_481=_481.substring(1);
+return self.fromName(_497);
+},fromHexString:function(_499){
+if(_499.charAt(0)=="#"){
+_499=_499.substring(1);
 }
-var _482=[];
+var _500=[];
 var i,hex;
-if(_481.length==3){
+if(_499.length==3){
 for(i=0;i<3;i++){
-hex=_481.substr(i,1);
-_482.push(parseInt(hex+hex,16)/255);
+hex=_499.substr(i,1);
+_500.push(parseInt(hex+hex,16)/255);
 }
 }else{
 for(i=0;i<6;i+=2){
-hex=_481.substr(i,2);
-_482.push(parseInt(hex,16)/255);
+hex=_499.substr(i,2);
+_500.push(parseInt(hex,16)/255);
 }
 }
-var _483=MochiKit.Color.Color;
-return _483.fromRGB.apply(_483,_482);
-},_fromColorString:function(pre,_485,_486,_487){
-if(_487.indexOf(pre)==0){
-_487=_487.substring(_487.indexOf("(",3)+1,_487.length-1);
+var _501=MochiKit.Color.Color;
+return _501.fromRGB.apply(_501,_500);
+},_fromColorString:function(pre,_503,_504,_505){
+if(_505.indexOf(pre)===0){
+_505=_505.substring(_505.indexOf("(",3)+1,_505.length-1);
 }
-var _488=_487.split(/\s*,\s*/);
-var _489=[];
-for(var i=0;i<_488.length;i++){
-var c=_488[i];
+var _506=_505.split(/\s*,\s*/);
+var _507=[];
+for(var i=0;i<_506.length;i++){
+var c=_506[i];
 var val;
-var _490=c.substring(c.length-3);
+var _508=c.substring(c.length-3);
 if(c.charAt(c.length-1)=="%"){
 val=0.01*parseFloat(c.substring(0,c.length-1));
 }else{
-if(_490=="deg"){
+if(_508=="deg"){
 val=parseFloat(c)/360;
 }else{
-if(_490=="rad"){
+if(_508=="rad"){
 val=parseFloat(c)/(Math.PI*2);
 }else{
-val=_486[i]*parseFloat(c);
+val=_504[i]*parseFloat(c);
 }
 }
 }
-_489.push(val);
+_507.push(val);
 }
-return this[_485].apply(this,_489);
-},fromComputedStyle:function(elem,_491,_492){
+return this[_503].apply(this,_507);
+},fromComputedStyle:function(elem,_509,_510){
 var d=MochiKit.DOM;
 var cls=MochiKit.Color.Color;
 for(elem=d.getElement(elem);elem;elem=elem.parentNode){
-var _493=d.computedStyle.apply(d,arguments);
-if(!_493){
+var _511=d.computedStyle.apply(d,arguments);
+if(!_511){
 continue;
 }
-var _494=cls.fromString(_493);
-if(!_494){
+var _512=cls.fromString(_511);
+if(!_512){
 break;
 }
-if(_494.asRGB().a>0){
-return _494;
+if(_512.asRGB().a>0){
+return _512;
 }
 }
 return null;
@@ -3618,13 +3777,13 @@
 },namedColors:function(){
 return MochiKit.Base.clone(MochiKit.Color.Color._namedColors);
 }});
-MochiKit.Base.update(MochiKit.Color,{clampColorComponent:function(v,_495){
-v*=_495;
+MochiKit.Base.update(MochiKit.Color,{clampColorComponent:function(v,_513){
+v*=_513;
 if(v<0){
 return 0;
 }else{
-if(v>_495){
-return _495;
+if(v>_513){
+return _513;
 }else{
 return v;
 }
@@ -3652,118 +3811,118 @@
 }
 }
 return val;
-},hsvToRGB:function(hue,_498,_499,_500){
+},hsvToRGB:function(hue,_516,_517,_518){
 if(arguments.length==1){
 var hsv=hue;
 hue=hsv.h;
-_498=hsv.s;
-_499=hsv.v;
-_500=hsv.a;
+_516=hsv.s;
+_517=hsv.v;
+_518=hsv.a;
 }
 var red;
-var _501;
+var _519;
 var blue;
-if(_498==0){
+if(_516===0){
 red=0;
-_501=0;
+_519=0;
 blue=0;
 }else{
 var i=Math.floor(hue*6);
 var f=(hue*6)-i;
-var p=_499*(1-_498);
-var q=_499*(1-(_498*f));
-var t=_499*(1-(_498*(1-f)));
+var p=_517*(1-_516);
+var q=_517*(1-(_516*f));
+var t=_517*(1-(_516*(1-f)));
 switch(i){
 case 1:
 red=q;
-_501=_499;
+_519=_517;
 blue=p;
 break;
 case 2:
 red=p;
-_501=_499;
+_519=_517;
 blue=t;
 break;
 case 3:
 red=p;
-_501=q;
-blue=_499;
+_519=q;
+blue=_517;
 break;
 case 4:
 red=t;
-_501=p;
-blue=_499;
+_519=p;
+blue=_517;
 break;
 case 5:
-red=_499;
-_501=p;
+red=_517;
+_519=p;
 blue=q;
 break;
 case 6:
 case 0:
-red=_499;
-_501=t;
+red=_517;
+_519=t;
 blue=p;
 break;
 }
 }
-return {r:red,g:_501,b:blue,a:_500};
-},hslToRGB:function(hue,_503,_504,_505){
+return {r:red,g:_519,b:blue,a:_518};
+},hslToRGB:function(hue,_521,_522,_523){
 if(arguments.length==1){
 var hsl=hue;
 hue=hsl.h;
-_503=hsl.s;
-_504=hsl.l;
-_505=hsl.a;
+_521=hsl.s;
+_522=hsl.l;
+_523=hsl.a;
 }
 var red;
-var _506;
+var _524;
 var blue;
-if(_503==0){
-red=_504;
-_506=_504;
-blue=_504;
+if(_521===0){
+red=_522;
+_524=_522;
+blue=_522;
 }else{
 var m2;
-if(_504<=0.5){
-m2=_504*(1+_503);
+if(_522<=0.5){
+m2=_522*(1+_521);
 }else{
-m2=_504+_503-(_504*_503);
+m2=_522+_521-(_522*_521);
 }
-var m1=(2*_504)-m2;
+var m1=(2*_522)-m2;
 var f=MochiKit.Color._hslValue;
 var h6=hue*6;
 red=f(m1,m2,h6+2);
-_506=f(m1,m2,h6);
+_524=f(m1,m2,h6);
 blue=f(m1,m2,h6-2);
 }
-return {r:red,g:_506,b:blue,a:_505};
-},rgbToHSV:function(red,_510,blue,_511){
+return {r:red,g:_524,b:blue,a:_523};
+},rgbToHSV:function(red,_528,blue,_529){
 if(arguments.length==1){
 var rgb=red;
 red=rgb.r;
-_510=rgb.g;
+_528=rgb.g;
 blue=rgb.b;
-_511=rgb.a;
+_529=rgb.a;
 }
-var max=Math.max(Math.max(red,_510),blue);
-var min=Math.min(Math.min(red,_510),blue);
+var max=Math.max(Math.max(red,_528),blue);
+var min=Math.min(Math.min(red,_528),blue);
 var hue;
-var _514;
-var _515=max;
+var _532;
+var _533=max;
 if(min==max){
 hue=0;
-_514=0;
+_532=0;
 }else{
-var _516=(max-min);
-_514=_516/max;
+var _534=(max-min);
+_532=_534/max;
 if(red==max){
-hue=(_510-blue)/_516;
+hue=(_528-blue)/_534;
 }else{
-if(_510==max){
-hue=2+((blue-red)/_516);
+if(_528==max){
+hue=2+((blue-red)/_534);
 }else{
-hue=4+((red-_510)/_516);
+hue=4+((red-_528)/_534);
 }
 }
 hue/=6;
@@ -3774,37 +3933,37 @@
 hue-=1;
 }
 }
-return {h:hue,s:_514,v:_515,a:_511};
-},rgbToHSL:function(red,_517,blue,_518){
+return {h:hue,s:_532,v:_533,a:_529};
+},rgbToHSL:function(red,_535,blue,_536){
 if(arguments.length==1){
 var rgb=red;
 red=rgb.r;
-_517=rgb.g;
+_535=rgb.g;
 blue=rgb.b;
-_518=rgb.a;
+_536=rgb.a;
 }
-var max=Math.max(red,Math.max(_517,blue));
-var min=Math.min(red,Math.min(_517,blue));
+var max=Math.max(red,Math.max(_535,blue));
+var min=Math.min(red,Math.min(_535,blue));
 var hue;
-var _519;
-var _520=(max+min)/2;
-var _521=max-min;
-if(_521==0){
+var _537;
+var _538=(max+min)/2;
+var _539=max-min;
+if(_539===0){
 hue=0;
-_519=0;
+_537=0;
 }else{
-if(_520<=0.5){
-_519=_521/(max+min);
+if(_538<=0.5){
+_537=_539/(max+min);
 }else{
-_519=_521/(2-max-min);
+_537=_539/(2-max-min);
 }
 if(red==max){
-hue=(_517-blue)/_521;
+hue=(_535-blue)/_539;
 }else{
-if(_517==max){
-hue=2+((blue-red)/_521);
+if(_535==max){
+hue=2+((blue-red)/_539);
 }else{
-hue=4+((red-_517)/_521);
+hue=4+((red-_535)/_539);
 }
 }
 hue/=6;
@@ -3815,33 +3974,33 @@
 hue-=1;
 }
 }
-return {h:hue,s:_519,l:_520,a:_518};
+return {h:hue,s:_537,l:_538,a:_536};
 },toColorPart:function(num){
 num=Math.round(num);
-var _522=num.toString(16);
+var _540=num.toString(16);
 if(num<16){
-return "0"+_522;
+return "0"+_540;
 }
-return _522;
+return _540;
 },__new__:function(){
 var m=MochiKit.Base;
 this.Color.fromRGBString=m.bind(this.Color._fromColorString,this.Color,"rgb","fromRGB",[1/255,1/255,1/255,1]);
 this.Color.fromHSLString=m.bind(this.Color._fromColorString,this.Color,"hsl","fromHSL",[1/360,0.01,0.01,1]);
-var _523=1/3;
-var _524={black:[0,0,0],blue:[0,0,1],brown:[0.6,0.4,0.2],cyan:[0,1,1],darkGray:[_523,_523,_523],gray:[0.5,0.5,0.5],green:[0,1,0],lightGray:[2*_523,2*_523,2*_523],magenta:[1,0,1],orange:[1,0.5,0],purple:[0.5,0,0.5],red:[1,0,0],transparent:[0,0,0,0],white:[1,1,1],yellow:[1,1,0]};
-var _525=function(name,r,g,b,a){
+var _541=1/3;
+var _542={black:[0,0,0],blue:[0,0,1],brown:[0.6,0.4,0.2],cyan:[0,1,1],darkGray:[_541,_541,_541],gray:[0.5,0.5,0.5],green:[0,1,0],lightGray:[2*_541,2*_541,2*_541],magenta:[1,0,1],orange:[1,0.5,0],purple:[0.5,0,0.5],red:[1,0,0],transparent:[0,0,0,0],white:[1,1,1],yellow:[1,1,0]};
+var _543=function(name,r,g,b,a){
 var rval=this.fromRGB(r,g,b,a);
 this[name]=function(){
 return rval;
 };
 return rval;
 };
-for(var k in _524){
+for(var k in _542){
 var name=k+"Color";
-var _528=m.concat([_525,this.Color,name],_524[k]);
-this.Color[name]=m.bind.apply(null,_528);
+var _545=m.concat([_543,this.Color,name],_542[k]);
+this.Color[name]=m.bind.apply(null,_545);
 }
-var _529=function(){
+var _546=function(){
 for(var i=0;i<arguments.length;i++){
 if(!(arguments[i] instanceof Color)){
 return false;
@@ -3849,11 +4008,11 @@
 }
 return true;
 };
-var _530=function(a,b){
+var _547=function(a,b){
 return a.compareRGB(b);
 };
 m.nameFunctions(this);
-m.registerComparator(this.Color.NAME,_529,_530);
+m.registerComparator(this.Color.NAME,_546,_547);
 this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
 }});
 MochiKit.Color.EXPORT=["Color"];
@@ -3890,21 +4049,42 @@
 MochiKit.Signal={};
 }
 MochiKit.Signal.NAME="MochiKit.Signal";
-MochiKit.Signal.VERSION="1.3";
+MochiKit.Signal.VERSION="1.3.1";
 MochiKit.Signal._observers=[];
-MochiKit.Signal.Event=function(e){
+MochiKit.Signal.Event=function(src,e){
 this._event=e||window.event;
+this._src=src;
 };
-MochiKit.Signal.Event.prototype.event=function(){
+MochiKit.Base.update(MochiKit.Signal.Event.prototype,{__repr__:function(){
+var repr=MochiKit.Base.repr;
+var str="{event(): "+repr(this.event())+", src(): "+repr(this.src())+", type(): "+repr(this.type())+", target(): "+repr(this.target())+", modifier(): "+"{alt: "+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", meta: "+repr(this.modifier().meta)+", shift: "+repr(this.modifier().shift)+", any: "+repr(this.modifier().any)+"}";
+if(this.type()&&this.type().indexOf("key")===0){
+str+=", key(): {code: "+repr(this.key().code)+", string: "+repr(this.key().string)+"}";
+}
+if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
+str+=", mouse(): {page: "+repr(this.mouse().page)+", client: "+repr(this.mouse().client);
+if(this.type()!="mousemove"){
+str+=", button: {left: "+repr(this.mouse().button.left)+", middle: "+repr(this.mouse().button.middle)+", right: "+repr(this.mouse().button.right)+"}}";
+}else{
+str+="}";
+}
+}
+if(this.type()=="mouseover"||this.type()=="mouseout"){
+str+=", relatedTarget(): "+repr(this.relatedTarget());
+}
+str+="}";
+return str;
+},toString:function(){
+return this.__repr__();
+},src:function(){
+return this._src;
+},event:function(){
 return this._event;
-};
-MochiKit.Signal.Event.prototype.type=function(){
+},type:function(){
 return this._event.type||undefined;
-};
-MochiKit.Signal.Event.prototype.target=function(){
+},target:function(){
 return this._event.target||this._event.srcElement;
-};
-MochiKit.Signal.Event.prototype.relatedTarget=function(){
+},relatedTarget:function(){
 if(this.type()=="mouseover"){
 return (this._event.relatedTarget||this._event.fromElement);
 }else{
@@ -3912,17 +4092,16 @@
 return (this._event.relatedTarget||this._event.toElement);
 }
 }
-throw new Error("No related target");
-};
-MochiKit.Signal.Event.prototype.modifier=function(){
+return undefined;
+},modifier:function(){
 var m={};
 m.alt=this._event.altKey;
 m.ctrl=this._event.ctrlKey;
 m.meta=this._event.metaKey||false;
 m.shift=this._event.shiftKey;
+m.any=m.alt||m.ctrl||m.shift||m.meta;
 return m;
-};
-MochiKit.Signal.Event.prototype.key=function(){
+},key:function(){
 var k={};
 if(this.type()&&this.type().indexOf("key")===0){
 if(this.type()=="keydown"||this.type()=="keyup"){
@@ -3931,137 +4110,103 @@
 return k;
 }else{
 if(this.type()=="keypress"){
-k.code=(this._event.charCode||this._event.keyCode);
+k.code=0;
+k.string="";
+if(typeof (this._event.charCode)!="undefined"&&this._event.charCode!==0&&!MochiKit.Signal._specialMacKeys[this._event.charCode]){
+k.code=this._event.charCode;
 k.string=String.fromCharCode(k.code);
+}else{
+if(this._event.keyCode&&typeof (this._event.charCode)=="undefined"){
+k.code=this._event.keyCode;
+k.string=String.fromCharCode(k.code);
+}
+}
 return k;
 }
 }
 }
-throw new Error("This is not a key event");
-};
-MochiKit.Signal.Event.prototype._fixPoint=function(_531){
-if(typeof (_531)=="undefined"||_531<0){
-return 0;
-}
-return _531;
-};
-MochiKit.Signal.Event.prototype.mouse=function(){
+return undefined;
+},mouse:function(){
 var m={};
+var e=this._event;
 if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
 m.client=new MochiKit.DOM.Coordinates(0,0);
-if(this._event.clientX||this._event.clientY){
-m.client.x=this._fixPoint(this._event.clientX);
-m.client.y=this._fixPoint(this._event.clientY);
+if(e.clientX||e.clientY){
+m.client.x=(!e.clientX||e.clientX<0)?0:e.clientX;
+m.client.y=(!e.clientY||e.clientY<0)?0:e.clientY;
 }
 m.page=new MochiKit.DOM.Coordinates(0,0);
-if(this._event.pageX||this._event.pageY){
-m.page.x=this._fixPoint(this._event.pageX);
-m.page.y=this._fixPoint(this._event.pageY);
+if(e.pageX||e.pageY){
+m.page.x=(!e.pageX||e.pageX<0)?0:e.pageX;
+m.page.y=(!e.pageY||e.pageY<0)?0:e.pageY;
 }else{
-m.page.x=(this._event.clientX+(document.documentElement.scrollLeft||document.body.scrollLeft)-document.documentElement.clientLeft);
-m.page.y=(this._event.clientY+(document.documentElement.scrollTop||document.body.scrollTop)-document.documentElement.clientTop);
+var de=MochiKit.DOM._document.documentElement;
+var b=MochiKit.DOM._document.body;
+m.page.x=e.clientX+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||b.clientLeft);
+m.page.y=e.clientY+(de.scrollTop||b.scrollTop)-(de.clientTop||b.clientTop);
 }
 if(this.type()!="mousemove"){
 m.button={};
 m.button.left=false;
 m.button.right=false;
 m.button.middle=false;
-if(this._event.which){
-m.button.left=(this._event.which==1);
-m.button.middle=(this._event.which==2);
-m.button.right=(this._event.which==3);
+if(e.which){
+m.button.left=(e.which==1);
+m.button.middle=(e.which==2);
+m.button.right=(e.which==3);
 }else{
-m.button.left=!!(this._event.button&1);
-m.button.right=!!(this._event.button&2);
-m.button.middle=!!(this._event.button&4);
+m.button.left=!!(e.button&1);
+m.button.right=!!(e.button&2);
+m.button.middle=!!(e.button&4);
 }
 }
 return m;
 }
-throw new Error("This is not a mouse event");
-};
-MochiKit.Signal.Event.prototype.stop=function(){
+return undefined;
+},stop:function(){
 this.stopPropagation();
 this.preventDefault();
-};
-MochiKit.Signal.Event.prototype.stopPropagation=function(){
+},stopPropagation:function(){
 if(this._event.stopPropagation){
 this._event.stopPropagation();
 }else{
 this._event.cancelBubble=true;
 }
-};
-MochiKit.Signal.Event.prototype.preventDefault=function(){
+},preventDefault:function(){
 if(this._event.preventDefault){
 this._event.preventDefault();
 }else{
 this._event.returnValue=false;
 }
-};
-MochiKit.Signal.Event.prototype.__repr__=function(){
-var repr=MochiKit.Base.repr;
-var str="{event(): "+repr(this.event())+", type(): "+repr(this.type())+", target(): "+repr(this.target())+", modifier(): "+"{alt: "+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", meta: "+repr(this.modifier().meta)+", shift: "+repr(this.modifier().shift)+"}";
-if(this.type()&&this.type().indexOf("key")===0){
-str+=", key(): {code: "+repr(this.key().code)+", string: "+repr(this.key().string)+"}";
+}});
+MochiKit.Signal._specialMacKeys={3:"KEY_ENTER",63289:"KEY_NUM_PAD_CLEAR",63276:"KEY_PAGE_UP",63277:"KEY_PAGE_DOWN",63275:"KEY_END",63273:"KEY_HOME",63234:"KEY_ARROW_LEFT",63232:"KEY_ARROW_UP",63235:"KEY_ARROW_RIGHT",63233:"KEY_ARROW_DOWN",63302:"KEY_INSERT",63272:"KEY_DELETE"};
+for(i=63236;i<=63242;i++){
+MochiKit.Signal._specialMacKeys[i]="KEY_F"+(i-63236+1);
 }
-if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
-str+=", mouse(): {page: "+repr(this.mouse().page)+", client: "+repr(this.mouse().client);
-if(this.type()!="mousemove"){
-str+=", button: {left: "+repr(this.mouse().button.left)+", middle: "+repr(this.mouse().button.middle)+", right: "+repr(this.mouse().button.right)+"}}";
-}else{
-str+="}";
+MochiKit.Signal._specialKeys={8:"KEY_BACKSPACE",9:"KEY_TAB",12:"KEY_NUM_PAD_CLEAR",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACEBAR",33:"KEY_PAGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_ARROW_LEFT",38:"KEY_ARROW_UP",39:"KEY_ARROW_RIGHT",40:"KEY_ARROW_DOWN",44:"KEY_PRINT_SCREEN",45:"KEY_INSERT",46:"KEY_DELETE",59:"KEY_SEMICOLON",91:"KEY_WINDOWS_LEFT",92:"KEY_WINDOWS_RIGHT",93:"KEY_SELECT",106:"KEY_NUM_PAD_ASTERISK",107:"KEY_NUM_PAD_PLUS_SIGN",109:"KEY_NUM_PAD_HYPHEN-MINUS",110:"KEY_NUM_PAD_FULL_STOP",111:"KEY_NUM_PAD_SOLIDUS",144:"KEY_NUM_LOCK",145:"KEY_SCROLL_LOCK",186:"KEY_SEMICOLON",187:"KEY_EQUALS_SIGN",188:"KEY_COMMA",189:"KEY_HYPHEN-MINUS",190:"KEY_FULL_STOP",191:"KEY_SOLIDUS",192:"KEY_GRAVE_ACCENT",219:"KEY_LEFT_SQUARE_BRACKET",220:"KEY_REVERSE_SOLIDUS",221:"KEY_RIGHT_SQUARE_BRACKET",222:"KEY_APOSTROPHE"};
+for(var i=48;i<=57;i++){
+MochiKit.Signal._specialKeys[i]="KEY_"+(i-48);
 }
+for(i=65;i<=90;i++){
+MochiKit.Signal._specialKeys[i]="KEY_"+String.fromCharCode(i);
 }
-if(this.type()=="mouseover"||this.type()=="mouseout"){
-str+=", relatedTarget(): "+repr(this.relatedTarget());
+for(i=96;i<=105;i++){
+MochiKit.Signal._specialKeys[i]="KEY_NUM_PAD_"+(i-96);
 }
-str+="}";
-return str;
-};
-MochiKit.Signal.Event.prototype.toString=function(){
-return this.__repr__();
-};
+for(i=112;i<=123;i++){
+MochiKit.Signal._specialKeys[i]="KEY_F"+(i-112+1);
+}
 MochiKit.Base.update(MochiKit.Signal,{__repr__:function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 },toString:function(){
 return this.__repr__();
-},_specialKeys:{8:"KEY_BACKSPACE",9:"KEY_TAB",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACE",33:"KEY_PAGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_LEFT_ARROW",38:"KEY_UP_ARROW",39:"KEY_RIGHT_ARROW",40:"KEY_DOWN_ARROW",45:"KEY_INSERT",46:"KEY_DELETE",91:"KEY_LEFT_WINDOW",92:"KEY_RIGHT_WINDOW",93:"KEY_SELECT",112:"KEY_F1",113:"KEY_F2",114:"KEY_F3",115:"KEY_F4",116:"KEY_F5",117:"KEY_F6",118:"KEY_F7",119:"KEY_F8",120:"KEY_F9",121:"KEY_F10",122:"KEY_F11",123:"KEY_F12",144:"KEY_NUM_LOCK",145:"KEY_SCROLL_LOCK"},_getSlot:function(slot,func){
-if(typeof (func)=="string"||typeof (func)=="function"){
-if(typeof (func)=="string"&&typeof (slot[func])=="undefined"){
-throw new Error("Invalid function slot");
-}
-slot=[slot,func];
-}else{
-if(!func&&typeof (slot)=="function"){
-slot=[slot];
-}else{
-throw new Error("Invalid slot parameters");
-}
-}
-return slot;
 },_unloadCache:function(){
-for(var i=0;i<MochiKit.Signal._observers.length;i++){
-var src=MochiKit.Signal._observers[i][0];
-var sig=MochiKit.Signal._observers[i][1];
-var _534=MochiKit.Signal._observers[i][2];
-try{
-if(src.addEventListener){
-src.removeEventListener(sig.substr(2),_534,false);
-}else{
-if(src.attachEvent){
-src.detachEvent(sig,_534);
-}else{
-src._signals[sig]=undefined;
+var self=MochiKit.Signal;
+var _548=self._observers;
+for(var i=0;i<_548.length;i++){
+self._disconnect(_548[i]);
 }
-}
-src._listeners[sig]=undefined;
-delete (src._listeners);
-delete (src._signals);
-}
-catch(e){
-}
-}
-MochiKit.Signal._observers=undefined;
+delete self._observers;
 try{
 window.onload=undefined;
 }
@@ -4072,156 +4217,161 @@
 }
 catch(e){
 }
-},connect:function(src,sig,slot,func){
-if(typeof (src)=="string"){
+},_listener:function(src,func,obj,_549){
+var E=MochiKit.Signal.Event;
+if(!_549){
+return MochiKit.Base.bind(func,obj);
+}
+obj=obj||src;
+if(typeof (func)=="string"){
+return function(_551){
+obj[func].apply(obj,[new E(src,_551)]);
+};
+}else{
+return function(_552){
+func.apply(obj,[new E(src,_552)]);
+};
+}
+},connect:function(src,sig,_554,_555){
 src=MochiKit.DOM.getElement(src);
-}
+var self=MochiKit.Signal;
 if(typeof (sig)!="string"){
 throw new Error("'sig' must be a string");
 }
-slot=MochiKit.Signal._getSlot(slot,func);
-if(src.addEventListener||src.attachEvent||src[sig]){
-if(!src._listeners){
-src._listeners={};
+var obj=null;
+var func=null;
+if(typeof (_555)!="undefined"){
+obj=_554;
+func=_555;
+if(typeof (_555)=="string"){
+if(typeof (_554[_555])!="function"){
+throw new Error("'funcOrStr' must be a function on 'objOrFunc'");
 }
-if(!src._listeners[sig]){
-var _535=function(_536){
-var _537=new MochiKit.Signal.Event(_536);
-MochiKit.Signal.signal(src,sig,_537);
-return true;
-};
-MochiKit.Signal._observers.push([src,sig,_535]);
-if(src.addEventListener){
-src.addEventListener(sig.substr(2),_535,false);
 }else{
-if(src.attachEvent){
-src.attachEvent(sig,_535);
-}else{
-src[sig]=_535;
+if(typeof (_555)!="function"){
+throw new Error("'funcOrStr' must be a function or string");
 }
 }
-src._listeners[sig]=_535;
+}else{
+if(typeof (_554)!="function"){
+throw new Error("'objOrFunc' must be a function if 'funcOrStr' is not given");
+}else{
+func=_554;
 }
-if(!src._signals){
-src._signals={};
 }
-if(!src._signals[sig]){
-src._signals[sig]=[];
+if(typeof (obj)=="undefined"||obj===null){
+obj=src;
 }
+var _556=!!(src.addEventListener||src.attachEvent);
+var _557=self._listener(src,func,obj,_556);
+if(src.addEventListener){
+src.addEventListener(sig.substr(2),_557,false);
 }else{
-if(!src._signals||!src._signals[sig]){
-throw new Error("No such signal '"+sig+"' registered.");
+if(src.attachEvent){
+src.attachEvent(sig,_557);
 }
 }
-var _538=src._signals[sig];
-for(var i=0;i<_538.length;i++){
-var s=_538[i];
-if(slot[0]===s[0]&&slot[1]===s[1]&&slot[2]===s[2]){
+var _558=[src,sig,_557,_556,_554,_555];
+self._observers.push(_558);
+return _558;
+},_disconnect:function(_559){
+if(!_559[3]){
 return;
 }
+var src=_559[0];
+var sig=_559[1];
+var _560=_559[2];
+if(src.removeEventListener){
+src.removeEventListener(sig.substr(2),_560,false);
+}else{
+if(src.detachEvent){
+src.detachEvent(sig,_560);
+}else{
+throw new Error("'src' must be a DOM element");
 }
-_538.push(slot);
-},disconnect:function(src,sig,slot,func){
-if(typeof (src)=="string"){
-src=MochiKit.DOM.getElement(src);
 }
-if(typeof (sig)!="string"){
-throw new Error("'signal' must be a string");
+},disconnect:function(_561){
+var self=MochiKit.Signal;
+var _562=self._observers;
+var m=MochiKit.Base;
+if(arguments.length>1){
+var src=MochiKit.DOM.getElement(arguments[0]);
+var sig=arguments[1];
+var obj=arguments[2];
+var func=arguments[3];
+for(var i=_562.length-1;i>=0;i--){
+var o=_562[i];
+if(o[0]===src&&o[1]===sig&&o[4]===obj&&o[5]===func){
+self._disconnect(o);
+_562.splice(i,1);
+return true;
 }
-slot=MochiKit.Signal._getSlot(slot,func);
-if(src._signals&&src._signals[sig]){
-var _539=src._signals[sig];
-var _540=_539.length;
-for(var i=0;i<_539.length;i++){
-var s=_539[i];
-if(s[0]===slot[0]&&s[1]===slot[1]&&s[2]===slot[2]){
-_539.splice(i,1);
-break;
 }
-}
 }else{
-throw new Error("Invalid signal to disconnect");
+var idx=m.findIdentical(_562,_561);
+if(idx>=0){
+self._disconnect(_561);
+_562.splice(idx,1);
+return true;
 }
-if(src.addEventListener||src.attachEvent||src._signals[sig]){
-if(src._listeners&&src._listeners[sig]&&src._signals[sig].length===0){
-var _541=src._listeners[sig];
-if(src.addEventListener){
-src.removeEventListener(sig.substr(2),_541,false);
-}else{
-if(src.attachEvent){
-src.detachEvent(sig,_541);
-}else{
-src._signals[sig]=undefined;
 }
+return false;
+},disconnectAll:function(src,sig){
+src=MochiKit.DOM.getElement(src);
+var m=MochiKit.Base;
+var _563=m.flattenArguments(m.extend(null,arguments,1));
+var self=MochiKit.Signal;
+var _564=self._disconnect;
+var _565=self._observers;
+if(_563.length===0){
+for(var i=_565.length-1;i>=0;i--){
+var _566=_565[i];
+if(_566[0]===src){
+_564(_566);
+_565.splice(i,1);
 }
-var _542=MochiKit.Signal._observers;
-for(var i=0;i<_542.length;i++){
-var o=_542[i];
-if(o[0]===src&&o[1]===sig&&o[2]===_541){
-_542.splice(i,1);
-break;
 }
+}else{
+var sigs={};
+for(var i=0;i<_563.length;i++){
+sigs[_563[i]]=true;
 }
-src._listeners[sig]=undefined;
+for(var i=_565.length-1;i>=0;i--){
+var _566=_565[i];
+if(_566[0]===src&&_566[1] in sigs){
+_564(_566);
+_565.splice(i,1);
 }
 }
+}
 },signal:function(src,sig){
-if(typeof (src)=="string"){
+var _568=MochiKit.Signal._observers;
 src=MochiKit.DOM.getElement(src);
-}
-if(typeof (sig)!="string"){
-throw new Error("'signal' must be a string");
-}
-if(!src._signals||!src._signals[sig]){
-if(src.addEventListener||src.attachEvent||src[sig]){
-return;
-}else{
-throw new Error("No such signal '"+sig+"'");
-}
-}
-var _543=src._signals[sig];
 var args=MochiKit.Base.extend(null,arguments,2);
-var slot;
-var _544=[];
-for(var i=0;i<_543.length;i++){
-slot=_543[i];
+var _569=[];
+for(var i=0;i<_568.length;i++){
+var _570=_568[i];
+if(_570[0]===src&&_570[1]===sig){
 try{
-if(slot.length==1){
-slot[0].apply(src,args);
-}else{
-if(typeof (slot[1])=="string"){
-slot[0][slot[1]].apply(slot[0],args);
-}else{
-slot[1].apply(slot[0],args);
+_570[2].apply(src,args);
 }
+catch(e){
+_569.push(e);
 }
 }
-catch(e){
-_544.push(e);
 }
-}
-if(_544.length==1){
-throw _544[0];
+if(_569.length==1){
+throw _569[0];
 }else{
-if(_544.length){
-var e=new Error("There were errors in handling signal 'sig'.");
-e.errors=_544;
+if(_569.length>1){
+var e=new Error("Multiple errors thrown in handling 'sig', see errors property");
+e.errors=_569;
 throw e;
 }
 }
-},registerSignals:function(src,_545){
-if(!src._signals){
-src._signals={};
-}
-for(var i=0;i<_545.length;i++){
-var sig=_545[i];
-if(!src._signals[sig]){
-src._signals[sig]=[];
-}
-}
 }});
 MochiKit.Signal.EXPORT_OK=[];
-MochiKit.Signal.EXPORT=["connect","disconnect","signal","registerSignals"];
+MochiKit.Signal.EXPORT=["connect","disconnect","signal","disconnectAll"];
 MochiKit.Signal.__new__=function(win){
 var m=MochiKit.Base;
 this._document=document;
@@ -4235,6 +4385,12 @@
 m.nameFunctions(this);
 };
 MochiKit.Signal.__new__(this);
+if(!MochiKit.__compat__){
+connect=MochiKit.Signal.connect;
+disconnect=MochiKit.Signal.disconnect;
+disconnectAll=MochiKit.Signal.disconnectAll;
+signal=MochiKit.Signal.signal;
+}
 MochiKit.Base._exportSymbols(this,MochiKit.Signal);
 if(typeof (dojo)!="undefined"){
 dojo.provide("MochiKit.Visual");
@@ -4259,198 +4415,198 @@
 MochiKit.Visual={};
 }
 MochiKit.Visual.NAME="MochiKit.Visual";
-MochiKit.Visual.VERSION="1.3";
+MochiKit.Visual.VERSION="1.3.1";
 MochiKit.Visual.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
 MochiKit.Visual.toString=function(){
 return this.__repr__();
 };
-MochiKit.Visual._RoundCorners=function(e,_546){
+MochiKit.Visual._RoundCorners=function(e,_571){
 e=MochiKit.DOM.getElement(e);
-this._setOptions(_546);
+this._setOptions(_571);
 if(this.options.__unstable__wrapElement){
 e=this._doWrap(e);
 }
-var _547=this.options.color;
+var _572=this.options.color;
 var C=MochiKit.Color.Color;
 if(this.options.color=="fromElement"){
-_547=C.fromBackground(e);
+_572=C.fromBackground(e);
 }else{
-if(!(_547 instanceof C)){
-_547=C.fromString(_547);
+if(!(_572 instanceof C)){
+_572=C.fromString(_572);
 }
 }
-this.isTransparent=(_547.asRGB().a<=0);
-var _549=this.options.bgColor;
+this.isTransparent=(_572.asRGB().a<=0);
+var _574=this.options.bgColor;
 if(this.options.bgColor=="fromParent"){
-_549=C.fromBackground(e.offsetParent);
+_574=C.fromBackground(e.offsetParent);
 }else{
-if(!(_549 instanceof C)){
-_549=C.fromString(_549);
+if(!(_574 instanceof C)){
+_574=C.fromString(_574);
 }
 }
-this._roundCornersImpl(e,_547,_549);
+this._roundCornersImpl(e,_572,_574);
 };
 MochiKit.Visual._RoundCorners.prototype={_doWrap:function(e){
-var _550=e.parentNode;
+var _575=e.parentNode;
 var doc=MochiKit.DOM.currentDocument();
-if(typeof (doc.defaultView)=="undefined"||doc.defaultView==null){
+if(typeof (doc.defaultView)=="undefined"||doc.defaultView===null){
 return e;
 }
-var _551=doc.defaultView.getComputedStyle(e,null);
-if(typeof (_551)=="undefined"||_551==null){
+var _576=doc.defaultView.getComputedStyle(e,null);
+if(typeof (_576)=="undefined"||_576===null){
 return e;
 }
-var _552=MochiKit.DOM.DIV({"style":{display:"block",marginTop:_551.getPropertyValue("padding-top"),marginRight:_551.getPropertyValue("padding-right"),marginBottom:_551.getPropertyValue("padding-bottom"),marginLeft:_551.getPropertyValue("padding-left"),padding:"0px"}});
-_552.innerHTML=e.innerHTML;
+var _577=MochiKit.DOM.DIV({"style":{display:"block",marginTop:_576.getPropertyValue("padding-top"),marginRight:_576.getPropertyValue("padding-right"),marginBottom:_576.getPropertyValue("padding-bottom"),marginLeft:_576.getPropertyValue("padding-left"),padding:"0px"}});
+_577.innerHTML=e.innerHTML;
 e.innerHTML="";
-e.appendChild(_552);
+e.appendChild(_577);
 return e;
-},_roundCornersImpl:function(e,_553,_554){
+},_roundCornersImpl:function(e,_578,_579){
 if(this.options.border){
-this._renderBorder(e,_554);
+this._renderBorder(e,_579);
 }
 if(this._isTopRounded()){
-this._roundTopCorners(e,_553,_554);
+this._roundTopCorners(e,_578,_579);
 }
 if(this._isBottomRounded()){
-this._roundBottomCorners(e,_553,_554);
+this._roundBottomCorners(e,_578,_579);
 }
-},_renderBorder:function(el,_555){
-var _556="1px solid "+this._borderColor(_555);
-var _557="border-left: "+_556;
-var _558="border-right: "+_556;
-var _559="style='"+_557+";"+_558+"'";
-el.innerHTML="<div "+_559+">"+el.innerHTML+"</div>";
-},_roundTopCorners:function(el,_560,_561){
-var _562=this._createCorner(_561);
+},_renderBorder:function(el,_580){
+var _581="1px solid "+this._borderColor(_580);
+var _582="border-left: "+_581;
+var _583="border-right: "+_581;
+var _584="style='"+_582+";"+_583+"'";
+el.innerHTML="<div "+_584+">"+el.innerHTML+"</div>";
+},_roundTopCorners:function(el,_585,_586){
+var _587=this._createCorner(_586);
 for(var i=0;i<this.options.numSlices;i++){
-_562.appendChild(this._createCornerSlice(_560,_561,i,"top"));
+_587.appendChild(this._createCornerSlice(_585,_586,i,"top"));
 }
 el.style.paddingTop=0;
-el.insertBefore(_562,el.firstChild);
-},_roundBottomCorners:function(el,_563,_564){
-var _565=this._createCorner(_564);
+el.insertBefore(_587,el.firstChild);
+},_roundBottomCorners:function(el,_588,_589){
+var _590=this._createCorner(_589);
 for(var i=(this.options.numSlices-1);i>=0;i--){
-_565.appendChild(this._createCornerSlice(_563,_564,i,"bottom"));
+_590.appendChild(this._createCornerSlice(_588,_589,i,"bottom"));
 }
 el.style.paddingBottom=0;
-el.appendChild(_565);
-},_createCorner:function(_566){
+el.appendChild(_590);
+},_createCorner:function(_591){
 var dom=MochiKit.DOM;
-return dom.DIV({style:{backgroundColor:_566.toString()}});
-},_createCornerSlice:function(_567,_568,n,_569){
-var _570=MochiKit.DOM.SPAN();
-var _571=_570.style;
-_571.backgroundColor=_567.toString();
-_571.display="block";
-_571.height="1px";
-_571.overflow="hidden";
-_571.fontSize="1px";
-var _572=this._borderColor(_567,_568);
-if(this.options.border&&n==0){
-_571.borderTopStyle="solid";
-_571.borderTopWidth="1px";
-_571.borderLeftWidth="0px";
-_571.borderRightWidth="0px";
-_571.borderBottomWidth="0px";
-_571.height="0px";
-_571.borderColor=_572.toString();
+return dom.DIV({style:{backgroundColor:_591.toString()}});
+},_createCornerSlice:function(_592,_593,n,_594){
+var _595=MochiKit.DOM.SPAN();
+var _596=_595.style;
+_596.backgroundColor=_592.toString();
+_596.display="block";
+_596.height="1px";
+_596.overflow="hidden";
+_596.fontSize="1px";
+var _597=this._borderColor(_592,_593);
+if(this.options.border&&n===0){
+_596.borderTopStyle="solid";
+_596.borderTopWidth="1px";
+_596.borderLeftWidth="0px";
+_596.borderRightWidth="0px";
+_596.borderBottomWidth="0px";
+_596.height="0px";
+_596.borderColor=_597.toString();
 }else{
-if(_572){
-_571.borderColor=_572.toString();
-_571.borderStyle="solid";
-_571.borderWidth="0px 1px";
+if(_597){
+_596.borderColor=_597.toString();
+_596.borderStyle="solid";
+_596.borderWidth="0px 1px";
 }
 }
 if(!this.options.compact&&(n==(this.options.numSlices-1))){
-_571.height="2px";
+_596.height="2px";
 }
-this._setMargin(_570,n,_569);
-this._setBorder(_570,n,_569);
-return _570;
-},_setOptions:function(_573){
+this._setMargin(_595,n,_594);
+this._setBorder(_595,n,_594);
+return _595;
+},_setOptions:function(_598){
 this.options={corners:"all",color:"fromElement",bgColor:"fromParent",blend:true,border:false,compact:false,__unstable__wrapElement:false};
-MochiKit.Base.update(this.options,_573);
+MochiKit.Base.update(this.options,_598);
 this.options.numSlices=(this.options.compact?2:4);
 },_whichSideTop:function(){
-var _574=this.options.corners;
-if(this._hasString(_574,"all","top")){
+var _599=this.options.corners;
+if(this._hasString(_599,"all","top")){
 return "";
 }
-var _575=(_574.indexOf("tl")!=-1);
-var _576=(_574.indexOf("tr")!=-1);
-if(_575&&_576){
+var _600=(_599.indexOf("tl")!=-1);
+var _601=(_599.indexOf("tr")!=-1);
+if(_600&&_601){
 return "";
 }
-if(_575){
+if(_600){
 return "left";
 }
-if(_576){
+if(_601){
 return "right";
 }
 return "";
 },_whichSideBottom:function(){
-var _577=this.options.corners;
-if(this._hasString(_577,"all","bottom")){
+var _602=this.options.corners;
+if(this._hasString(_602,"all","bottom")){
 return "";
 }
-var _578=(_577.indexOf("bl")!=-1);
-var _579=(_577.indexOf("br")!=-1);
-if(_578&&_579){
+var _603=(_602.indexOf("bl")!=-1);
+var _604=(_602.indexOf("br")!=-1);
+if(_603&&_604){
 return "";
 }
-if(_578){
+if(_603){
 return "left";
 }
-if(_579){
+if(_604){
 return "right";
 }
 return "";
-},_borderColor:function(_580,_581){
-if(_580=="transparent"){
-return _581;
+},_borderColor:function(_605,_606){
+if(_605=="transparent"){
+return _606;
 }else{
 if(this.options.border){
 return this.options.border;
 }else{
 if(this.options.blend){
-return _581.blendedColor(_580);
+return _606.blendedColor(_605);
 }
 }
 }
 return "";
-},_setMargin:function(el,n,_582){
-var _583=this._marginSize(n)+"px";
-var _584=(_582=="top"?this._whichSideTop():this._whichSideBottom());
-var _585=el.style;
-if(_584=="left"){
-_585.marginLeft=_583;
-_585.marginRight="0px";
+},_setMargin:function(el,n,_607){
+var _608=this._marginSize(n)+"px";
+var _609=(_607=="top"?this._whichSideTop():this._whichSideBottom());
+var _610=el.style;
+if(_609=="left"){
+_610.marginLeft=_608;
+_610.marginRight="0px";
 }else{
-if(_584=="right"){
-_585.marginRight=_583;
-_585.marginLeft="0px";
+if(_609=="right"){
+_610.marginRight=_608;
+_610.marginLeft="0px";
 }else{
-_585.marginLeft=_583;
-_585.marginRight=_583;
+_610.marginLeft=_608;
+_610.marginRight=_608;
 }
 }
-},_setBorder:function(el,n,_586){
-var _587=this._borderSize(n)+"px";
-var _588=(_586=="top"?this._whichSideTop():this._whichSideBottom());
-var _589=el.style;
-if(_588=="left"){
-_589.borderLeftWidth=_587;
-_589.borderRightWidth="0px";
+},_setBorder:function(el,n,_611){
+var _612=this._borderSize(n)+"px";
+var _613=(_611=="top"?this._whichSideTop():this._whichSideBottom());
+var _614=el.style;
+if(_613=="left"){
+_614.borderLeftWidth=_612;
+_614.borderRightWidth="0px";
 }else{
-if(_588=="right"){
-_589.borderRightWidth=_587;
-_589.borderLeftWidth="0px";
+if(_613=="right"){
+_614.borderRightWidth=_612;
+_614.borderLeftWidth="0px";
 }else{
-_589.borderLeftWidth=_587;
-_589.borderRightWidth=_587;
+_614.borderLeftWidth=_612;
+_614.borderRightWidth=_612;
 }
 }
 },_marginSize:function(n){
@@ -4459,39 +4615,39 @@
 }
 var o=this.options;
 if(o.compact&&o.blend){
-var _590=[1,0];
-return _590[n];
+var _615=[1,0];
+return _615[n];
 }else{
 if(o.compact){
-var _591=[2,1];
-return _591[n];
+var _616=[2,1];
+return _616[n];
 }else{
 if(o.blend){
-var _592=[3,2,1,0];
-return _592[n];
+var _617=[3,2,1,0];
+return _617[n];
 }else{
-var _593=[5,3,2,1];
-return _593[n];
+var _618=[5,3,2,1];
+return _618[n];
 }
 }
 }
 },_borderSize:function(n){
 var o=this.options;
-var _594;
+var _619;
 if(o.compact&&(o.blend||this.isTransparent)){
 return 1;
 }else{
 if(o.compact){
-_594=[1,0];
+_619=[1,0];
 }else{
 if(o.blend){
-_594=[2,1,1,1];
+_619=[2,1,1,1];
 }else{
 if(o.border){
-_594=[0,2,0,0];
+_619=[0,2,0,0];
 }else{
 if(this.isTransparent){
-_594=[5,3,2,1];
+_619=[5,3,2,1];
 }else{
 return 0;
 }
@@ -4499,7 +4655,7 @@
 }
 }
 }
-return _594[n];
+return _619[n];
 },_hasString:function(str){
 for(var i=1;i<arguments.length;i++){
 if(str.indexOf(arguments[i])!=-1){
@@ -4514,13 +4670,13 @@
 },_hasSingleTextChild:function(el){
 return (el.childNodes.length==1&&el.childNodes[0].nodeType==3);
 }};
-MochiKit.Visual.roundElement=function(e,_595){
-new MochiKit.Visual._RoundCorners(e,_595);
+MochiKit.Visual.roundElement=function(e,_620){
+new MochiKit.Visual._RoundCorners(e,_620);
 };
-MochiKit.Visual.roundClass=function(_596,_597,_598){
-var _599=MochiKit.DOM.getElementsByTagAndClassName(_596,_597);
-for(var i=0;i<_599.length;i++){
-MochiKit.Visual.roundElement(_599[i],_598);
+MochiKit.Visual.roundClass=function(_621,_622,_623){
+var _624=MochiKit.DOM.getElementsByTagAndClassName(_621,_622);
+for(var i=0;i<_624.length;i++){
+MochiKit.Visual.roundElement(_624[i],_623);
 }
 };
 MochiKit.Visual.Color=MochiKit.Color.Color;
@@ -4541,7 +4697,7 @@
 MochiKit.MochiKit={};
 }
 MochiKit.MochiKit.NAME="MochiKit.MochiKit";
-MochiKit.MochiKit.VERSION="1.3";
+MochiKit.MochiKit.VERSION="1.3.1";
 MochiKit.MochiKit.__repr__=function(){
 return "["+this.NAME+" "+this.VERSION+"]";
 };
@@ -4568,23 +4724,23 @@
 JSAN.use("MochiKit.Visual",[]);
 }
 (function(){
-var _600=MochiKit.Base.extend;
+var _625=MochiKit.Base.extend;
 var self=MochiKit.MochiKit;
-var _601=self.SUBMODULES;
-var _602=[];
-var _603=[];
-var _604={};
+var _626=self.SUBMODULES;
+var _627=[];
+var _628=[];
+var _629={};
 var i,k,m,all;
-for(i=0;i<_601.length;i++){
-m=MochiKit[_601[i]];
-_600(_602,m.EXPORT);
-_600(_603,m.EXPORT_OK);
+for(i=0;i<_626.length;i++){
+m=MochiKit[_626[i]];
+_625(_627,m.EXPORT);
+_625(_628,m.EXPORT_OK);
 for(k in m.EXPORT_TAGS){
-_604[k]=_600(_604[k],m.EXPORT_TAGS[k]);
+_629[k]=_625(_629[k],m.EXPORT_TAGS[k]);
 }
 all=m.EXPORT_TAGS[":all"];
 if(!all){
-all=_600(null,m.EXPORT,m.EXPORT_OK);
+all=_625(null,m.EXPORT,m.EXPORT_OK);
 }
 var j;
 for(j=0;j<all.length;j++){
@@ -4592,50 +4748,50 @@
 self[k]=m[k];
 }
 }
-self.EXPORT=_602;
-self.EXPORT_OK=_603;
-self.EXPORT_TAGS=_604;
+self.EXPORT=_627;
+self.EXPORT_OK=_628;
+self.EXPORT_TAGS=_629;
 }());
 }else{
 if(typeof (MochiKit.__compat__)=="undefined"){
 MochiKit.__compat__=true;
 }
 (function(){
-var _605=document.getElementsByTagName("script");
-var _606="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+var _630=document.getElementsByTagName("script");
+var _631="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 var base=null;
-var _607=null;
-var _608={};
+var _632=null;
+var _633={};
 var i;
-for(i=0;i<_605.length;i++){
-var src=_605[i].getAttribute("src");
+for(i=0;i<_630.length;i++){
+var src=_630[i].getAttribute("src");
 if(!src){
 continue;
 }
-_608[src]=true;
+_633[src]=true;
 if(src.match(/MochiKit.js$/)){
 base=src.substring(0,src.lastIndexOf("MochiKit.js"));
-_607=_605[i];
+_632=_630[i];
 }
 }
-if(base==null){
+if(base===null){
 return;
 }
-var _609=MochiKit.MochiKit.SUBMODULES;
-for(var i=0;i<_609.length;i++){
-if(MochiKit[_609[i]]){
+var _634=MochiKit.MochiKit.SUBMODULES;
+for(var i=0;i<_634.length;i++){
+if(MochiKit[_634[i]]){
 continue;
 }
-var uri=base+_609[i]+".js";
-if(uri in _608){
+var uri=base+_634[i]+".js";
+if(uri in _633){
 continue;
 }
-if(document.documentElement&&document.documentElement.namespaceURI==_606){
-var s=document.createElementNS(_606,"script");
-s.setAttribute("id","MochiKit_"+base+_609[i]);
+if(document.documentElement&&document.documentElement.namespaceURI==_631){
+var s=document.createElementNS(_631,"script");
+s.setAttribute("id","MochiKit_"+base+_634[i]);
 s.setAttribute("src",uri);
 s.setAttribute("type","application/x-javascript");
-_607.parentNode.appendChild(s);
+_632.parentNode.appendChild(s);
 }else{
 document.write("<script src=\""+uri+"\" type=\"text/javascript\"></script>");
 }

Modified: trunk/src/Model.js
===================================================================
--- trunk/src/Model.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/src/Model.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -6,7 +6,6 @@
 	this.ready = false;
 	this.document = null;
 	this._query = query;
-	Freja._aux.registerSignals(this, ["onload"]);
 };
 /**
   * Returns a single value

Modified: trunk/src/QueryEngine.js
===================================================================
--- trunk/src/QueryEngine.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/src/QueryEngine.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -19,7 +19,7 @@
 		return null;
 	}
 	if(node) return node.nodeValue;
-	
+
 };
 Freja.QueryEngine.prototype.set = function(document, expression, value) {
 	try {
@@ -28,8 +28,8 @@
 			node.nodeValue = value;
 	} catch(x) {
 		// text node not found. Might need to be created.
-		// try not to process field names that are not meant to be xpath expressions  
-		if(expression.lastIndexOf('/') != -1) {		
+		// try not to process field names that are not meant to be xpath expressions
+		if(expression.lastIndexOf('/') != -1) {
 			var nodeName = expression.substr(expression.lastIndexOf('/')+1);
 			if(nodeName.charAt(0)=='@') {
 				// trying to set a non-existing attribute. Let's create it.
@@ -54,21 +54,21 @@
 	var node = document.selectSingleNode(expression);
 	if (node && node.nodeType == 2) {
 		return node;
-	} 
+	}
 	if (node && node.firstChild && node.firstChild.nodeType == 3) {
 		return node.firstChild;
-	} 
+	}
 	if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
-	} 
+	}
 	if (node && node.nodeType==1 && !node.firstChild) {
 		// empty element (<tag/>). Let's create and return a blank text node
-		return node.appendChild(document.createTextNode(''));			  
+		return node.appendChild(window.document.createTextNode(''));
 	}
-	
+
 	throw new Error("Can't evaluate expression " + expression);
 	return null;
-}; 
+};
 /**
   * SimplePath
   */
@@ -91,7 +91,7 @@
 		if(filter) {
 			// filter[1] element name, filter[2] attribute name, filter[3] attribute value
 			if(i>0 && parts[i-1]=='') {
-				// expression was of type //element[...] 
+				// expression was of type //element[...]
 				var cn = node.getElementsByTagName(filter[1]);
 			} else {
 				var cn = node.childNodes;
@@ -105,7 +105,7 @@
 			if (j==l)
 				throw new Error("Can't evaluate expression " + part);
 		}
-		else {		
+		else {
 			offset = regOffset.exec(part);
 			if (offset) {
 				part = offset[1];
@@ -125,16 +125,16 @@
 	}
 	if (node && node.firstChild && node.firstChild.nodeType == 3) {
 		return node.firstChild;
-	} 
+	}
 	if (node && node.firstChild && node.firstChild.nodeType == 4) {
 		return node.firstChild;
 	}
 	if (node && node.nodeType==1 && !node.firstChild) {
 		// empty element (<tag/>). Let's create and return a blank text node
-		return node.appendChild(document.createTextNode(''));			  
+		return node.appendChild(window.document.createTextNode(''));
 	}
-	
-	if (!node) {		
+
+	if (!node) {
 		throw new Error("Can't evaluate expression " + expression);
 	}
 	return node;

Modified: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/src/View.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -9,7 +9,6 @@
 	this._destination = null;
 	this.behaviors = [];
 	this.placeholder = null;
-	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
 	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehavior, this));
 };
 /**
@@ -106,8 +105,8 @@
 				var child = c[i];
 				if (child.nodeType == 1) {
 					if(child.className) {
-						var classNames = child.className.split(' ');						
-						for (var j=0;j<classNames.length;j++) {											
+						var classNames = child.className.split(' ');
+						for (var j=0;j<classNames.length;j++) {
 							var handler = behaviors[classNames[j]];
 							if (handler) {
 								for (var eventType in handler) {
@@ -193,14 +192,14 @@
 	// prepare posted data  (no need to send the XSL document, just its url)
 	var xslUrl = view.url;
 	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja._aux.serializeXML(model.document));
-	
+
 	var xslParameterString = '';
 	for (var paramname in xslParameters) {
 		xslParameterString += encodeURIComponent(paramname + "," + xslParameters[paramname]);
 	}
 	if(xslParameterString.length > 0) {
 		postedData  = postedData + '&xslParam=' + xslParameterString;
-	} 
+	}
 
 	// send request to the server-side XSL transformation service
 	var req = Freja.AssetManager.openXMLHttpRequest("POST", Freja.AssetManager.XSLT_SERVICE_URL);

Modified: trunk/src/auxiliary/minimal.js
===================================================================
--- trunk/src/auxiliary/minimal.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/src/auxiliary/minimal.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -84,8 +84,6 @@
 	}
 };
 
-/** registerSignals(src, signals) : void */
-Freja._aux.registerSignals = function(src, signals) { /* void */ };
 /** connect(src, signal, fnc) : void */
 Freja._aux.connect = function(src, signal, fnc) {
 

Modified: trunk/src/auxiliary/mochi+sarissa.js
===================================================================
--- trunk/src/auxiliary/mochi+sarissa.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/src/auxiliary/mochi+sarissa.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -47,8 +47,6 @@
 /** getElement(id) : HTMLElement */
 Freja._aux.getElement = MochiKit.DOM.getElement;
 
-/** registerSignals(src, signals) : void */
-Freja._aux.registerSignals = MochiKit.Signal.registerSignals;
 /** connect(src, signal, fnc) : void */
 Freja._aux.connect = MochiKit.Signal.connect;
 /** signal(src, signal, arg) : void */

Modified: trunk/tests/data/form-view.xsl
===================================================================
--- trunk/tests/data/form-view.xsl	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/tests/data/form-view.xsl	2006-04-29 09:20:10 UTC (rev 62)
@@ -3,11 +3,11 @@
 	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 
 <xsl:template match="item">	
-	<form method="post" freja-behaviour="form">
+	<form method="post" class="form">
 		<h3><input name="item/name" type="text" value="{name}" /></h3>
 		<p><textarea name="item/description"><xsl:value-of select="description" /></textarea></p>
 		<p><input name="item/price" type="text" value="{price}" /></p>
-		<input type="submit" value="ok" freja-behaviour="form-submit" id="form-submit" />
+		<input type="submit" value="ok" class="form-submit" id="form-submit" />
 	</form>
 </xsl:template>
 

Modified: trunk/tests/test_View.js
===================================================================
--- trunk/tests/test_View.js	2006-04-28 21:18:29 UTC (rev 61)
+++ trunk/tests/test_View.js	2006-04-29 09:20:10 UTC (rev 62)
@@ -36,7 +36,8 @@
 	// test of form
 	var formView = Freja.AssetManager.getView("data/form-view.xsl");
 	var testofsubmit = false;
-	formView.behaviours["form"] = {
+
+	formView.behaviors["form"] = {
 		onsubmit : function() { testofsubmit = true; }
 	};
 	formView.render(model, out);



From troelskn at gmail.com  Sat Apr 29 11:23:03 2006
From: troelskn at gmail.com (troels knak-nielsen)
Date: Sat, 29 Apr 2006 11:23:03 +0200
Subject: [Freja-svn] r61 - trunk/src
In-Reply-To: <200604282118.k3SLIWGX016513@sheep.berlios.de>
References: <200604282118.k3SLIWGX016513@sheep.berlios.de>
Message-ID: <98b8086f0604290223w3ee6954ahd2c4b3ed729d707b@mail.gmail.com>

I fixed a bug (document.createTextNode =>
window.document.createTextNode) but there are still problems. The code
doesn't pass the testcases (test_Model.js). You should also try to
write tests for the new features - preferably before implementing it.
Although that can be tough, in this particular situation it should be
easy.

On 4/28/06, cedsav at berlios.de <cedsav at berlios.de> wrote:
> Author: cedsav
> Date: 2006-04-28 23:18:29 +0200 (Fri, 28 Apr 2006)
> New Revision: 61
>
> Modified:
>   trunk/src/QueryEngine.js
> Log:
> added support for /element[@attr=value]/ expression to simplepath. Fiddled with get,set and _find. Will need some more work.
>
> Modified: trunk/src/QueryEngine.js
> ===================================================================
> --- trunk/src/QueryEngine.js    2006-04-26 21:35:32 UTC (rev 60)
> +++ trunk/src/QueryEngine.js    2006-04-28 21:18:29 UTC (rev 61)
> @@ -13,37 +13,35 @@
>        }
>  };
>  Freja.QueryEngine.prototype.get = function(document, expression) {
> -       var node = this._find(document, expression);
> +       try {
> +               var node = this._find(document, expression);
> +       } catch(x) {
> +               return null;
> +       }
>        if(node) return node.nodeValue;
> -       return null;
> +
>  };
>  Freja.QueryEngine.prototype.set = function(document, expression, value) {
> -       var node = this._find(document, expression);
> -       if(node) {
> -               node.nodeValue = value;
> -       } else {
> +       try {
> +               var node = this._find(document, expression);
> +               if(node)
> +                       node.nodeValue = value;
> +       } catch(x) {
>                // text node not found. Might need to be created.
>                // try not to process field names that are not meant to be xpath expressions
> -               if(expression.lastIndexOf('/') != -1) {
> +               if(expression.lastIndexOf('/') != -1) {
>                        var nodeName = expression.substr(expression.lastIndexOf('/')+1);
> -
>                        if(nodeName.charAt(0)=='@') {
>                                // trying to set a non-existing attribute. Let's create it.
> -                               var newexpression =  expression.substring(0, expression.lastIndexOf('/'));
> -                               var node = document.selectSingleNode(newexpression);
> -                               if(node)
> -                                       node.setAttribute(nodeName.substr(1),value);
> -                       } else {
> -                               // this could be an empty node (<tag />)
> -                               // let's try to create the text node.
> -                               var node = document.selectSingleNode(expression);
> -                               if(node) {
> -                                       var n = document.createTextNode(value);
> -                                       node.appendChild(n);
> -                               } else {
> -                                       // the element does not exist.
> +                               var parentExpression =  expression.substring(0, expression.lastIndexOf('/'));
> +                               var pNode = this._find(document, parentExpression);
> +                               if(pNode) {
> +                                       // this._find returns a text node
> +                                       pNode = pNode.parentNode;
> +                                       pNode.setAttribute(nodeName.substr(1),value);
>                                }
>                        }
> +                       // else parent element does not exist.. can't do anything
>                }
>        }
>  };
> @@ -56,53 +54,87 @@
>        var node = document.selectSingleNode(expression);
>        if (node && node.nodeType == 2) {
>                return node;
> -       } else if (node && node.firstChild && node.firstChild.nodeType == 3) {
> +       }
> +       if (node && node.firstChild && node.firstChild.nodeType == 3) {
>                return node.firstChild;
> -       } else if (node && node.firstChild && node.firstChild.nodeType == 4) {
> +       }
> +       if (node && node.firstChild && node.firstChild.nodeType == 4) {
>                return node.firstChild;
>        }
> -//     throw new Error("Can't evaluate expression " + expression);
> +       if (node && node.nodeType==1 && !node.firstChild) {
> +               // empty element (<tag/>). Let's create and return a blank text node
> +               return node.appendChild(document.createTextNode(''));
> +       }
> +
> +       throw new Error("Can't evaluate expression " + expression);
>        return null;
> -};
> +};
>  /**
>   * SimplePath
>   */
>  Freja.QueryEngine.SimplePath = function() {};
>  Freja.Class.extend(Freja.QueryEngine.SimplePath, Freja.QueryEngine);
>  Freja.QueryEngine.SimplePath.prototype._find = function(document, expression) {
> -       if (!expression.match(/^[\d\w\/@\[\]]*$/)) {
> +       if (!expression.match(/^[\d\w\/@\[\]=_\-']*$/)) {
>                throw new Error("Can't evaluate expression " + expression);
>        }
>        var parts = expression.split(/\//);
>        var node = document;
>        var regAttr = new RegExp("^@([\\d\\w]*)");
>        var regOffset = new RegExp("^([@\\d\\w]*)\\[([\\d]*)\\]$");
> +       var regFilter = new RegExp("^([\\d\\w]+)\\[@([@\\d\\w]+)=['\"]{1}(.*)['\"]{1}\\]$");
>        var attr = null;
>        var offset = 0;
>        for (var i = 0; i < parts.length; ++i) {
>                var part = parts[i];
> -               offset = regOffset.exec(part);
> -               if (offset) {
> -                       part = offset[1];
> -                       offset = offset[2] - 1;
> -               } else {
> -                       offset = 0;
> +               var filter = regFilter.exec(part);
> +               if(filter) {
> +                       // filter[1] element name, filter[2] attribute name, filter[3] attribute value
> +                       if(i>0 && parts[i-1]=='') {
> +                               // expression was of type //element[...]
> +                               var cn = node.getElementsByTagName(filter[1]);
> +                       } else {
> +                               var cn = node.childNodes;
> +                       }
> +                       for(var j=0, l=cn.length; j<l ; j++) {
> +                               if(cn[j].nodeType==1 && cn[j].tagName==filter[1] && cn[j].getAttribute(filter[2])== filter[3]) {
> +                                       node = cn[j];
> +                                       break;
> +                               }
> +                       }
> +                       if (j==l)
> +                               throw new Error("Can't evaluate expression " + part);
>                }
> -               if (part != "") {
> -                       attr = regAttr.exec(part);
> -                       if (attr) {
> -                               node = node.getAttributeNode(attr[1]);
> +               else {
> +                       offset = regOffset.exec(part);
> +                       if (offset) {
> +                               part = offset[1];
> +                               offset = offset[2] - 1;
>                        } else {
> -                               node = node.getElementsByTagName(part).item(offset);
> +                               offset = 0;
>                        }
> +                       if (part != "") {
> +                               attr = regAttr.exec(part);
> +                               if (attr) {
> +                                       node = node.getAttributeNode(attr[1]);
> +                               } else {
> +                                       node = node.getElementsByTagName(part).item(offset);
> +                               }
> +                       }
>                }
>        }
>        if (node && node.firstChild && node.firstChild.nodeType == 3) {
>                return node.firstChild;
> -       } else if (node && node.firstChild && node.firstChild.nodeType == 4) {
> +       }
> +       if (node && node.firstChild && node.firstChild.nodeType == 4) {
>                return node.firstChild;
>        }
> -       if (!node) {
> +       if (node && node.nodeType==1 && !node.firstChild) {
> +               // empty element (<tag/>). Let's create and return a blank text node
> +               return node.appendChild(document.createTextNode(''));
> +       }
> +
> +       if (!node) {
>                throw new Error("Can't evaluate expression " + expression);
>        }
>        return node;
>
> _______________________________________________
> Freja-svn mailing list
> Freja-svn at lists.berlios.de
> http://lists.berlios.de/mailman/listinfo/freja-svn
>


--
troels


