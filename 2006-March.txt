From troelskn at berlios.de  Thu Mar  9 18:56:16 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Thu, 9 Mar 2006 18:56:16 +0100
Subject: [Freja-svn] r4 - in trunk: examples/contacts lib
Message-ID: <200603091756.k29HuGpC001798@sheep.berlios.de>

Author: troelskn
Date: 2006-03-09 18:56:02 +0100 (Thu, 09 Mar 2006)
New Revision: 4

Modified:
   trunk/examples/contacts/client.js
   trunk/lib/Freja.js
Log:
Renamed Model.update to Model.save for BC with Freja 1.0

Modified: trunk/examples/contacts/client.js
===================================================================
--- trunk/examples/contacts/client.js	2006-03-09 17:25:25 UTC (rev 3)
+++ trunk/examples/contacts/client.js	2006-03-09 17:56:02 UTC (rev 4)
@@ -55,7 +55,7 @@
 		try {
 			var model = contacts.get(node.getAttribute('pkey'));
 			model.updateFrom(getView("views/edit.xsl"));
-			var d = model.update();
+			var d = model.save();
 			d.addCallback(function() {
 				contacts.select().reload();
 				index.render(contacts.select());

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-09 17:25:25 UTC (rev 3)
+++ trunk/lib/Freja.js	2006-03-09 17:56:02 UTC (rev 4)
@@ -186,7 +186,7 @@
   * Writes the model back to the remote service
   * @returns MochiKit.Async.Deferred
   */
-Freja.Model.prototype.update = function() {
+Freja.Model.prototype.save = function() {
 	var url = this.url;
 	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
 	if (match) {
@@ -301,11 +301,17 @@
 	connect(this, "onrendercomplete", bind(this.connectBehaviour, this));
 }
 /**
+  * @param    model            Freja.Model
+  * @param    placeholder      string    If supplied, this will be used instead of the
+  *                                      default placeholder.
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.prototype.render = function(model) {
+Freja.View.prototype.render = function(model, placeholder /* optional */ ) {
 	try {
-		this.destination = $(this.placeholder);
+		var id = (typeof(placeholder) == "undefined") ? this.placeholder : placeholder;
+		this.destination = $(id);
+		// @todo    Is this a good idea ?
+		// Perhaps we should leave it to the programmer to do this.
 		this.destination.innerHTML = Freja.AssetManager.THROBBER_HTML;
 		if (!this.ready) {
 			connect(this, "onload", bind(this.render, this, model));



From troelskn at berlios.de  Thu Mar  9 21:26:37 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Thu, 9 Mar 2006 21:26:37 +0100
Subject: [Freja-svn] r5 - in trunk: examples/contacts/models/php_inc lib
Message-ID: <200603092026.k29KQbtw010039@sheep.berlios.de>

Author: troelskn
Date: 2006-03-09 21:26:36 +0100 (Thu, 09 Mar 2006)
New Revision: 5

Modified:
   trunk/examples/contacts/models/php_inc/inc.resource.php
   trunk/lib/Freja.js
   trunk/lib/MochiKit.js
Log:
Changed http request methods to tunnel through POST.

Modified: trunk/examples/contacts/models/php_inc/inc.resource.php
===================================================================
--- trunk/examples/contacts/models/php_inc/inc.resource.php	2006-03-09 17:56:02 UTC (rev 4)
+++ trunk/examples/contacts/models/php_inc/inc.resource.php	2006-03-09 20:26:36 UTC (rev 5)
@@ -1,11 +1,20 @@
 <?php
-if ($_SERVER['REQUEST_METHOD'] == "PUT" || $_SERVER['REQUEST_METHOD'] == "POST") {
+$request_headers = apache_request_headers();
+if (isset($request_headers['Http-Method-Equivalent'])) {
+	$REQUEST_METHOD = $request_headers['Http-Method-Equivalent'];
+} else {
+	$REQUEST_METHOD = $_SERVER['REQUEST_METHOD'];
+}
+
+if ($REQUEST_METHOD == "PUT" || $REQUEST_METHOD == "POST") {
 	$RAW = file_get_contents('php://input');
 	$parser = new XML_Unserializer();
 	$PAYLOAD = $parser->unserialize($RAW);
 }
 
-switch ($_SERVER['REQUEST_METHOD']) {
+//error_log($REQUEST_METHOD."\n", 3, dirname(__FILE__)."/access.log");
+
+switch ($REQUEST_METHOD) {
 	case 'GET':
 		$row = $model->fetchByPK(@$_GET[$model->pkey]);
 		if (is_null($row)) {
@@ -58,7 +67,7 @@
 		echo xml_serialize('result', Array('status' => "ok"));
 	exit;
 	default:
-			trigger_error("Unrecognized request-method: " . $_SERVER['REQUEST_METHOD']);
+			trigger_error("Unrecognized request-method: " . $REQUEST_METHOD);
 	exit;
 }
 ?>
\ No newline at end of file

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-09 17:56:02 UTC (rev 4)
+++ trunk/lib/Freja.js	2006-03-09 20:26:36 UTC (rev 5)
@@ -193,11 +193,7 @@
 		url = match[1] + url; // local
 	}
 	var req = new XMLHttpRequest();
-	if (Freja.AssetManager.HTTP_REQUEST_TYPE == "sync") {
-		req.open("POST", url, false);
-	} else {
-		req.open("POST", url);
-	}
+	req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 	try {
 		// for some obscure reason exceptions aren't thrown back if I call the
 		// shorthand version of sendXMLHttpRequest in IE6.
@@ -221,10 +217,12 @@
 		url = match[1] + url; // local
 	}
 	var req = new XMLHttpRequest();
-	if (Freja.AssetManager.HTTP_REQUEST_TYPE == "sync") {
-		req.open("DELETE", url, false);
+	if (Freja.AssetManager.HTTP_METHOD_TUNNEL) {
+		req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
+		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "DELETE");
+		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 	} else {
-		req.open("DELETE", url);
+		req.open("DELETE", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 	}
 	return MochiKit.Async.sendXMLHttpRequest(req);
 }
@@ -272,10 +270,12 @@
 		url = match[1] + url; // local
 	}
 	var req = new XMLHttpRequest();
-	if (Freja.AssetManager.HTTP_REQUEST_TYPE == "sync") {
-		req.open("PUT", url, false);
+	if (Freja.AssetManager.HTTP_METHOD_TUNNEL) {
+		req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
+		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "PUT");
+		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 	} else {
-		req.open("PUT", url);
+		req.open("PUT", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 	}
 
 	var payload = {};
@@ -304,7 +304,6 @@
   * @param    model            Freja.Model
   * @param    placeholder      string    If supplied, this will be used instead of the
   *                                      default placeholder.
-  * @returns MochiKit.Async.Deferred
   */
 Freja.View.prototype.render = function(model, placeholder /* optional */ ) {
 	try {
@@ -447,7 +446,7 @@
 		}
 	}
 	req.open("POST", Freja.AssetManager.XSLT_SERVICE_URL, true);
-	req.setRequestHeader('Content-Type','application/x-www-form-urlencoded');
+	req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 	req.send(postedData);
 
 	return d;
@@ -466,6 +465,11 @@
   */
 Freja.AssetManager.HTTP_REQUEST_TYPE = "async";
 /**
+  * Experimental
+  */
+// Freja.AssetManager.HTTP_METHOD_TUNNEL = null;
+Freja.AssetManager.HTTP_METHOD_TUNNEL = "Http-Method-Equivalent";
+/**
   * url of the service to do the work.
   */
 Freja.AssetManager.XSLT_SERVICE_URL = "srvc-xslt.php";
@@ -573,7 +577,14 @@
 	}
 	try {
 		var req = new XMLHttpRequest();
-		req.open("GET", url, this.HTTP_REQUEST_TYPE == "async");
+		if (Freja.AssetManager.HTTP_METHOD_TUNNEL) {
+			req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
+			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
+			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+		} else {
+			req.open("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
+		}
+//		req.open("GET", url, this.HTTP_REQUEST_TYPE == "async");
 		var d = MochiKit.Async.sendXMLHttpRequest(req).addCallbacks(callback, onerror);
 		return d;
 	} catch (ex) {
@@ -584,7 +595,8 @@
 	}
 }
 Freja.AssetManager.onerror = function(ex) {
-	alert(ex.message);
+	throw ex;
+	alert("Freja.AssetManager.onerror\n" + ex.message);
 }
 /**
   * Global exports

Modified: trunk/lib/MochiKit.js
===================================================================
--- trunk/lib/MochiKit.js	2006-03-09 17:56:02 UTC (rev 4)
+++ trunk/lib/MochiKit.js	2006-03-09 20:26:36 UTC (rev 5)
@@ -28,7 +28,7 @@
         Mutate an object by replacing its key:value pairs with those
         from other object(s).  Key:value pairs from later objects will
         overwrite those from earlier objects.
-        
+
         If null is given as the initial object, a new one will be created.
 
         This mutates *and returns* the given object, be warned.
@@ -68,7 +68,7 @@
             return n++;
         };
     },
-        
+
     clone: function (obj) {
         var me = arguments.callee;
         if (arguments.length == 1) {
@@ -76,7 +76,7 @@
             return new me();
         }
     },
-            
+
     extend: function (self, obj, /* optional */skip) {
         /***
 
@@ -87,7 +87,7 @@
             This mutates *and returns* the given array, be warned.
 
         ***/
-        
+
         // Extend an array with an array-like object starting
         // from the skip index
         if (!skip) {
@@ -145,7 +145,7 @@
             Mutate an object by replacing its key:value pairs with those
             from other object(s) IF they are not already set on the initial
             object.
-            
+
             If null is given as the initial object, a new one will be created.
 
             This mutates *and returns* the given object, be warned.
@@ -178,7 +178,7 @@
         }
         return rval;
     },
-        
+
     items: function (obj) {
         /***
 
@@ -215,7 +215,7 @@
         ***/
 
         // unary logic operators
-        truth: function (a) { return !!a; }, 
+        truth: function (a) { return !!a; },
         lognot: function (a) { return !a; },
         identity: function (a) { return a; },
 
@@ -290,13 +290,13 @@
         objects are members of that set.
 
         ***/
-        
+
         var types = {};
         for (var i = 0; i < arguments.length; i++) {
             var typ = arguments[i];
             types[typ] = typ;
         }
-        return function () { 
+        return function () {
             for (var i = 0; i < arguments.length; i++) {
                 if (!(typeof(arguments[i]) in types)) {
                     return false;
@@ -390,7 +390,7 @@
 
     xmap: function (fn/*, obj... */) {
         /***
-        
+
             Return an array composed of fn(obj) for every obj given as an
             argument.
 
@@ -415,7 +415,7 @@
 
             If fn is null, and only one sequence argument is given the identity
             function is used.
-            
+
                 map(null, lst) -> lst.slice();
 
             If fn is null, and more than one sequence is given as arguments,
@@ -556,7 +556,7 @@
             return eval("(func(" + args.join(",") + "))");
         };
     },
-            
+
     bind: function (func, self/* args... */) {
         if (typeof(func) == "string") {
             func = self[func];
@@ -649,7 +649,7 @@
         /***
 
             Compare two objects in a sensible manner.  Currently this is:
-            
+
                 1. undefined and null compare equal to each other
                 2. undefined and null are less than anything else
                 3. comparators registered with registerComparator are
@@ -664,7 +664,7 @@
             returns:
 
                  0 when a == b
-                 1 when a > b 
+                 1 when a > b
                 -1 when a < b
 
         ***/
@@ -786,7 +786,7 @@
         return "[" + m.map(m.repr, o).join(", ") + "]";
     },
 
-    reprString: function (o) { 
+    reprString: function (o) {
         return ('"' + o.replace(/(["\\])/g, '\\$1') + '"'
             ).replace(/[\f]/g, "\\f"
             ).replace(/[\b]/g, "\\b"
@@ -802,7 +802,7 @@
     registerJSON: function (name, check, wrap, /* optional */override) {
         /***
 
-            Register a JSON serialization function.  JSON serialization 
+            Register a JSON serialization function.  JSON serialization
             functions should take one argument and return an object
             suitable for JSON serialization:
 
@@ -815,7 +815,7 @@
                 - Array-like (length property that is a number)
                 - Objects with a "json" method will have this method called
                 - Any other object will be used as {key:value, ...} pairs
-            
+
             If override is given, it is used as the highest priority
             JSON serialization, otherwise it will be used as the lowest.
 
@@ -912,11 +912,11 @@
         }
         return "{" + res.join(", ") + "}";
     },
-            
 
+
     objEqual: function (a, b) {
         /***
-            
+
             Compare the equality of two objects.
 
         ***/
@@ -1007,7 +1007,7 @@
         var m = MochiKit.Base;
         return m.bind.apply(this, m.extend([func, undefined], arguments, 1));
     },
-     
+
     listMinMax: function (which, lst) {
         /***
 
@@ -1021,7 +1021,7 @@
             If which == 1 then it will return the largest
             element of the array-like lst.  This is also available
             as:
-                
+
                 listMax(list)
 
         ***/
@@ -1041,13 +1041,13 @@
 
     objMax: function (/* obj... */) {
         /***
-        
+
             Return the maximum object out of the given arguments
 
         ***/
         return MochiKit.Base.listMinMax(1, arguments);
     },
-            
+
     objMin: function (/* obj... */) {
         /***
 
@@ -1081,7 +1081,7 @@
         }
         return -1;
     },
-    
+
     nodeWalk: function (node, visitor) {
         /***
 
@@ -1105,7 +1105,7 @@
         }
     },
 
-       
+
     nameFunctions: function (namespace) {
         var base = namespace.NAME;
         if (typeof(base) == 'undefined') {
@@ -1192,14 +1192,14 @@
         return o;
     }
 });
-    
+
 MochiKit.Base.AdapterRegistry = function () {
     /***
 
         A registry to facilitate adaptation.
 
         Pairs is an array of [name, check, wrap] triples
-        
+
         All check/wrap functions in this registry should be of the same arity.
 
     ***/
@@ -1209,7 +1209,7 @@
 MochiKit.Base.AdapterRegistry.prototype = {
     register: function (name, check, wrap, /* optional */ override) {
         /***
-            
+
             The check function should return true if the given arguments are
             appropriate for the wrap function.
 
@@ -1230,7 +1230,7 @@
         /***
 
             Find an adapter for the given arguments.
-            
+
             If no suitable adapter is found, throws NotFound.
 
         ***/
@@ -1435,7 +1435,7 @@
 
 if (typeof(JSAN) != 'undefined') {
     JSAN.use("MochiKit.Base", []);
-}   
+}
 
 try {
     if (typeof(MochiKit.Base) == 'undefined') {
@@ -1443,12 +1443,12 @@
     }
 } catch (e) {
     throw "MochiKit.Iter depends on MochiKit.Base!";
-}  
-            
+}
+
 if (typeof(MochiKit.Iter) == 'undefined') {
     MochiKit.Iter = {};
-}           
-        
+}
+
 MochiKit.Iter.NAME = "MochiKit.Iter";
 MochiKit.Iter.VERSION = "1.3";
 MochiKit.Base.update(MochiKit.Iter, {
@@ -1486,12 +1486,12 @@
 
             Convert the given argument to an iterator (object implementing
             "next").
-            
+
             1. If iterable is an iterator (implements "next"), then it will be
                returned as-is.
             2. If iterable is an iterator factory (implements "iter"), then the
                result of iterable.iter() will be returned.
-            3. Otherwise, the iterator factory registry is used to find a 
+            3. Otherwise, the iterator factory registry is used to find a
                match.
             4. If no factory is found, it will throw TypeError
 
@@ -1510,7 +1510,7 @@
                 }
 
         ***/
-        
+
         var self = MochiKit.Iter;
         if (arguments.length == 2) {
             return self.takewhile(
@@ -1592,7 +1592,7 @@
 
     repeat: function (elem, /* optional */n) {
         /***
-        
+
             repeat(elem, [,n]) --> elem, elem, elem, ... endlessly or up to n
                 times
 
@@ -1623,7 +1623,7 @@
             }
         };
     },
-            
+
     next: function (iterator) {
         /***
 
@@ -1703,11 +1703,11 @@
             }
         }
     },
-     
+
     islice: function (seq/*, [start,] stop[, step] */) {
         /***
 
-            islice(seq, [start,] stop[, step])  --> elements from 
+            islice(seq, [start,] stop[, step])  --> elements from
                 seq[start:stop:step] (in Python slice syntax)
 
         ***/
@@ -1767,7 +1767,7 @@
             }
         };
     },
-        
+
     applymap: function (fun, seq, self) {
         /***
 
@@ -1962,22 +1962,22 @@
         return undefined;
     },
 
-        
+
     reduce: function (fn, iterable, /* optional */initial) {
         /***
-        
+
             Apply a fn = function (a, b) cumulatively to the items of an
             iterable from left to right, so as to reduce the iterable
             to a single value.
 
             For example::
-            
+
                 reduce(function (a, b) { return x + y; }, [1, 2, 3, 4, 5])
 
             calculates::
 
                 ((((1 + 2) + 3) + 4) + 5).
-            
+
             If initial is given, it is placed before the items of the sequence
             in the calculation, and serves as a default when the sequence is
             empty.
@@ -2062,7 +2062,7 @@
             toString: MochiKit.Base.forward("repr")
         };
     },
-            
+
     sum: function (iterable, start/* = 0 */) {
         /***
 
@@ -2089,7 +2089,7 @@
         }
         return x;
     },
-            
+
     exhaust: function (iterable) {
         /***
 
@@ -2113,7 +2113,7 @@
 
     forEach: function (iterable, func, /* optional */self) {
         /***
-        
+
             Call func for each item in iterable.
 
         ***/
@@ -2201,11 +2201,11 @@
 
     iextend: function (lst, iterable) {
         /***
-            
+
             Just like list(iterable), except it pushes results on lst
-        
+
         ***/
-        
+
         if (MochiKit.Base.isArrayLike(iterable)) {
             // fast-path for array-like
             for (var i = 0; i < iterable.length; i++) {
@@ -2421,7 +2421,7 @@
     };
 
     m.nameFunctions(this);
-        
+
 };
 
 MochiKit.Iter.__new__();
@@ -2505,7 +2505,7 @@
 MochiKit.Logging.LogMessage.prototype = {
     repr: function () {
         var m = MochiKit.Base;
-        return 'LogMessage(' + 
+        return 'LogMessage(' +
             m.map(
                 m.repr,
                 [this.num, this.level, this.info]
@@ -2583,7 +2583,7 @@
             logger.warning  -> logWarning
             logger.error    -> logError
             logger.fatal    -> logFatal
-        
+
     ***/
     this.counter = 0;
     if (typeof(maxSize) == 'undefined' || maxSize == null) {
@@ -2623,10 +2623,10 @@
         /***
 
             Add a listener for log messages.
-            
+
             ident is a unique identifier that may be used to remove the listener
             later on.
-            
+
             filter can be one of the following:
                 null:
                     listener(msg) will be called for every log message
@@ -2649,13 +2649,13 @@
                 level:
                     A string or number representing the log level.  If string, you
                     may want to use LogLevel[level] for comparison.
-                
+
                 info:
                     A list of objects passed as arguments to the log function.
 
         ***/
-                
-                
+
+
         if (typeof(filter) == 'string') {
             filter = MochiKit.Logging.logLevelAtLeast(filter);
         }
@@ -2692,7 +2692,7 @@
             see the Logger constructor documentation for more info.
 
         ***/
-                
+
         var msg = new MochiKit.Logging.LogMessage(
             this.counter,
             level,
@@ -2742,7 +2742,7 @@
         var messages = this.getMessages(howMany);
         if (messages.length) {
             var lst = map(function (m) {
-                return '\n  [' + m.num + '] ' + m.level + ': ' + m.info.join(' '); 
+                return '\n  [' + m.num + '] ' + m.level + ': ' + m.info.join(' ');
             }, messages);
             lst.unshift('LAST ' + messages.length + ' MESSAGES:');
             return lst.join('');
@@ -2832,7 +2832,7 @@
 if (typeof(MochiKit) == 'undefined') {
     MochiKit = {};
 }
-       
+
 if (typeof(MochiKit.DateTime) == 'undefined') {
     MochiKit.DateTime = {};
 }
@@ -3061,7 +3061,7 @@
             } catch (e) {
                 // pass
             }
-        }   
+        }
     }
 };
 
@@ -3075,10 +3075,10 @@
             || (typeof(MochiKit.__compat__) == 'boolean' && MochiKit.__compat__)) {
             var all = module.EXPORT_TAGS[":all"];
             for (var i = 0; i < all.length; i++) {
-                globals[all[i]] = module[all[i]]; 
+                globals[all[i]] = module[all[i]];
             }
-        }   
-    })(this, MochiKit.DateTime);  
+        }
+    })(this, MochiKit.DateTime);
 }
 
 /***
@@ -3249,7 +3249,7 @@
 
 MochiKit.Format.twoDigitFloat = function (someFloat) {
     /***
-    
+
         Roughly equivalent to: sprintf("%.2f", someFloat)
 
     ***/
@@ -3388,10 +3388,10 @@
             || (typeof(MochiKit.__compat__) == 'boolean' && MochiKit.__compat__)) {
             var all = module.EXPORT_TAGS[":all"];
             for (var i = 0; i < all.length; i++) {
-                globals[all[i]] = module[all[i]]; 
+                globals[all[i]] = module[all[i]];
             }
-        }   
-    })(this, MochiKit.Format);  
+        }
+    })(this, MochiKit.Format);
 }
 
 /***
@@ -3466,14 +3466,14 @@
 
     The Deferred also keeps track of its current status (fired).
     Its status may be one of three things:
-    
+
         -1: no value yet (initial condition)
          0: success
          1: error
-    
+
     A Deferred will be in the error state if one of the following
     three conditions are met:
-    
+
     1. The result given to callback or errback is "instanceof" Error
     2. The previous callback or errback raised an exception while executing
     3. The previous callback or errback returned a value "instanceof" Error
@@ -3498,12 +3498,12 @@
         } else {
             result = myCallback(result);
         }
-    
+
     The result is then stored away in case another step is added to the
     callback sequence.  Since the Deferred already has a value available,
     any new callbacks added will be called immediately.
 
-    There are two other "advanced" details about this implementation that are 
+    There are two other "advanced" details about this implementation that are
     useful:
 
     Callbacks are allowed to return Deferred instances themselves, so
@@ -3516,10 +3516,10 @@
     CancelledError (unless your canceller returns another kind of error),
     so the errbacks should be prepared to handle that error for cancellable
     Deferreds.
-    
+
     ***/
 
-    
+
     this.chain = [];
     this.id = this._nextId();
     this.fired = -1;
@@ -3572,8 +3572,8 @@
             this.results[0].cancel();
         }
     },
-            
 
+
     _pause: function () {
         /***
 
@@ -3631,7 +3631,7 @@
         /***
 
         Begin the callback sequence with a non-error value.
-        
+
         callback or errback should only be called once
         on a given Deferred.
 
@@ -3835,7 +3835,7 @@
 
     sendXMLHttpRequest: function (req, /* optional */ sendContent) {
         if (typeof(sendContent) == 'undefined') {
-            sendContent = null;
+            sendContent = "";
         }
 
         var canceller = function () {
@@ -3853,7 +3853,7 @@
 
         var self = MochiKit.Async;
         var d = new self.Deferred(canceller);
-        
+
         var onreadystatechange = function () {
             // MochiKit.Logging.logDebug('req.readyState', req.readyState);
             if (req.readyState == 4) {
@@ -3881,7 +3881,7 @@
                 if (status == 200 || status == 304) { // OK
                     d.callback(req);
                 } else {
-                    var err = new self.XMLHttpRequestError(req, "Request failed");
+                    var err = new self.XMLHttpRequestError(req, "Request failed:" + status);
                     if (err.number) {
                         // XXX: This seems to happen on page change
                         d.errback(err);
@@ -4029,7 +4029,7 @@
     "sendXMLHttpRequest",
     "DeferredLock"
 ];
-    
+
 MochiKit.Async.EXPORT_OK = [
     "evalJSONRequest"
 ];
@@ -4037,7 +4037,7 @@
 MochiKit.Async.__new__ = function () {
     var m = MochiKit.Base;
     var ne = m.partial(m._newNamedError, this);
-    ne("AlreadyCalledError", 
+    ne("AlreadyCalledError",
         function (deferred) {
             /***
 
@@ -4074,7 +4074,7 @@
         }
     );
 
-    ne("GenericError", 
+    ne("GenericError",
         function (msg) {
             this.message = msg;
         }
@@ -4259,19 +4259,19 @@
     setOpacity: function(elem, o) {
         elem = MochiKit.DOM.getElement(elem);
         MochiKit.DOM.updateNodeAttributes(elem, {'style': {
-                'opacity': o, 
+                'opacity': o,
                 '-moz-opacity': o,
                 '-khtml-opacity': o,
                 'filter':' alpha(opacity=' + (o * 100) + ')'
             }});
     },
-    
+
     getViewportDimensions: function() {
         var d = new MochiKit.DOM.Dimensions();
-        
+
         var w = MochiKit.DOM._window;
         var b = MochiKit.DOM._document.body;
-        
+
         if (w.innerWidth) {
             d.w = w.innerWidth;
             d.h = w.innerHeight;
@@ -4295,7 +4295,7 @@
             return undefined;
         }
         if (self.computedStyle(elem, 'display') != 'none') {
-            return new self.Dimensions(elem.offsetWidth || 0, 
+            return new self.Dimensions(elem.offsetWidth || 0,
                 elem.offsetHeight || 0);
         }
         var s = elem.style;
@@ -4312,7 +4312,7 @@
         return new self.Dimensions(originalWidth, originalHeight);
     },
 
-    /* 
+    /*
     elementPosition is adapted from YAHOO.util.Dom.getXY, version 0.9.0.
     Copyright: Copyright (c) 2006, Yahoo! Inc. All rights reserved.
     BSD License: http://developer.yahoo.net/yui/license.txt
@@ -4320,19 +4320,19 @@
     elementPosition: function (elem, /* optional */relativeTo) {
         var self = MochiKit.DOM;
         elem = self.getElement(elem);
-        
-        if (!elem || 
-            elem.parentNode === null || 
+
+        if (!elem ||
+            elem.parentNode === null ||
             self.computedStyle(elem, 'display') == 'none') {
             return undefined;
         }
-        
+
         var c = new self.Coordinates(0, 0);
         var box = null;
         var parent = null;
-        
+
         var d = MochiKit.DOM._document;
-        
+
         if (typeof(relativeTo) != 'undefined') {
             relativeTo = arguments.callee(relativeTo);
             if (relativeTo) {
@@ -4340,18 +4340,18 @@
                 c.y -= (relativeTo.y || 0);
             }
         }
-        
+
         if (elem.getBoundingClientRect) { // IE shortcut
             box = elem.getBoundingClientRect();
-            
-            c.x += box.left + 
-                (d.documentElement.scrollLeft || 
+
+            c.x += box.left +
+                (d.documentElement.scrollLeft ||
                 d.body.scrollLeft);
-            
-            c.y += box.top + 
-                (d.documentElement.scrollTop || 
+
+            c.y += box.top +
+                (d.documentElement.scrollTop ||
                 d.body.scrollTop);
-            
+
             return c;
         } else if (d.getBoxObjectFor) { // Gecko shortcut
             box = d.getBoxObjectFor(elem);
@@ -4361,7 +4361,7 @@
             c.x += elem.offsetLeft;
             c.y += elem.offsetTop;
             parent = elem.offsetParent;
-            
+
             if (parent != elem) {
                 while (parent) {
                     c.x += parent.offsetLeft;
@@ -4372,12 +4372,12 @@
 
             // opera & (safari absolute) incorrectly account for body offsetTop
             var ua = navigator.userAgent.toLowerCase();
-            if (ua.indexOf('opera') != -1 || 
-                (ua.indexOf('safari') != -1 && 
+            if (ua.indexOf('opera') != -1 ||
+                (ua.indexOf('safari') != -1 &&
                 self.computedStyle(elem, 'position') == 'absolute')) {
-                
+
                 c.y -= d.body.offsetTop;
-                
+
             }
         } else {
             /* it's just a MochiKit.DOM.Coordinates object */
@@ -4385,37 +4385,37 @@
             c.y += elem.y || 0;
             return c;
         }
-        
+
         if (elem.parentNode) {
             parent = elem.parentNode;
         } else {
             parent = null;
         }
-        
+
         while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') {
             c.x -= parent.scrollLeft;
-            c.y -= parent.scrollTop;        
+            c.y -= parent.scrollTop;
             if (parent.parentNode) {
                 parent = parent.parentNode;
             } else {
                 parent = null;
             }
         }
-        
+
         return c;
     },
-    
+
     setElementDimensions: function (elem, newSize/* optional */, units) {
         elem = MochiKit.DOM.getElement(elem);
         if (typeof(units) == 'undefined') {
             units = 'px';
         }
         MochiKit.DOM.updateNodeAttributes(elem, {'style': {
-            'width': newSize.w + units, 
+            'width': newSize.w + units,
             'height': newSize.h + units
         }});
     },
-    
+
     setElementPosition: function (elem, newPos/* optional */, units) {
         elem = MochiKit.DOM.getElement(elem);
         if (typeof(units) == 'undefined') {
@@ -4426,7 +4426,7 @@
             'top': newPos.y + units
         }});
     },
-    
+
     currentWindow: function () {
         return MochiKit.DOM._window;
     },
@@ -4596,7 +4596,7 @@
         // mozilla warnings aren't too bright
         return undefined;
     },
-        
+
     setNodeAttribute: function (node, attr, value) {
         var o = {};
         o[attr] = value;
@@ -4819,7 +4819,7 @@
     computedStyle: function (htmlElement, cssProperty, mozillaEquivalentCSS) {
         if (arguments.length == 2) {
             mozillaEquivalentCSS = cssProperty;
-        }   
+        }
         var self = MochiKit.DOM;
         var el = self.getElement(htmlElement);
         var document = self._document;
@@ -4919,7 +4919,7 @@
         ***/
         var self = MochiKit.DOM;
         self.addToCallStack(self._window, "onload", func, true);
-        
+
     },
 
     focusOnLoad: function (element) {
@@ -4931,12 +4931,12 @@
             }
         });
     },
-            
+
     setElementClass: function (element, className) {
         /***
 
             Set the entire class attribute of an element to className.
-        
+
         ***/
         var self = MochiKit.DOM;
         var obj = self.getElement(element);
@@ -4946,10 +4946,10 @@
             obj.setAttribute("className", className);
         }
     },
-            
+
     toggleElementClass: function (className/*, element... */) {
         /***
-        
+
             Toggle the presence of a given className in the class attribute
             of all given elements.
 
@@ -5044,7 +5044,7 @@
 
     hasElementClass: function (element, className/*...*/) {
         /***
-          
+
           Return true if className is found in the element
 
         ***/
@@ -5175,7 +5175,7 @@
 
     scrapeText: function (node, /* optional */asArray) {
         /***
-        
+
             Walk a DOM tree in-order and scrape all of the text out of it as a
             string or an Array
 
@@ -5207,8 +5207,8 @@
         this._document = document;
         this._window = win;
 
-        this.domConverters = new m.AdapterRegistry(); 
-        
+        this.domConverters = new m.AdapterRegistry();
+
         var __tmpElement = this._document.createElement("span");
         var attributeArray;
         if (__tmpElement && __tmpElement.attributes &&
@@ -5235,7 +5235,7 @@
         } else {
             attributeArray = function (node) {
                 /***
-                    
+
                     Return an array of attributes for a given node,
                     filtering out attributes that don't belong for
                     that are inserted by "Certain Browsers".
@@ -5289,7 +5289,7 @@
         this.hideElement = m.partial(this.setDisplayForElement, "none");
         this.showElement = m.partial(this.setDisplayForElement, "block");
         this.removeElement = this.swapDOM;
-        
+
         this.$ = this.getElement;
 
         this.EXPORT_TAGS = {
@@ -5404,7 +5404,7 @@
     }
     var doc = win.document;
     this.doc = doc;
-    
+
     // Connect to the debug pane if it already exists (i.e. in a window orphaned by the page being refreshed)
     var debugPane = doc.getElementById(uid);
     var existing_pane = !!debugPane;
@@ -5413,7 +5413,7 @@
         debugPane.loggingPane.buildAndApplyFilter();
         return debugPane.loggingPane;
     }
-    
+
     if (existing_pane) {
         // clear any existing contents
         var child;
@@ -5658,11 +5658,11 @@
         ":common": this.EXPORT,
         ":all": MochiKit.Base.concat(this.EXPORT, this.EXPORT_OK)
     };
-    
+
     MochiKit.Base.nameFunctions(this);
 
     MochiKit.LoggingPane._loggingPane = null;
-  
+
 };
 
 MochiKit.LoggingPane.__new__();
@@ -5801,7 +5801,7 @@
             [b.r, b.g, b.b, b.a]
         );
     },
-        
+
     isLight: function () {
         return this.asHSL().b > 0.5;
     },
@@ -5817,7 +5817,7 @@
         if (!rval) {
             var mid = (
                 ccc(c.h, 360).toFixed(0)
-                + "," + ccc(c.s, 100).toPrecision(4) + "%" 
+                + "," + ccc(c.s, 100).toPrecision(4) + "%"
                 + "," + ccc(c.l, 100).toPrecision(4) + "%"
             );
             var a = c.a;
@@ -5865,7 +5865,7 @@
         var ccc = MochiKit.Color.clampColorComponent;
         var rval = this._hexString;
         if (!rval) {
-            rval = ("#" + 
+            rval = ("#" +
                 m.toColorPart(ccc(c.r, 255)) +
                 m.toColorPart(ccc(c.g, 255)) +
                 m.toColorPart(ccc(c.b, 255))
@@ -5981,13 +5981,13 @@
         var Color = MochiKit.Color.Color;
         return Color.fromRGB.apply(Color, components);
     },
-        
 
+
     _fromColorString: function (pre, method, scales, colorCode) {
         // parses either HSL or RGB
         if (colorCode.indexOf(pre) == 0) {
             colorCode = colorCode.substring(colorCode.indexOf("(", 3) + 1, colorCode.length - 1);
-        } 
+        }
         var colorChunks = colorCode.split(/\s*,\s*/);
         var colorFloats = [];
         for (var i = 0; i < colorChunks.length; i++) {
@@ -6007,7 +6007,7 @@
         }
         return this[method].apply(this, colorFloats);
     },
-    
+
     fromComputedStyle: function (elem, style, mozillaEquivalentCSS) {
         var d = MochiKit.DOM;
         var cls = MochiKit.Color.Color;
@@ -6075,7 +6075,7 @@
         }
         return val;
     },
-        
+
     hsvToRGB: function (hue, saturation, value, alpha) {
         if (arguments.length == 1) {
             var hsv = hue;
@@ -6194,7 +6194,7 @@
             a: alpha
         };
     },
-            
+
     rgbToHSL: function (red, green, blue, alpha) {
         if (arguments.length == 1) {
             var rgb = red;
@@ -6232,7 +6232,7 @@
             if (hue > 1) {
                 hue -= 1;
             }
-            
+
         }
         return {
             h: hue,
@@ -6260,7 +6260,7 @@
             this.Color._fromColorString, this.Color, "hsl", "fromHSL",
             [1.0/360.0, 0.01, 0.01, 1]
         );
-        
+
         var third = 1.0 / 3.0;
         var colors = {
             // NSColor colors plus transparent
@@ -6312,7 +6312,7 @@
         m.nameFunctions(this);
 
         m.registerComparator(this.Color.NAME, isColor, compareColor);
-            
+
         this.EXPORT_TAGS = {
             ":common": this.EXPORT,
             ":all": m.concat(this.EXPORT, this.EXPORT_OK)
@@ -6780,7 +6780,7 @@
         this.type().indexOf('click') != -1 ||
         this.type() == 'contextmenu')) {
 
-        str += ', mouse(): {page: ' + repr(this.mouse().page) + 
+        str += ', mouse(): {page: ' + repr(this.mouse().page) +
             ', client: ' + repr(this.mouse().client);
 
         if (this.type() != 'mousemove') {
@@ -6876,18 +6876,18 @@
                 } else {
                     src.__signals[sig] = undefined;
                 }
-                
+
                 src.__listeners[sig] = undefined;
-                
+
                 // delete removes object properties, not variables
                 delete(src.__listeners);
                 delete(src.__signals);
-                
+
             } catch(e) {
                 // clean IE garbage
             }
         }
-        
+
         MochiKit.Signal._observers = undefined;
 
         try {



From troelskn at berlios.de  Thu Mar  9 21:47:22 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Thu, 9 Mar 2006 21:47:22 +0100
Subject: [Freja-svn] r6 - trunk/lib
Message-ID: <200603092047.k29KlM02008053@sheep.berlios.de>

Author: troelskn
Date: 2006-03-09 21:47:21 +0100 (Thu, 09 Mar 2006)
New Revision: 6

Modified:
   trunk/lib/Freja.js
Log:
fixed error with loading of views

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-09 20:26:36 UTC (rev 5)
+++ trunk/lib/Freja.js	2006-03-09 20:47:21 UTC (rev 6)
@@ -236,7 +236,7 @@
 		this.ready = true;
 		MochiKit.Signal.signal(this, "onload");
 	}, this);
-	return Freja.AssetManager.loadAsset(this.url, onload, Freja.AssetManager.onerror);
+	return Freja.AssetManager.loadAsset(this.url, true, onload, Freja.AssetManager.onerror);
 }
 
 /**
@@ -522,7 +522,7 @@
 		this.ready = true;
 		MochiKit.Signal.signal(this, "onload");
 	}, m);
-	this.loadAsset(url, onload, Freja.AssetManager.onerror);
+	this.loadAsset(url, true, onload, Freja.AssetManager.onerror);
 	this.models.push(m);
 	return m;
 }
@@ -542,7 +542,7 @@
 		this.ready = true;
 		MochiKit.Signal.signal(this, "onload");
 	}, v);
-	this.loadAsset(url, onload, Freja.AssetManager.onerror);
+	this.loadAsset(url, false, onload, Freja.AssetManager.onerror);
 	this.views.push(v);
 	return v;
 }
@@ -553,7 +553,7 @@
   *       callback() have completed ...
   * @returns MochiKit.Async.Deferred
   */
-Freja.AssetManager.loadAsset = function(url, onload, onerror) {
+Freja.AssetManager.loadAsset = function(url, preventCaching, onload, onerror) {
 	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
@@ -577,7 +577,7 @@
 	}
 	try {
 		var req = new XMLHttpRequest();
-		if (Freja.AssetManager.HTTP_METHOD_TUNNEL) {
+		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
 			req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
@@ -595,7 +595,6 @@
 	}
 }
 Freja.AssetManager.onerror = function(ex) {
-	throw ex;
 	alert("Freja.AssetManager.onerror\n" + ex.message);
 }
 /**



From troelskn at berlios.de  Sat Mar 11 01:53:06 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sat, 11 Mar 2006 01:53:06 +0100
Subject: [Freja-svn] r7 - trunk/lib
Message-ID: <200603110053.k2B0r6o9004521@sheep.berlios.de>

Author: troelskn
Date: 2006-03-11 01:53:04 +0100 (Sat, 11 Mar 2006)
New Revision: 7

Modified:
   trunk/lib/Freja.js
Log:
Integrated MochiKit.Async.Deferred further into the system.

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-09 20:47:21 UTC (rev 6)
+++ trunk/lib/Freja.js	2006-03-11 00:53:04 UTC (rev 7)
@@ -1,4 +1,12 @@
 /**
+  * Freja - a javascript Model-View-Controller Framework geared toward Zero-Latency Web Applications
+  *
+  * Copyright (c) 2006 C?dric Savarese <pro at 4213miles.com>, Troels Knak-Nielsen <troelskn at gmail.com>
+  * This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>
+  *
+  * Documentation : http://www.csscripting.com/freja/
+  */
+/**
   * Package : begin
   */
 if (typeof(dojo) != "undefined") {
@@ -192,22 +200,23 @@
 	if (match) {
 		url = match[1] + url; // local
 	}
+	// since the serialization may fail, we create a deferred for the
+	// purpose, rather than just returning the sendXMLHttpRequest directly.
+	var d = new MochiKit.Async.Deferred();
+
 	var req = new XMLHttpRequest();
 	req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 	try {
 		// for some obscure reason exceptions aren't thrown back if I call the
 		// shorthand version of sendXMLHttpRequest in IE6.
-		return MochiKit.Async.sendXMLHttpRequest(req, Sarissa.serialize(this.document));
+		MochiKit.Async.sendXMLHttpRequest(req, Sarissa.serialize(this.document)).addCallbacks(bind(d.callback, d), bind(d.errback, d));
 	} catch (ex) {
-		var e  = new Error("Can't complete request for : " + url);
-		e.innerException = ex;
-		throw e;
+		d.errback(ex);
 	}
+	return d;
 }
 /**
   * Deletes the model from the remote service
-  * @todo This doesn't work on Opera since it doesn't support HTTP-DELETE method.
-  *       We have to make workaround of sorts ...
   * @returns MochiKit.Async.Deferred
   */
 Freja.Model.prototype._delete = function() {
@@ -236,20 +245,27 @@
 		this.ready = true;
 		MochiKit.Signal.signal(this, "onload");
 	}, this);
-	return Freja.AssetManager.loadAsset(this.url, true, onload, Freja.AssetManager.onerror);
+	var d = Freja.AssetManager.loadAsset(this.url, true);
+	d.addCallbacks(onload, Freja.AssetManager.onerror);
+	return d;
 }
 
 /**
-  * Experimental
+  * DataSource provides a gateway-type interface to a model service.
   */
 Freja.Model.DataSource = function(baseURL, selectURL) {
 	this.baseURL = baseURL;
 	this.selectURL = selectURL;
 }
-
+/**
+  * Returns a list of primary-keys to records in the datasource
+  */
 Freja.Model.DataSource.prototype.select = function() {
 	return getModel(this.selectURL);
 };
+/**
+  * Returns a single record from a primary-key
+  */
 Freja.Model.DataSource.prototype.get = function(pkey) {
 	try {
 		var args = eval("(" + pkey + ")");
@@ -260,8 +276,8 @@
 	return getModel(url);
 };
 /**
-  * @todo This doesn't work on Opera since it doesn't support HTTP-PUT method.
-  *       We have to make workaround of sorts ...
+  * Creates a new instance of a record
+  * @todo errback to the deferred on errors
   */
 Freja.Model.DataSource.prototype.create = function(values) {
 	var url = this.baseURL;
@@ -304,6 +320,7 @@
   * @param    model            Freja.Model
   * @param    placeholder      string    If supplied, this will be used instead of the
   *                                      default placeholder.
+  * @todo  Return a deferred
   */
 Freja.View.prototype.render = function(model, placeholder /* optional */ ) {
 	try {
@@ -522,7 +539,7 @@
 		this.ready = true;
 		MochiKit.Signal.signal(this, "onload");
 	}, m);
-	this.loadAsset(url, true, onload, Freja.AssetManager.onerror);
+	this.loadAsset(url, true).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.models.push(m);
 	return m;
 }
@@ -542,25 +559,25 @@
 		this.ready = true;
 		MochiKit.Signal.signal(this, "onload");
 	}, v);
-	this.loadAsset(url, false, onload, Freja.AssetManager.onerror);
+	this.loadAsset(url, false).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.views.push(v);
 	return v;
 }
 /**
-  * @todo Use the Deferred to assign onlaod + onerror
-  *       Possibly the XMLHttpRequest-Deferred shouldn't be returned directly,
-  *       but rather a new Deferred should be constructed to trigger when
-  *       callback() have completed ...
   * @returns MochiKit.Async.Deferred
   */
-Freja.AssetManager.loadAsset = function(url, preventCaching, onload, onerror) {
+Freja.AssetManager.loadAsset = function(url, preventCaching) {
 	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
 	}
-	var callback = function(transport) {
+	var d = new MochiKit.Async.Deferred();
+	var handler = function(transport) {
 		try {
-			if (transport.responseText != "" && transport.responseXML.xml == "") {
+			if (transport.responseText == "") {
+				throw new Error("Empty response.");
+			}
+			if (transport.responseXML.xml == "") {
 				// The server doesn't reply with Content-Type: text/xml
 				// this will happen if the file is loaded locally (through file://)
 				var document = (new DOMParser()).parseFromString(transport.responseText, "text/xml");
@@ -568,12 +585,9 @@
 				var document = transport.responseXML;
 			}
 		} catch (ex) {
-			if (onerror) {
-				onerror(ex);
-			}
-			throw ex;
+			d.errback(ex);
 		}
-		onload(document);
+		d.callback(document);
 	}
 	try {
 		var req = new XMLHttpRequest();
@@ -585,14 +599,11 @@
 			req.open("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 		}
 //		req.open("GET", url, this.HTTP_REQUEST_TYPE == "async");
-		var d = MochiKit.Async.sendXMLHttpRequest(req).addCallbacks(callback, onerror);
-		return d;
+		var comm = MochiKit.Async.sendXMLHttpRequest(req).addCallbacks(handler, bind(d.errback, d));
 	} catch (ex) {
-		if (onerror) {
-			onerror(ex);
-		}
-		throw ex;
+		d.errback(ex);
 	}
+	return d;
 }
 Freja.AssetManager.onerror = function(ex) {
 	alert("Freja.AssetManager.onerror\n" + ex.message);



From troelskn at berlios.de  Sat Mar 11 20:24:26 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sat, 11 Mar 2006 20:24:26 +0100
Subject: [Freja-svn] r8 - trunk/lib
Message-ID: <200603111924.k2BJOPVu015464@sheep.berlios.de>

Author: troelskn
Date: 2006-03-11 20:24:24 +0100 (Sat, 11 Mar 2006)
New Revision: 8

Modified:
   trunk/lib/Freja.js
Log:
Added Basic HTTP-Authorization

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-11 00:53:04 UTC (rev 7)
+++ trunk/lib/Freja.js	2006-03-11 19:24:24 UTC (rev 8)
@@ -65,6 +65,43 @@
 	subClass.prototype.superClass = superClass;
 }
 /**
+  * This code was written by Tyler Akins and has been placed in the
+  * public domain.  It would be nice if you left this header intact.
+  * Base64 code from Tyler Akins -- http://rumkin.com
+  */
+Freja.Base64 = {};
+Freja.Base64.keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
+Freja.Base64.encode = function(input) {
+	var output = "";
+	var chr1, chr2, chr3;
+	var enc1, enc2, enc3, enc4;
+	var i = 0;
+	var keyStr = this.keyStr;
+
+	do {
+		chr1 = input.charCodeAt(i++);
+		chr2 = input.charCodeAt(i++);
+		chr3 = input.charCodeAt(i++);
+
+		enc1 = chr1 >> 2;
+		enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
+		enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
+		enc4 = chr3 & 63;
+
+		if (isNaN(chr2)) {
+			enc3 = enc4 = 64;
+		} else if (isNaN(chr3)) {
+			enc4 = 64;
+		}
+
+		output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +
+		keyStr.charAt(enc3) + keyStr.charAt(enc4);
+	} while (i < input.length);
+
+	return output;
+}
+
+/**
   * The baseclass for queryengines
   * @abstract
   */
@@ -206,6 +243,10 @@
 
 	var req = new XMLHttpRequest();
 	req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
+	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
+		req.setRequestHeader("Authorization", auth);
+	}
 	try {
 		// for some obscure reason exceptions aren't thrown back if I call the
 		// shorthand version of sendXMLHttpRequest in IE6.
@@ -233,6 +274,10 @@
 	} else {
 		req.open("DELETE", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 	}
+	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
+		req.setRequestHeader("Authorization", auth);
+	}
 	return MochiKit.Async.sendXMLHttpRequest(req);
 }
 /**
@@ -293,6 +338,10 @@
 	} else {
 		req.open("PUT", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 	}
+	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
+		req.setRequestHeader("Authorization", auth);
+	}
 
 	var payload = {};
 	for (var i = 0, len = values[0].length; i < len; ++i) {
@@ -464,6 +513,10 @@
 	}
 	req.open("POST", Freja.AssetManager.XSLT_SERVICE_URL, true);
 	req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
+		req.setRequestHeader("Authorization", auth);
+	}
 	req.send(postedData);
 
 	return d;
@@ -478,16 +531,21 @@
 	undoHistory : []	// this isn't used atm
 }
 /**
+  * Set to sync to make all requests synchroneous. You shouldn't use
+  * this setting for anything but testing/debugging.
   * "async" | "sync"
   */
 Freja.AssetManager.HTTP_REQUEST_TYPE = "async";
 /**
-  * Experimental
+  * If this is set to NULL, real PUT and DELETE http-requests will be made,
+  * otherwise a header will be set instead, and the request tunneled through
+  * POST. For compatibility, you should use tunneling.
   */
 // Freja.AssetManager.HTTP_METHOD_TUNNEL = null;
 Freja.AssetManager.HTTP_METHOD_TUNNEL = "Http-Method-Equivalent";
 /**
-  * url of the service to do the work.
+  * Set this url to provide remote xslt-transformation for browsers that
+  * doesn't support it natively.
   */
 Freja.AssetManager.XSLT_SERVICE_URL = "srvc-xslt.php";
 /**
@@ -495,6 +553,11 @@
   */
 Freja.AssetManager.THROBBER_HTML = "<span style='color:white;background:firebrick'>Loading ...</span>";
 /**
+  * Set USERNAME + PASSWORD to authenticate with basic HTTP-Authorization.
+  */
+Freja.AssetManager.USERNAME = null;
+Freja.AssetManager.PASSWORD = null;
+/**
   * returns an instance of the queryengine to use
   */
 Freja.AssetManager.createQueryEngine = function() {
@@ -598,6 +661,10 @@
 		} else {
 			req.open("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
 		}
+		if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+			var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
+			req.setRequestHeader("Authorization", auth);
+		}
 //		req.open("GET", url, this.HTTP_REQUEST_TYPE == "async");
 		var comm = MochiKit.Async.sendXMLHttpRequest(req).addCallbacks(handler, bind(d.errback, d));
 	} catch (ex) {



From troelskn at berlios.de  Sun Mar 12 16:56:33 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sun, 12 Mar 2006 16:56:33 +0100
Subject: [Freja-svn] r9 - trunk/lib
Message-ID: <200603121556.k2CFuXXJ007202@sheep.berlios.de>

Author: troelskn
Date: 2006-03-12 16:56:31 +0100 (Sun, 12 Mar 2006)
New Revision: 9

Modified:
   trunk/lib/Freja.js
Log:
minor change

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-11 19:24:24 UTC (rev 8)
+++ trunk/lib/Freja.js	2006-03-12 15:56:31 UTC (rev 9)
@@ -432,7 +432,11 @@
 						var handler = handlers[id];
 						if (handler) {
 							for (var eventType in handler) {
-								connectCallback(child, eventType, handler[eventType]);
+								if (eventType == "init") {
+									handler.init(child);
+								} else {
+									connectCallback(child, eventType, handler[eventType]);
+								}
 							}
 						}
 					}



From troelskn at berlios.de  Sun Mar 19 03:27:25 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sun, 19 Mar 2006 03:27:25 +0100
Subject: [Freja-svn] r11 - in trunk: examples/contacts examples/contacts/models/php_inc examples/contacts/views lib
Message-ID: <200603190227.k2J2RP6v027552@sheep.berlios.de>

Author: troelskn
Date: 2006-03-19 03:27:16 +0100 (Sun, 19 Mar 2006)
New Revision: 11

Modified:
   trunk/examples/contacts/client.js
   trunk/examples/contacts/models/php_inc/inc.resource.php
   trunk/examples/contacts/models/php_inc/inc.select.php
   trunk/examples/contacts/models/php_inc/stdinc.php
   trunk/examples/contacts/views/edit.xsl
   trunk/examples/contacts/views/index.xsl
   trunk/lib/Freja.js
Log:
Small changes to Model.DataSource

Modified: trunk/examples/contacts/client.js
===================================================================
--- trunk/examples/contacts/client.js	2006-03-19 01:41:45 UTC (rev 10)
+++ trunk/examples/contacts/client.js	2006-03-19 02:27:16 UTC (rev 11)
@@ -7,7 +7,8 @@
 index.placeholder = "content";
 index.handlers["edit"] = {
 	onclick : function(node) {
-		edit.render(contacts.get(node.getAttribute('pkey')));
+//		edit.render(contacts.get(node.getAttribute('pkey')));
+		edit.render(getModel(node.getAttribute('url')));
 	}
 };
 index.handlers["delete"] = {
@@ -15,7 +16,8 @@
 		if (!confirm("Really delete it?")) {
 			return;
 		}
-		var model = contacts.get(node.getAttribute('pkey'));
+//		var model = contacts.get(node.getAttribute('pkey'));
+		var model = getModel(node.getAttribute('url'));
 		var d = model._delete()
 		d.addCallback(function() {
 			contacts.select().reload();
@@ -54,7 +56,8 @@
 edit.handlers["form"] = {
 	onsubmit : function(node) {
 		try {
-			var model = contacts.get(node.getAttribute('pkey'));
+//			var model = contacts.get(node.getAttribute('pkey'));
+			var model = getModel(node.getAttribute('url'));
 			model.updateFrom(getView("views/edit.xsl"));
 			var d = model.save();
 			d.addCallback(function() {

Modified: trunk/examples/contacts/models/php_inc/inc.resource.php
===================================================================
--- trunk/examples/contacts/models/php_inc/inc.resource.php	2006-03-19 01:41:45 UTC (rev 10)
+++ trunk/examples/contacts/models/php_inc/inc.resource.php	2006-03-19 02:27:16 UTC (rev 11)
@@ -23,7 +23,7 @@
 		}
 		header("Content-Type:text/xml");
 		echo "<?xml version='1.0' ?".">";
-		$row['pkey'] = json_serialize(Array($model->pkey => $row[$model->pkey]));
+		$row['url'] = url($_SERVER['PHP_SELF'], Array($model->pkey => $row[$model->pkey]));
 		echo xml_serialize('record', $row);
 	exit;
 	case 'PUT':

Modified: trunk/examples/contacts/models/php_inc/inc.select.php
===================================================================
--- trunk/examples/contacts/models/php_inc/inc.select.php	2006-03-19 01:41:45 UTC (rev 10)
+++ trunk/examples/contacts/models/php_inc/inc.select.php	2006-03-19 02:27:16 UTC (rev 11)
@@ -4,7 +4,8 @@
 echo "<?xml version='1.0' ?>";
 echo "<result>\n";
 foreach ($result as $row) {
-	$row['pkey'] = json_serialize($row);
+	$row['url'] = url(dirname($_SERVER['PHP_SELF'])."/contact.php", Array($model->pkey => $row[$model->pkey]));
+//	$row['pkey'] = json_serialize($row);
 	echo xml_serialize('record', $row);
 }
 echo "</result>\n";

Modified: trunk/examples/contacts/models/php_inc/stdinc.php
===================================================================
--- trunk/examples/contacts/models/php_inc/stdinc.php	2006-03-19 01:41:45 UTC (rev 10)
+++ trunk/examples/contacts/models/php_inc/stdinc.php	2006-03-19 02:27:16 UTC (rev 11)
@@ -236,6 +236,40 @@
 	return "{".implode(",", $pairs)."}";
 }
 
+function url($href = NULL, $args = Array()) {
+	if (is_null($href)) {
+		$href = $_SERVER['PHP_SELF'];
+	}
+	$href = ltrim($href, "/");
+	$href = rtrim($href, "?");
+	if (!preg_match("~^http://~", $href)) {
+		if (isset($_SERVER['HTTP_HOST'])) {
+			$href = "http://".$_SERVER['HTTP_HOST']."/".$href;
+		} else {
+			$href = "http://localhost/".$href;
+		}
+	}
+	if (preg_match("/(.*)\\?(.*)/", $href, $matches)) {
+		$href = $matches[1];
+		parse_str($matches[2], $parsed);
+		$args = array_merge($parsed, $args);
+	}
+	$params = Array();
+	foreach ($args as $key => $value) {
+		if (!is_null($value)) {
+			$params[] = rawurlencode($key)."=".rawurlencode($value);
+		}
+	}
+	if (count($params) > 0) {
+		if (strpos($href, "?") === FALSE) {
+			return $href."?".implode("&", $params);
+		} else {
+			return $href."&".implode("&", $params);
+		}
+	}
+	return $href;
+}
+
 function error_handler($errno, $errstr, $errfile, $errline) {
 	if (error_reporting() == 0) {
 		return;

Modified: trunk/examples/contacts/views/edit.xsl
===================================================================
--- trunk/examples/contacts/views/edit.xsl	2006-03-19 01:41:45 UTC (rev 10)
+++ trunk/examples/contacts/views/edit.xsl	2006-03-19 02:27:16 UTC (rev 11)
@@ -3,7 +3,7 @@
 
 <xsl:template match="record">	
 	<form method="post" action="#" handler="form">
-	<xsl:attribute name="pkey"><xsl:value-of select="pkey" /></xsl:attribute>
+	<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 		<p><xsl:value-of select="email" /></p>
 		<p><input name="record/first_name" type="text" value="{first_name}" /></p>
 		<p><input name="record/surname" type="text" value="{surname}" /></p>

Modified: trunk/examples/contacts/views/index.xsl
===================================================================
--- trunk/examples/contacts/views/index.xsl	2006-03-19 01:41:45 UTC (rev 10)
+++ trunk/examples/contacts/views/index.xsl	2006-03-19 02:27:16 UTC (rev 11)
@@ -8,10 +8,10 @@
 		<td><xsl:value-of select="email" /></td>
 		<td>
 			<input type="button" value="edit" handler="edit">
-				<xsl:attribute name="pkey"><xsl:value-of select="pkey" /></xsl:attribute>
+				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
 			<input type="button" value="delete" handler="delete">
-				<xsl:attribute name="pkey"><xsl:value-of select="pkey" /></xsl:attribute>
+				<xsl:attribute name="url"><xsl:value-of select="url" /></xsl:attribute>
 			</input>
 		</td>
 	</tr>

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-19 01:41:45 UTC (rev 10)
+++ trunk/lib/Freja.js	2006-03-19 02:27:16 UTC (rev 11)
@@ -296,36 +296,24 @@
 }
 
 /**
-  * DataSource provides a gateway-type interface to a model service.
+  * DataSource provides a gateway-type interface to a REST service.
   */
-Freja.Model.DataSource = function(baseURL, selectURL) {
-	this.baseURL = baseURL;
-	this.selectURL = selectURL;
+Freja.Model.DataSource = function(createURL, indexURL) {
+	this.createURL = createURL;
+	this.indexURL = indexURL;
 }
 /**
   * Returns a list of primary-keys to records in the datasource
   */
 Freja.Model.DataSource.prototype.select = function() {
-	return getModel(this.selectURL);
+	return getModel(this.indexURL);
 };
 /**
-  * Returns a single record from a primary-key
-  */
-Freja.Model.DataSource.prototype.get = function(pkey) {
-	try {
-		var args = eval("(" + pkey + ")");
-	} catch (ex) {
-		throw new Error("JSON can't be eval'ed:\n" + pkey);
-	}
-	var url = this.baseURL + "?" + queryString(args);
-	return getModel(url);
-};
-/**
   * Creates a new instance of a record
   * @todo errback to the deferred on errors
   */
 Freja.Model.DataSource.prototype.create = function(values) {
-	var url = this.baseURL;
+	var url = this.createURL;
 	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
 	if (match) {
 		url = match[1] + url; // local
@@ -416,28 +404,6 @@
 
 		var h = new Handler(model, this, d);
 		h.trigger();
-/*
-		if (!this.ready) {
-			connect(this, "onload", bind(this.render, this, model));
-			return;
-		}
-		if (model && !model.ready) {
-			connect(model, "onload", bind(this.render, this, model));
-			return;
-		}
-		if (!model) {
-			model = { document : (new DOMParser()).parseFromString("<?xml version='1.0' ?><dummy/>", "text/xml")};
-		}
-		var trans = this.renderer.transform(model, this);
-		trans.addCallback(bind(function(html) {
-			this.destination.innerHTML = html;
-		}, this));
-		trans.addCallback(bind(function() {
-			MochiKit.Signal.signal(this, "onrendercomplete", this.destination)
-		}, this));
-		trans.addCallback(d.callback);
-		trans.addErrback(d.errback);
-*/
 	} catch (ex) {
 		d.errback(ex);
 	}



From troelskn at berlios.de  Sun Mar 19 15:27:19 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sun, 19 Mar 2006 15:27:19 +0100
Subject: [Freja-svn] r12 - in trunk: examples/contacts lib
Message-ID: <200603191427.k2JERJWP002740@sheep.berlios.de>

Author: troelskn
Date: 2006-03-19 15:27:03 +0100 (Sun, 19 Mar 2006)
New Revision: 12

Modified:
   trunk/examples/contacts/client.js
   trunk/lib/Freja.js
Log:
Added some asynchronosity to the contacts example.

Modified: trunk/examples/contacts/client.js
===================================================================
--- trunk/examples/contacts/client.js	2006-03-19 02:27:16 UTC (rev 11)
+++ trunk/examples/contacts/client.js	2006-03-19 14:27:03 UTC (rev 12)
@@ -7,7 +7,6 @@
 index.placeholder = "content";
 index.handlers["edit"] = {
 	onclick : function(node) {
-//		edit.render(contacts.get(node.getAttribute('pkey')));
 		edit.render(getModel(node.getAttribute('url')));
 	}
 };
@@ -16,12 +15,12 @@
 		if (!confirm("Really delete it?")) {
 			return;
 		}
-//		var model = contacts.get(node.getAttribute('pkey'));
 		var model = getModel(node.getAttribute('url'));
-		var d = model._delete()
+		var d = model.remove()
 		d.addCallback(function() {
-			contacts.select().reload();
-			index.render(contacts.select());
+			contacts.select().reload().addCallback(function() {
+				index.render(contacts.select());
+			});
 		});
 	}
 };
@@ -38,8 +37,9 @@
 	onsubmit : function(node) {
 		var d = contacts.create(getView("views/create.xsl").getValues());
 		d.addCallback(function() {
-			contacts.select().reload();
-			index.render(contacts.select());
+			contacts.select().reload().addCallback(function() {
+				index.render(contacts.select());
+			});
 		});
 		index.render(contacts.select());
 	}
@@ -56,13 +56,13 @@
 edit.handlers["form"] = {
 	onsubmit : function(node) {
 		try {
-//			var model = contacts.get(node.getAttribute('pkey'));
 			var model = getModel(node.getAttribute('url'));
 			model.updateFrom(getView("views/edit.xsl"));
 			var d = model.save();
 			d.addCallback(function() {
-				contacts.select().reload();
-				index.render(contacts.select());
+				contacts.select().reload().addCallback(function() {
+					index.render(contacts.select());
+				});
 			});
 			index.render(contacts.select());
 		} catch (ex) {

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-19 02:27:16 UTC (rev 11)
+++ trunk/lib/Freja.js	2006-03-19 14:27:03 UTC (rev 12)
@@ -260,7 +260,7 @@
   * Deletes the model from the remote service
   * @returns MochiKit.Async.Deferred
   */
-Freja.Model.prototype._delete = function() {
+Freja.Model.prototype.remove = function() {
 	var url = this.url;
 	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
 	if (match) {



From troelskn at berlios.de  Sun Mar 19 02:42:23 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Sun, 19 Mar 2006 02:42:23 +0100
Subject: [Freja-svn] r10 - in trunk: . examples/contacts external lib tests
Message-ID: <200603190142.k2J1gNXa014820@sheep.berlios.de>

Author: troelskn
Date: 2006-03-19 02:41:45 +0100 (Sun, 19 Mar 2006)
New Revision: 10

Added:
   trunk/external/
   trunk/external/srvc-xslt.php
Removed:
   trunk/examples/contacts/srvc-xslt.php
Modified:
   trunk/examples/contacts/client.js
   trunk/lib/Freja.js
   trunk/lib/MochiKit.js
   trunk/tests/test_View.js
Log:
Further integration of MochiKit.Async.Deferred
Fixed tests to run at Opera

Modified: trunk/examples/contacts/client.js
===================================================================
--- trunk/examples/contacts/client.js	2006-03-12 15:56:31 UTC (rev 9)
+++ trunk/examples/contacts/client.js	2006-03-19 01:41:45 UTC (rev 10)
@@ -1,5 +1,6 @@
 // model : contacts
 var contacts = new Freja.Model.DataSource("models/contact.php", "models/contacts.php");
+Freja.AssetManager.XSLT_SERVICE_URL = "../../external/srvc-xslt.php?path=examples/contacts/";
 
 // view : index
 var index = getView("views/index.xsl");

Deleted: trunk/examples/contacts/srvc-xslt.php
===================================================================
--- trunk/examples/contacts/srvc-xslt.php	2006-03-12 15:56:31 UTC (rev 9)
+++ trunk/examples/contacts/srvc-xslt.php	2006-03-19 01:41:45 UTC (rev 10)
@@ -1,70 +0,0 @@
-<?php
-	function error_handler($errno, $errstr, $errfile, $errline) {
-		if (error_reporting() == 0) {
-			return;
-		}
-		header("HTTP/1.0 500 Internal Error");
-		header('Content-Type: text/xml');
-		echo $errstr;
-		exit;
-	}
-	function exception_handler($ex) {
-		error_handler($ex->getCode(), $ex->getMessage(), $ex->getFile(), $ex->getLine());
-	}
-	set_error_handler('error_handler');
-	if (function_exists('set_exception_handler')) {
-		set_exception_handler('exception_handler');
-	}
-
-	// XSL Transformation Service for Freja
-	// PHP4.0 Version 1.0
-
-	// Freja - a javascript Model-View-Controller Framework geared toward Zero-Latency Web Applications
-	// v1.0 Beta - Dec. 2005
-	// Copyright (c) 2005 C?dric Savarese <pro at 4213miles.com>
-	// This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>
-	// Documentation : http://www.csscripting.com/freja
-
-
-	if(isset($_POST['xmlData']) && isset($_POST['xslFile'])) {
-//		if (get_magic_quotes_gpc()) {
-//			array_map('stripslashes', $_POST);
-//		}
-		$xmlData     = stripslashes($_POST['xmlData']);
-		$xslFile     = dirname(__FILE__)."/".stripslashes($_POST['xslFile']);
-
-		if (!preg_match("/^".preg_quote(realpath(dirname(__FILE__)), "/")."/", realpath($xslFile))) {
-			trigger_error("Illegal filename");
-		}
-		$arrXslParam = array();
-
-		if(isset($_POST['xslParam'])) {
-			$xslParam = $_POST['xslParam'];   // encoded as param_name1,value1,param_name2,value2
-			$arrXsl   = split(",",$xslParam);
-			for($i=0;$i<count($arrXsl);$i+=2) {
-				$arrXslParam[$arrXsl[$i]] = $arrXsl[$i+1];
-			}
-		}
-		$xmlDoc = domxml_open_mem($xmlData, DOMXML_LOAD_DONT_KEEP_BLANKS);
-		if($xmlDoc) {
-			$xslDoc = domxml_xslt_stylesheet_file($xslFile);
-			if(!$xslDoc)
-				trigger_error("XSL_TRANSFORMATION: Load XSL failed. File path was: $xslFile.\n");
-			$transformedData = $xslDoc->process($xmlDoc, $arrXslParam);
-			if(!$transformedData)
-				trigger_error("XSL_TRANSFORMATION: Transformation failed.\n");
-			$xhtmlOuput = str_replace('<?xml version="1.0"?>','',$xslDoc->result_dump_mem($transformedData));
-
-			header("HTTP/1.0 200 Ok");
-			header('Content-Type: text/xml');
-			echo $xhtmlOuput;
-
-		} else {
-			trigger_error("XSL_TRANSFORMATION: Parsing Error. Data was: $xmlData.\n");
-		}
-	}
-	else {
-		trigger_error ("XSL_TRANSFORMATION: Bad Request.");
-		trigger_error("Bad Request.");
-	}
-?>
\ No newline at end of file

Added: trunk/external/srvc-xslt.php
===================================================================
--- trunk/external/srvc-xslt.php	2006-03-12 15:56:31 UTC (rev 9)
+++ trunk/external/srvc-xslt.php	2006-03-19 01:41:45 UTC (rev 10)
@@ -0,0 +1,78 @@
+<?php
+	function error_handler($errno, $errstr, $errfile, $errline) {
+		if (error_reporting() == 0) {
+			return;
+		}
+		$filename = "log.txt";
+		if (!is_file($filename)) {
+			@fclose(fopen($filename, "w"));
+		}
+		error_log($errstr."\n", 3, $filename);
+		header("HTTP/1.0 500 Internal Error");
+		header('Content-Type: text/xml');
+		echo "<?xml version='1.0' ?><error>".$errstr."</error>";
+		exit;
+	}
+	function exception_handler($ex) {
+		error_handler($ex->getCode(), $ex->getMessage(), $ex->getFile(), $ex->getLine());
+	}
+	set_error_handler('error_handler');
+	if (function_exists('set_exception_handler')) {
+		set_exception_handler('exception_handler');
+	}
+
+	// XSL Transformation Service for Freja
+	// PHP4.0 Version 1.0
+
+	// Freja - a javascript Model-View-Controller Framework geared toward Zero-Latency Web Applications
+	// v1.0 Beta - Dec. 2005
+	// Copyright (c) 2005 C?dric Savarese <pro at 4213miles.com>
+	// This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>
+	// Documentation : http://www.csscripting.com/freja
+
+
+	if (isset($_POST['xmlData']) && isset($_POST['xslFile'])) {
+//		if (get_magic_quotes_gpc()) {
+//			array_map('stripslashes', $_POST);
+//		}
+		$root = realpath(dirname(__FILE__)."/../");
+		$xmlData = stripslashes($_POST['xmlData']);
+		$path = isset($_GET['path']) ? ("/".stripslashes($_GET['path'])) : "";
+		$xslFile = $root.$path."/".stripslashes($_POST['xslFile']);
+
+		if (!preg_match("/^".preg_quote(realpath($root), "/")."/", realpath($xslFile))) {
+			trigger_error("Illegal filename '$xslFile'");
+		}
+		$arrXslParam = array();
+
+		if (isset($_POST['xslParam'])) {
+			$xslParam = $_POST['xslParam'];   // encoded as param_name1,value1,param_name2,value2
+			$arrXsl   = split(",",$xslParam);
+			for ($i=0;$i<count($arrXsl);$i+=2) {
+				$arrXslParam[$arrXsl[$i]] = $arrXsl[$i+1];
+			}
+		}
+		$xmlDoc = domxml_open_mem($xmlData, DOMXML_LOAD_DONT_KEEP_BLANKS);
+		if ($xmlDoc) {
+			$xslDoc = domxml_xslt_stylesheet_file($xslFile);
+			if (!$xslDoc) {
+				trigger_error("XSL_TRANSFORMATION: Load XSL failed. File path was: $xslFile.\n");
+			}
+			$transformedData = $xslDoc->process($xmlDoc, $arrXslParam);
+			if (!$transformedData) {
+				trigger_error("XSL_TRANSFORMATION: Transformation failed.\n");
+			}
+			$xhtmlOuput = str_replace('<?xml version="1.0"?>','',$xslDoc->result_dump_mem($transformedData));
+
+			header("HTTP/1.0 200 Ok");
+			header('Content-Type: text/xml');
+			echo $xhtmlOuput;
+
+		} else {
+			trigger_error("XSL_TRANSFORMATION: Parsing Error. Data was: $xmlData.\n");
+		}
+	}
+	else {
+		trigger_error("XSL_TRANSFORMATION: Bad Request.");
+	}
+?>
\ No newline at end of file

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-12 15:56:31 UTC (rev 9)
+++ trunk/lib/Freja.js	2006-03-19 01:41:45 UTC (rev 10)
@@ -369,15 +369,54 @@
   * @param    model            Freja.Model
   * @param    placeholder      string    If supplied, this will be used instead of the
   *                                      default placeholder.
-  * @todo  Return a deferred
+  * @returns MochiKit.Async.Deferred
   */
 Freja.View.prototype.render = function(model, placeholder /* optional */ ) {
+
+	var Handler = function(model, view, deferred) {
+		this.model = model;
+		this.view = view;
+		this.deferred = deferred;
+	}
+
+	Handler.prototype.trigger = function() {
+		try {
+			if (!this.view.ready) {
+				connect(this.view, "onload", bind(this.trigger, this));
+				return;
+			}
+			if (this.model && !this.model.ready) {
+				connect(this.model, "onload", bind(this.trigger, this));
+				return;
+			}
+			if (!model) {
+				model = { document : (new DOMParser()).parseFromString("<?xml version='1.0' ?><dummy/>", "text/xml")};
+			}
+			var trans = this.view.renderer.transform(model, this.view);
+			trans.addCallback(bind(function(html) {
+				this.destination.innerHTML = html;
+			}, this.view));
+			trans.addCallback(bind(function() {
+				MochiKit.Signal.signal(this, "onrendercomplete", this.destination)
+			}, this.view));
+			trans.addCallback(this.deferred.callback);
+			trans.addErrback(this.deferred.errback);
+		} catch (ex) {
+			this.deferred.errback(ex);
+		}
+	}
+
+	var d = new MochiKit.Async.Deferred();
 	try {
 		var id = (typeof(placeholder) == "undefined") ? this.placeholder : placeholder;
 		this.destination = $(id);
 		// @todo    Is this a good idea ?
 		// Perhaps we should leave it to the programmer to do this.
 		this.destination.innerHTML = Freja.AssetManager.THROBBER_HTML;
+
+		var h = new Handler(model, this, d);
+		h.trigger();
+/*
 		if (!this.ready) {
 			connect(this, "onload", bind(this.render, this, model));
 			return;
@@ -389,17 +428,22 @@
 		if (!model) {
 			model = { document : (new DOMParser()).parseFromString("<?xml version='1.0' ?><dummy/>", "text/xml")};
 		}
-		var d = this.renderer.transform(model, this);
-		d.addCallback(bind(function(html) {
+		var trans = this.renderer.transform(model, this);
+		trans.addCallback(bind(function(html) {
 			this.destination.innerHTML = html;
 		}, this));
-		d.addCallback(bind(function() {
+		trans.addCallback(bind(function() {
 			MochiKit.Signal.signal(this, "onrendercomplete", this.destination)
 		}, this));
+		trans.addCallback(d.callback);
+		trans.addErrback(d.errback);
+*/
 	} catch (ex) {
-		alert(ex.message);
+		d.errback(ex);
 	}
+	return d;
 }
+
 /**
   * Decorates the output of the primary renderer, to inject behaviour.
   * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
@@ -470,19 +514,23 @@
   */
 Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view) {
         var d = new MochiKit.Async.Deferred();
-	var processor = new XSLTProcessor();
-	processor.importStylesheet(view.document);
-	var result = processor.transformToDocument(model.document);
-	var html = Sarissa.serialize(result);
-	if (!html) {
-		d.errback(new Error("XSL Transformation error."));
-	} else {
-		// fix empty textareas
-		// Can't this be fixed by outputting as html rather than xml ?
-		// <xsl:output method="html" />
-		html = html.replace(/<textarea([^\/>]*)\/>/gi,"<textarea $1></textarea>");
+        try {
+		var processor = new XSLTProcessor();
+		processor.importStylesheet(view.document);
+		var result = processor.transformToDocument(model.document);
+		var html = Sarissa.serialize(result);
+		if (!html) {
+			d.errback(new Error("XSL Transformation error."));
+		} else {
+			// fix empty textareas
+			// Can't this be fixed by outputting as html rather than xml ?
+			// <xsl:output method="html" />
+			html = html.replace(/<textarea([^\/>]*)\/>/gi,"<textarea $1></textarea>");
+			d.callback(html);
+		}
+	} catch (ex) {
+		d.errback(ex);
 	}
-	d.callback(html);
 	return d;
 }
 /**
@@ -515,14 +563,14 @@
 			}
 		}
 	}
-	req.open("POST", Freja.AssetManager.XSLT_SERVICE_URL, true);
+	var async = Freja.AssetManager.HTTP_REQUEST_TYPE == "async";
+	req.open("POST", Freja.AssetManager.XSLT_SERVICE_URL, async);
 	req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
 		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
 		req.setRequestHeader("Authorization", auth);
 	}
 	req.send(postedData);
-
 	return d;
 }
 /**
@@ -658,19 +706,31 @@
 	}
 	try {
 		var req = new XMLHttpRequest();
+		var async = Freja.AssetManager.HTTP_REQUEST_TYPE == "async";
 		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
-			req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
+			req.open("POST", url, async);
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 		} else {
-			req.open("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
+			req.open("GET", url, async);
 		}
 		if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
 			var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
 			req.setRequestHeader("Authorization", auth);
 		}
-//		req.open("GET", url, this.HTTP_REQUEST_TYPE == "async");
-		var comm = MochiKit.Async.sendXMLHttpRequest(req).addCallbacks(handler, bind(d.errback, d));
+		// This shouldn't be nescesary, but alas it is - firefox chokes
+		// It's probably due to an error in MochiKit, so the problem
+		// should be fixed there.
+		var comm = MochiKit.Async.sendXMLHttpRequest(req);
+		if (async) {
+			comm.addCallbacks(handler, bind(d.errback, d));
+		} else {
+			if (req.status == 200 || req.status == 304) {
+				handler(req);
+			} else {
+				d.errback(new Error("Request failed:" + req.status));
+			}
+		}
 	} catch (ex) {
 		d.errback(ex);
 	}

Modified: trunk/lib/MochiKit.js
===================================================================
--- trunk/lib/MochiKit.js	2006-03-12 15:56:31 UTC (rev 9)
+++ trunk/lib/MochiKit.js	2006-03-19 01:41:45 UTC (rev 10)
@@ -1,7596 +1,4646 @@
-
 /***
 
-MochiKit.Base 1.3
+    MochiKit.MochiKit 1.3 : PACKED VERSION
 
-See <http://mochikit.com/> for documentation, downloads, license, etc.
+    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
+    diff against the source tree, not this file.
 
-(c) 2005 Bob Ippolito.  All rights Reserved.
+    See <http://mochikit.com/> for documentation, downloads, license, etc.
 
+    (c) 2005 Bob Ippolito.  All rights Reserved.
+
 ***/
 
-if (typeof(dojo) != 'undefined') {
-    dojo.provide("MochiKit.Base");
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Base");
 }
-
-if (typeof(MochiKit) == 'undefined') {
-    MochiKit = {};
+if(typeof (MochiKit)=="undefined"){
+MochiKit={};
 }
-if (typeof(MochiKit.Base) == 'undefined') {
-    MochiKit.Base = {};
+if(typeof (MochiKit.Base)=="undefined"){
+MochiKit.Base={};
 }
-
-MochiKit.Base.VERSION = "1.3";
-MochiKit.Base.NAME = "MochiKit.Base"
-MochiKit.Base.update = function (self, obj/*, ... */) {
-    /***
-
-        Mutate an object by replacing its key:value pairs with those
-        from other object(s).  Key:value pairs from later objects will
-        overwrite those from earlier objects.
-
-        If null is given as the initial object, a new one will be created.
-
-        This mutates *and returns* the given object, be warned.
-
-        A version of this function that creates a new object is available
-        as merge(o1, o2, ...)
-
-    ***/
-    if (self == null) {
-        self = {};
-    }
-    for (var i = 1; i < arguments.length; i++) {
-        var o = arguments[i];
-        if (typeof(o) != 'undefined' && o != null) {
-            for (var k in o) {
-                self[k] = o[k];
-            }
-        }
-    }
-    return self;
+MochiKit.Base.VERSION="1.3";
+MochiKit.Base.NAME="MochiKit.Base";
+MochiKit.Base.update=function(_1,_2){
+if(_1==null){
+_1={};
+}
+for(var i=1;i<arguments.length;i++){
+var o=arguments[i];
+if(typeof (o)!="undefined"&&o!=null){
+for(var k in o){
+_1[k]=o[k];
+}
+}
+}
+return _1;
 };
-
-MochiKit.Base.update(MochiKit.Base, {
-    __repr__: function () {
-        return "[" + this.NAME + " " + this.VERSION + "]";
-    },
-
-    toString: function () {
-        return this.__repr__();
-    },
-
-    counter: function (n/* = 1 */) {
-        if (arguments.length == 0) {
-            n = 1;
-        }
-        return function () {
-            return n++;
-        };
-    },
-
-    clone: function (obj) {
-        var me = arguments.callee;
-        if (arguments.length == 1) {
-            me.prototype = obj;
-            return new me();
-        }
-    },
-
-    extend: function (self, obj, /* optional */skip) {
-        /***
-
-            Mutate an array by extending it with an array-like obj,
-            starting with the "skip" index of obj.  If null is given
-            as the initial array, a new one will be created.
-
-            This mutates *and returns* the given array, be warned.
-
-        ***/
-
-        // Extend an array with an array-like object starting
-        // from the skip index
-        if (!skip) {
-            skip = 0;
-        }
-        if (obj) {
-            // allow iterable fall-through, but skip the full isArrayLike
-            // check for speed, this is called often.
-            var l = obj.length;
-            if (typeof(l) != 'number' /* !isArrayLike(obj) */) {
-                if (typeof(MochiKit.Iter) != "undefined") {
-                    obj = MochiKit.Iter.list(obj);
-                    l = obj.length;
-                } else {
-                    throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
-                }
-            }
-            if (!self) {
-                self = [];
-            }
-            for (var i = skip; i < l; i++) {
-                self.push(obj[i]);
-            }
-        }
-        // This mutates, but it's convenient to return because
-        // it's often used like a constructor when turning some
-        // ghetto array-like to a real array
-        return self;
-    },
-
-
-    updatetree: function (self, obj/*, ...*/) {
-        if (self == null) {
-            self = {};
-        }
-        for (var i = 1; i < arguments.length; i++) {
-            var o = arguments[i];
-            if (typeof(o) != 'undefined' && o != null) {
-                for (var k in o) {
-                    var v = o[k];
-                    if (typeof(self[k]) == 'object' && typeof(v) == 'object') {
-                        arguments.callee(self[k], v);
-                    } else {
-                        self[k] = v;
-                    }
-                }
-            }
-        }
-        return self;
-    },
-
-    setdefault: function (self, obj/*, ...*/) {
-        /***
-
-            Mutate an object by replacing its key:value pairs with those
-            from other object(s) IF they are not already set on the initial
-            object.
-
-            If null is given as the initial object, a new one will be created.
-
-            This mutates *and returns* the given object, be warned.
-
-        ***/
-        if (self == null) {
-            self = {};
-        }
-        for (var i = 1; i < arguments.length; i++) {
-            var o = arguments[i];
-            for (var k in o) {
-                if (!(k in self)) {
-                    self[k] = o[k];
-                }
-            }
-        }
-        return self;
-    },
-
-    keys: function (obj) {
-        /***
-
-            Return an array of the property names of an object
-            (in no particular order).
-
-        ***/
-        var rval = [];
-        for (var prop in obj) {
-            rval.push(prop);
-        }
-        return rval;
-    },
-
-    items: function (obj) {
-        /***
-
-            Return an array of [propertyName, propertyValue] pairs for an
-            object (in no particular order).
-
-        ***/
-        var rval = [];
-        var e;
-        for (var prop in obj) {
-            var v;
-            try {
-                v = obj[prop];
-            } catch (e) {
-                continue;
-            }
-            rval.push([prop, v]);
-        }
-        return rval;
-    },
-
-
-    _newNamedError: function (module, name, func) {
-        func.prototype = new MochiKit.Base.NamedError(module.NAME + "." + name);
-        module[name] = func;
-    },
-
-
-    operator: {
-        /***
-
-            A table of JavaScript's operators for usage with map, filter, etc.
-
-        ***/
-
-        // unary logic operators
-        truth: function (a) { return !!a; },
-        lognot: function (a) { return !a; },
-        identity: function (a) { return a; },
-
-        // bitwise unary operators
-        not: function (a) { return ~a; },
-        neg: function (a) { return -a; },
-
-        // binary operators
-        add: function (a, b) { return a + b; },
-        sub: function (a, b) { return a - b; },
-        div: function (a, b) { return a / b; },
-        mod: function (a, b) { return a % b; },
-        mul: function (a, b) { return a * b; },
-
-        // bitwise binary operators
-        and: function (a, b) { return a & b; },
-        or: function (a, b) { return a | b; },
-        xor: function (a, b) { return a ^ b; },
-        lshift: function (a, b) { return a << b; },
-        rshift: function (a, b) { return a >> b; },
-        zrshift: function (a, b) { return a >>> b; },
-
-        // near-worthless built-in comparators
-        eq: function (a, b) { return a == b; },
-        ne: function (a, b) { return a != b; },
-        gt: function (a, b) { return a > b; },
-        ge: function (a, b) { return a >= b; },
-        lt: function (a, b) { return a < b; },
-        le: function (a, b) { return a <= b; },
-
-        // compare comparators
-        ceq: function (a, b) { return MochiKit.Base.compare(a, b) == 0; },
-        cne: function (a, b) { return MochiKit.Base.compare(a, b) != 0; },
-        cgt: function (a, b) { return MochiKit.Base.compare(a, b) == 1; },
-        cge: function (a, b) { return MochiKit.Base.compare(a, b) != -1; },
-        clt: function (a, b) { return MochiKit.Base.compare(a, b) == -1; },
-        cle: function (a, b) { return MochiKit.Base.compare(a, b) != 1; },
-
-        // binary logical operators
-        logand: function (a, b) { return a && b; },
-        logor: function (a, b) { return a || b; },
-        contains: function (a, b) { return b in a; }
-    },
-
-    forward: function (func) {
-        /***
-
-        Returns a function that forwards a method call to this.func(...)
-
-        ***/
-        return function () {
-            return this[func].apply(this, arguments);
-        };
-    },
-
-    itemgetter: function (func) {
-        /***
-
-        Returns a function that returns arg[func]
-
-        ***/
-        return function (arg) {
-            return arg[func];
-        };
-    },
-
-    typeMatcher: function (/* typ */) {
-        /***
-
-        Given a set of types (as string arguments),
-        returns a function that will return true if the types of the given
-        objects are members of that set.
-
-        ***/
-
-        var types = {};
-        for (var i = 0; i < arguments.length; i++) {
-            var typ = arguments[i];
-            types[typ] = typ;
-        }
-        return function () {
-            for (var i = 0; i < arguments.length; i++) {
-                if (!(typeof(arguments[i]) in types)) {
-                    return false;
-                }
-            }
-            return true;
-        };
-    },
-
-    isNull: function (/* ... */) {
-        /***
-
-        Returns true if all arguments are null.
-
-        ***/
-        for (var i = 0; i < arguments.length; i++) {
-            if (arguments[i] !== null) {
-                return false;
-            }
-        }
-        return true;
-    },
-
-    isUndefinedOrNull: function (/* ... */) {
-        /***
-
-            Returns true if all arguments are undefined or null
-
-        ***/
-        for (var i = 0; i < arguments.length; i++) {
-            var o = arguments[i];
-            if (!(typeof(o) == 'undefined' || o == null)) {
-                return false;
-            }
-        }
-        return true;
-    },
-
-    isNotEmpty: function (obj) {
-        /***
-
-            Returns true if all the array or string arguments
-            are not empty
-
-        ***/
-        for (var i = 0; i < arguments.length; i++) {
-            var o = arguments[i];
-            if (!(o && o.length)) {
-                return false;
-            }
-        }
-        return true;
-    },
-
-    isArrayLike: function () {
-        /***
-
-            Returns true if all given arguments are Array-like
-
-        ***/
-        for (var i = 0; i < arguments.length; i++) {
-            var o = arguments[i];
-            var typ = typeof(o);
-            if (
-                (typ != 'object' && !(typ == 'function' && typeof(o.item) == 'function')) ||
-                o == null ||
-                typeof(o.length) != 'number'
-            ) {
-                return false;
-            }
-        }
-        return true;
-    },
-
-    isDateLike: function () {
-        /***
-
-            Returns true if all given arguments are Date-like
-
-        ***/
-        for (var i = 0; i < arguments.length; i++) {
-            var o = arguments[i];
-            if (typeof(o) != "object" || o == null
-                    || typeof(o.getTime) != 'function') {
-                return false;
-            }
-        }
-        return true;
-    },
-
-
-    xmap: function (fn/*, obj... */) {
-        /***
-
-            Return an array composed of fn(obj) for every obj given as an
-            argument.
-
-            If fn is null, operator.identity is used.
-
-        ***/
-        if (fn == null) {
-            return MochiKit.Base.extend(null, arguments, 1);
-        }
-        var rval = [];
-        for (var i = 1; i < arguments.length; i++) {
-            rval.push(fn(arguments[i]));
-        }
-        return rval;
-    },
-
-    map: function (fn, lst/*, lst... */) {
-        /***
-
-            Return a new array composed of the results of fn(x) for every x in
-            lst
-
-            If fn is null, and only one sequence argument is given the identity
-            function is used.
-
-                map(null, lst) -> lst.slice();
-
-            If fn is null, and more than one sequence is given as arguments,
-            then the Array function is used, making it equivalent to zip.
-
-                map(null, p, q, ...)
-                    -> zip(p, q, ...)
-                    -> [[p0, q0, ...], [p1, q1, ...], ...];
-
-        ***/
-        var m = MochiKit.Base;
-        var isArrayLike = m.isArrayLike;
-        if (arguments.length <= 2) {
-            // allow an iterable to be passed
-            if (!isArrayLike(lst)) {
-                if (MochiKit.Iter) {
-                    // fast path for map(null, iterable)
-                    lst = MochiKit.Iter.list(lst);
-                    if (fn == null) {
-                        return lst;
-                    }
-                } else {
-                    throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
-                }
-            }
-            // fast path for map(null, lst)
-            if (fn == null) {
-                return m.extend(null, lst);
-            }
-            // disabled fast path for map(fn, lst)
-            /*
-            if (false && typeof(Array.prototype.map) == 'function') {
-                // Mozilla fast-path
-                return Array.prototype.map.call(lst, fn);
-            }
-            */
-            var rval = [];
-            for (var i = 0; i < lst.length; i++) {
-                rval.push(fn(lst[i]));
-            }
-            return rval;
-        } else {
-            // default for map(null, ...) is zip(...)
-            if (fn == null) {
-                fn = Array;
-            }
-            var length = null;
-            for (i = 1; i < arguments.length; i++) {
-                // allow iterables to be passed
-                if (!isArrayLike(arguments[i])) {
-                    if (MochiKit.Iter) {
-                        arguments[i] = MochiKit.Iter.list(arguments[i]);
-                    } else {
-                        throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
-                    }
-                }
-                // find the minimum length
-                var l = arguments[i].length;
-                if (length == null || length > l) {
-                    length = l;
-                }
-            }
-            rval = [];
-            for (i = 0; i < length; i++) {
-                var args = [];
-                for (var j = 1; j < arguments.length; j++) {
-                    args.push(arguments[j][i]);
-                }
-                rval.push(fn.apply(this, args));
-            }
-            return rval;
-        }
-    },
-
-    xfilter: function (fn/*, obj... */) {
-        var rval = [];
-        if (fn == null) {
-            fn = MochiKit.Base.operator.truth;
-        }
-        for (var i = 1; i < arguments.length; i++) {
-            var o = arguments[i];
-            if (fn(o)) {
-                rval.push(o);
-            }
-        }
-        return rval;
-    },
-
-    filter: function (fn, lst, self) {
-        var rval = [];
-        // allow an iterable to be passed
-        var m = MochiKit.Base;
-        if (!m.isArrayLike(lst)) {
-            if (MochiKit.Iter) {
-                lst = MochiKit.Iter.list(lst);
-            } else {
-                throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
-            }
-        }
-        if (fn == null) {
-            fn = m.operator.truth;
-        }
-        if (typeof(Array.prototype.filter) == 'function') {
-            // Mozilla fast-path
-            return Array.prototype.filter.call(lst, fn, self);
-        } else if (typeof(self) == 'undefined' || self == null) {
-            for (var i = 0; i < lst.length; i++) {
-                var o = lst[i];
-                if (fn(o)) {
-                    rval.push(o);
-                }
-            }
-        } else {
-            for (i = 0; i < lst.length; i++) {
-                o = lst[i];
-                if (fn.call(self, o)) {
-                    rval.push(o);
-                }
-            }
-        }
-        return rval;
-    },
-
-
-    _wrapDumbFunction: function (func) {
-        return function () {
-            // fast path!
-            switch (arguments.length) {
-                case 0: return func();
-                case 1: return func(arguments[0]);
-                case 2: return func(arguments[0], arguments[1]);
-                case 3: return func(arguments[0], arguments[1], arguments[2]);
-            }
-            var args = [];
-            for (var i = 0; i < arguments.length; i++) {
-                args.push("arguments[" + i + "]");
-            }
-            return eval("(func(" + args.join(",") + "))");
-        };
-    },
-
-    bind: function (func, self/* args... */) {
-        if (typeof(func) == "string") {
-            func = self[func];
-        }
-        var im_func = func.im_func;
-        var im_preargs = func.im_preargs;
-        var im_self = func.im_self;
-        var m = MochiKit.Base;
-        if (typeof(func) == "function" && typeof(func.apply) == "undefined") {
-            // this is for cases where JavaScript sucks ass and gives you a
-            // really dumb built-in function like alert() that doesn't have
-            // an apply
-            func = m._wrapDumbFunction(func);
-        }
-        if (typeof(im_func) != 'function') {
-            im_func = func;
-        }
-        if (typeof(self) != 'undefined') {
-            im_self = self;
-        }
-        if (typeof(im_preargs) == 'undefined') {
-            im_preargs = [];
-        } else  {
-            im_preargs = im_preargs.slice();
-        }
-        m.extend(im_preargs, arguments, 2);
-        var newfunc = function () {
-            var args = arguments;
-            var me = arguments.callee;
-            if (me.im_preargs.length > 0) {
-                args = m.concat(me.im_preargs, args);
-            }
-            var self = me.im_self;
-            if (!self) {
-                self = this;
-            }
-            return me.im_func.apply(self, args);
-        };
-        newfunc.im_self = im_self;
-        newfunc.im_func = im_func;
-        newfunc.im_preargs = im_preargs;
-        return newfunc;
-    },
-
-    bindMethods: function (self) {
-        /***
-
-            Bind all functions in self to self,
-            which gives you a semi-Pythonic sort of instance.
-
-        ***/
-        var bind = MochiKit.Base.bind;
-        for (var k in self) {
-            var func = self[k];
-            if (typeof(func) == 'function') {
-                self[k] = bind(func, self);
-            }
-        }
-    },
-
-    registerComparator: function (name, check, comparator, /* optional */ override) {
-        /***
-
-            Register a comparator for use with the compare function.
-
-            name should be a unique identifier describing the comparator.
-
-            check is a function (a, b) that returns true if a and b
-            can be compared with comparator.
-
-            comparator is a function (a, b) that returns:
-
-                 0 when a == b
-                 1 when a > b
-                -1 when a < b
-
-            comparator is guaranteed to only be called if check(a, b)
-            returns a true value.
-
-            If override is given and true, then it will be made the
-            highest precedence comparator.  Otherwise, the lowest.
-
-        ***/
-        MochiKit.Base.comparatorRegistry.register(name, check, comparator, override);
-    },
-
-    _primitives: {'bool': true, 'string': true, 'number': true},
-
-    compare: function (a, b) {
-        /***
-
-            Compare two objects in a sensible manner.  Currently this is:
-
-                1. undefined and null compare equal to each other
-                2. undefined and null are less than anything else
-                3. comparators registered with registerComparator are
-                   used to find a good comparator.  Built-in comparators
-                   are currently available for arrays and dates.
-                4. Otherwise hope that the built-in comparison operators
-                   do something useful, which should work for numbers
-                   and strings.
-
-            Returns what one would expect from a comparison function.
-
-            returns:
-
-                 0 when a == b
-                 1 when a > b
-                -1 when a < b
-
-        ***/
-        if (a == b) {
-            return 0;
-        }
-        var aIsNull = (typeof(a) == 'undefined' || a == null);
-        var bIsNull = (typeof(b) == 'undefined' || b == null);
-        if (aIsNull && bIsNull) {
-            return 0;
-        } else if (aIsNull) {
-            return -1;
-        } else if (bIsNull) {
-            return 1;
-        }
-        var m = MochiKit.Base;
-        // bool, number, string have meaningful comparisons
-        var prim = m._primitives;
-        if (!(typeof(a) in prim && typeof(b) in prim)) {
-            try {
-                return m.comparatorRegistry.match(a, b);
-            } catch (e) {
-                if (e != m.NotFound) {
-                    throw e;
-                }
-            }
-        }
-        if (a < b) {
-            return -1;
-        } else if (a > b) {
-            return 1;
-        }
-        // These types can't be compared
-        var repr = m.repr;
-        throw new TypeError(repr(a) + " and " + repr(b) + " can not be compared");
-    },
-
-    compareDateLike: function (a, b) {
-        return MochiKit.Base.compare(a.getTime(), b.getTime());
-    },
-
-    compareArrayLike: function (a, b) {
-        var compare = MochiKit.Base.compare;
-        var count = a.length;
-        var rval = 0;
-        if (count > b.length) {
-            rval = 1;
-            count = b.length;
-        } else if (count < b.length) {
-            rval = -1;
-        }
-        for (var i = 0; i < count; i++) {
-            var cmp = compare(a[i], b[i]);
-            if (cmp) {
-                return cmp;
-            }
-        }
-        return rval;
-    },
-
-    registerRepr: function (name, check, wrap, /* optional */override) {
-        /***
-
-            Register a repr function.  repr functions should take
-            one argument and return a string representation of it
-            suitable for developers, primarily used when debugging.
-
-            If override is given, it is used as the highest priority
-            repr, otherwise it will be used as the lowest.
-
-        ***/
-        MochiKit.Base.reprRegistry.register(name, check, wrap, override);
-    },
-
-    repr: function (o) {
-        /***
-
-            Return a "programmer representation" for an object
-
-        ***/
-
-        if (typeof(o) == "undefined") {
-            return "undefined";
-        } else if (o === null) {
-            return "null";
-        }
-        try {
-            if (typeof(o.__repr__) == 'function') {
-                return o.__repr__();
-            } else if (typeof(o.repr) == 'function' && o.repr != arguments.callee) {
-                return o.repr();
-            }
-            return MochiKit.Base.reprRegistry.match(o);
-        } catch (e) {
-            if (typeof(o.NAME) == 'string' && (
-                    o.toString == Function.prototype.toString ||
-                    o.toString == Object.prototype.toString
-                )) {
-                return o.NAME;
-            }
-        }
-        try {
-            var ostring = (o + "");
-        } catch (e) {
-            return "[" + typeof(o) + "]";
-        }
-        if (typeof(o) == "function") {
-            o = ostring.replace(/^\s+/, "");
-            var idx = o.indexOf("{");
-            if (idx != -1) {
-                o = o.substr(0, idx) + "{...}";
-            }
-        }
-        return ostring;
-    },
-
-    reprArrayLike: function (o) {
-        var m = MochiKit.Base;
-        return "[" + m.map(m.repr, o).join(", ") + "]";
-    },
-
-    reprString: function (o) {
-        return ('"' + o.replace(/(["\\])/g, '\\$1') + '"'
-            ).replace(/[\f]/g, "\\f"
-            ).replace(/[\b]/g, "\\b"
-            ).replace(/[\n]/g, "\\n"
-            ).replace(/[\t]/g, "\\t"
-            ).replace(/[\r]/g, "\\r");
-    },
-
-    reprNumber: function (o) {
-        return o + "";
-    },
-
-    registerJSON: function (name, check, wrap, /* optional */override) {
-        /***
-
-            Register a JSON serialization function.  JSON serialization
-            functions should take one argument and return an object
-            suitable for JSON serialization:
-
-            - string
-            - number
-            - boolean
-            - undefined
-            - object
-                - null
-                - Array-like (length property that is a number)
-                - Objects with a "json" method will have this method called
-                - Any other object will be used as {key:value, ...} pairs
-
-            If override is given, it is used as the highest priority
-            JSON serialization, otherwise it will be used as the lowest.
-
-        ***/
-        MochiKit.Base.jsonRegistry.register(name, check, wrap, override);
-    },
-
-
-    evalJSON: function () {
-        return eval("(" + arguments[0] + ")");
-    },
-
-    serializeJSON: function (o) {
-        /***
-
-            Create a JSON serialization of an object, note that this doesn't
-            check for infinite recursion, so don't do that!
-
-        ***/
-        var objtype = typeof(o);
-        if (objtype == "undefined") {
-            return "undefined";
-        } else if (objtype == "number" || objtype == "boolean") {
-            return o + "";
-        } else if (o === null) {
-            return "null";
-        }
-        var m = MochiKit.Base;
-        var reprString = m.reprString;
-        if (objtype == "string") {
-            return reprString(o);
-        }
-        // recurse
-        var me = arguments.callee;
-        // short-circuit for objects that support "json" serialization
-        // if they return "self" then just pass-through...
-        var newObj;
-        if (typeof(o.__json__) == "function") {
-            newObj = o.__json__();
-            if (o !== newObj) {
-                return me(newObj);
-            }
-        }
-        if (typeof(o.json) == "function") {
-            newObj = o.json();
-            if (o !== newObj) {
-                return me(newObj);
-            }
-        }
-        // array
-        if (objtype != "function" && typeof(o.length) == "number") {
-            var res = [];
-            for (var i = 0; i < o.length; i++) {
-                var val = me(o[i]);
-                if (typeof(val) != "string") {
-                    val = "undefined";
-                }
-                res.push(val);
-            }
-            return "[" + res.join(", ") + "]";
-        }
-        // look in the registry
-        try {
-            newObj = m.jsonRegistry.match(o);
-            return me(newObj);
-        } catch (e) {
-            if (e != m.NotFound) {
-                // something really bad happened
-                throw e;
-            }
-        }
-        // it's a function with no adapter, bad
-        if (objtype == "function") {
-            return null;
-        }
-        // generic object code path
-        res = [];
-        for (var k in o) {
-            var useKey;
-            if (typeof(k) == "number") {
-                useKey = '"' + k + '"';
-            } else if (typeof(k) == "string") {
-                useKey = reprString(k);
-            } else {
-                // skip non-string or number keys
-                continue;
-            }
-            val = me(o[k]);
-            if (typeof(val) != "string") {
-                // skip non-serializable values
-                continue;
-            }
-            res.push(useKey + ":" + val);
-        }
-        return "{" + res.join(", ") + "}";
-    },
-
-
-    objEqual: function (a, b) {
-        /***
-
-            Compare the equality of two objects.
-
-        ***/
-        return (MochiKit.Base.compare(a, b) == 0);
-    },
-
-    arrayEqual: function (self, arr) {
-        /***
-
-            Compare two arrays for equality, with a fast-path for length
-            differences.
-
-        ***/
-        if (self.length != arr.length) {
-            return false;
-        }
-        return (MochiKit.Base.compare(self, arr) == 0);
-    },
-
-    concat: function (/* lst... */) {
-        /***
-
-            Concatenates all given array-like arguments and returns
-            a new array:
-
-                var lst = concat(["1","3","5"], ["2","4","6"]);
-                assert(lst.toString() == "1,3,5,2,4,6");
-
-        ***/
-        var rval = [];
-        var extend = MochiKit.Base.extend;
-        for (var i = 0; i < arguments.length; i++) {
-            extend(rval, arguments[i]);
-        }
-        return rval;
-    },
-
-    keyComparator: function (key/* ... */) {
-        /***
-
-            A comparator factory that compares a[key] with b[key].
-            e.g.:
-
-                var lst = ["a", "bbb", "cc"];
-                lst.sort(keyComparator("length"));
-                assert(lst.toString() == "a,cc,bbb");
-
-        ***/
-        // fast-path for single key comparisons
-        var m = MochiKit.Base;
-        var compare = m.compare;
-        if (arguments.length == 1) {
-            return function (a, b) {
-                return compare(a[key], b[key]);
-            }
-        }
-        var compareKeys = m.extend(null, arguments);
-        return function (a, b) {
-            var rval = 0;
-            // keep comparing until something is inequal or we run out of
-            // keys to compare
-            for (var i = 0; (rval == 0) && (i < compareKeys.length); i++) {
-                var key = compareKeys[i];
-                rval = compare(a[key], b[key]);
-            }
-            return rval;
-        };
-    },
-
-    reverseKeyComparator: function (key) {
-        /***
-
-            A comparator factory that compares a[key] with b[key] in reverse.
-            e.g.:
-
-                var lst = ["a", "bbb", "cc"];
-                lst.sort(reverseKeyComparator("length"));
-                assert(lst.toString() == "bbb,cc,aa");
-
-        ***/
-        var comparator = MochiKit.Base.keyComparator.apply(this, arguments);
-        return function (a, b) {
-            return comparator(b, a);
-        }
-    },
-
-    partial: function (func) {
-        var m = MochiKit.Base;
-        return m.bind.apply(this, m.extend([func, undefined], arguments, 1));
-    },
-
-    listMinMax: function (which, lst) {
-        /***
-
-            If which == -1 then it will return the smallest
-            element of the array-like lst.  This is also available
-            as:
-
-                listMin(lst)
-
-
-            If which == 1 then it will return the largest
-            element of the array-like lst.  This is also available
-            as:
-
-                listMax(list)
-
-        ***/
-        if (lst.length == 0) {
-            return null;
-        }
-        var cur = lst[0];
-        var compare = MochiKit.Base.compare;
-        for (var i = 1; i < lst.length; i++) {
-            var o = lst[i];
-            if (compare(o, cur) == which) {
-                cur = o;
-            }
-        }
-        return cur;
-    },
-
-    objMax: function (/* obj... */) {
-        /***
-
-            Return the maximum object out of the given arguments
-
-        ***/
-        return MochiKit.Base.listMinMax(1, arguments);
-    },
-
-    objMin: function (/* obj... */) {
-        /***
-
-            Return the minimum object out of the given arguments
-
-        ***/
-        return MochiKit.Base.listMinMax(-1, arguments);
-    },
-
-    findIdentical: function (lst, value, start/* = 0 */, /* optional */end) {
-        if (typeof(end) == "undefined" || end == null) {
-            end = lst.length;
-        }
-        for (var i = (start || 0); i < end; i++) {
-            if (lst[i] === value) {
-                return i;
-            }
-        }
-        return -1;
-    },
-
-    find: function (lst, value, start/* = 0 */, /* optional */end) {
-        if (typeof(end) == "undefined" || end == null) {
-            end = lst.length;
-        }
-        var cmp = MochiKit.Base.compare;
-        for (var i = (start || 0); i < end; i++) {
-            if (cmp(lst[i], value) == 0) {
-                return i;
-            }
-        }
-        return -1;
-    },
-
-    nodeWalk: function (node, visitor) {
-        /***
-
-            Non-recursive generic node walking function (e.g. for a DOM)
-
-            @param node: The initial node to be searched.
-
-            @param visitor: The visitor function, will be called as
-                            visitor(node), and should return an Array-like
-                            of notes to be searched next (e.g.
-                            node.childNodes).
-
-        ***/
-        var nodes = [node];
-        var extend = MochiKit.Base.extend;
-        while (nodes.length) {
-            var res = visitor(nodes.shift());
-            if (res) {
-                extend(nodes, res);
-            }
-        }
-    },
-
-
-    nameFunctions: function (namespace) {
-        var base = namespace.NAME;
-        if (typeof(base) == 'undefined') {
-            base = '';
-        } else {
-            base = base + '.';
-        }
-        for (var name in namespace) {
-            var o = namespace[name];
-            if (typeof(o) == 'function' && typeof(o.NAME) == 'undefined') {
-                try {
-                    o.NAME = base + name;
-                } catch (e) {
-                    // pass
-                }
-            }
-        }
-    },
-
-
-    queryString: function (names, values) {
-        // check to see if names is a string or a DOM element, and if
-        // MochiKit.DOM is available.  If so, drop it like it's a form
-        // Ugliest conditional in MochiKit?  Probably!
-        if (typeof(MochiKit.DOM) != "undefined" && arguments.length == 1
-            && (typeof(names) == "string" || (
-                typeof(names.nodeType) != "undefined" && names.nodeType > 0
-            ))
-        ) {
-            var kv = MochiKit.DOM.formContents(names);
-            names = kv[0];
-            values = kv[1];
-        } else if (arguments.length == 1) {
-            var o = names;
-            names = [];
-            values = [];
-            for (var k in o) {
-                var v = o[k];
-                if (typeof(v) != "function") {
-                    names.push(k);
-                    values.push(v);
-                }
-            }
-        }
-        var rval = [];
-        var len = Math.min(names.length, values.length);
-        var urlEncode = MochiKit.Base.urlEncode;
-        for (var i = 0; i < len; i++) {
-            v = values[i];
-            if (typeof(v) != 'undefined' && v != null) {
-                rval.push(urlEncode(names[i]) + "=" + urlEncode(v));
-            }
-        }
-        return rval.join("&");
-    },
-
-
-    parseQueryString: function (encodedString, useArrays) {
-        var pairs = encodedString.replace(/\+/g, "%20").split("&");
-        var o = {};
-        var decode;
-        if (typeof(decodeURIComponent) != "undefined") {
-            decode = decodeURIComponent;
-        } else {
-            decode = unescape;
-        }
-        if (useArrays) {
-            for (var i = 0; i < pairs.length; i++) {
-                var pair = pairs[i].split("=");
-                var name = decode(pair[0]);
-                var arr = o[name];
-                if (!(arr instanceof Array)) {
-                    arr = [];
-                    o[name] = arr;
-                }
-                arr.push(decode(pair[1]));
-            }
-        } else {
-            for (i = 0; i < pairs.length; i++) {
-                pair = pairs[i].split("=");
-                o[decode(pair[0])] = decode(pair[1]);
-            }
-        }
-        return o;
-    }
-});
-
-MochiKit.Base.AdapterRegistry = function () {
-    /***
-
-        A registry to facilitate adaptation.
-
-        Pairs is an array of [name, check, wrap] triples
-
-        All check/wrap functions in this registry should be of the same arity.
-
-    ***/
-    this.pairs = [];
+MochiKit.Base.update(MochiKit.Base,{__repr__:function(){
+return "["+this.NAME+" "+this.VERSION+"]";
+},toString:function(){
+return this.__repr__();
+},counter:function(n){
+if(arguments.length==0){
+n=1;
+}
+return function(){
+return n++;
 };
-
-MochiKit.Base.AdapterRegistry.prototype = {
-    register: function (name, check, wrap, /* optional */ override) {
-        /***
-
-            The check function should return true if the given arguments are
-            appropriate for the wrap function.
-
-            If override is given and true, the check function will be given
-            highest priority.  Otherwise, it will be the lowest priority
-            adapter.
-
-        ***/
-
-        if (override) {
-            this.pairs.unshift([name, check, wrap]);
-        } else {
-            this.pairs.push([name, check, wrap]);
-        }
-    },
-
-    match: function (/* ... */) {
-        /***
-
-            Find an adapter for the given arguments.
-
-            If no suitable adapter is found, throws NotFound.
-
-        ***/
-        for (var i = 0; i < this.pairs.length; i++) {
-            var pair = this.pairs[i];
-            if (pair[1].apply(this, arguments)) {
-                return pair[2].apply(this, arguments);
-            }
-        }
-        throw MochiKit.Base.NotFound;
-    },
-
-    unregister: function (name) {
-        /***
-
-            Remove a named adapter from the registry
-
-        ***/
-        for (var i = 0; i < this.pairs.length; i++) {
-            var pair = this.pairs[i];
-            if (pair[0] == name) {
-                this.pairs.splice(i, 1);
-                return true;
-            }
-        }
-        return false;
-    }
+},clone:function(_7){
+var me=arguments.callee;
+if(arguments.length==1){
+me.prototype=_7;
+return new me();
+}
+},extend:function(_9,obj,_11){
+if(!_11){
+_11=0;
+}
+if(obj){
+var l=obj.length;
+if(typeof (l)!="number"){
+if(typeof (MochiKit.Iter)!="undefined"){
+obj=MochiKit.Iter.list(obj);
+l=obj.length;
+}else{
+throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
+}
+}
+if(!_9){
+_9=[];
+}
+for(var i=_11;i<l;i++){
+_9.push(obj[i]);
+}
+}
+return _9;
+},updatetree:function(_13,obj){
+if(_13==null){
+_13={};
+}
+for(var i=1;i<arguments.length;i++){
+var o=arguments[i];
+if(typeof (o)!="undefined"&&o!=null){
+for(var k in o){
+var v=o[k];
+if(typeof (_13[k])=="object"&&typeof (v)=="object"){
+arguments.callee(_13[k],v);
+}else{
+_13[k]=v;
+}
+}
+}
+}
+return _13;
+},setdefault:function(_15,obj){
+if(_15==null){
+_15={};
+}
+for(var i=1;i<arguments.length;i++){
+var o=arguments[i];
+for(var k in o){
+if(!(k in _15)){
+_15[k]=o[k];
+}
+}
+}
+return _15;
+},keys:function(obj){
+var _16=[];
+for(var _17 in obj){
+_16.push(_17);
+}
+return _16;
+},items:function(obj){
+var _18=[];
+var e;
+for(var _20 in obj){
+var v;
+try{
+v=obj[_20];
+}
+catch(e){
+continue;
+}
+_18.push([_20,v]);
+}
+return _18;
+},_newNamedError:function(_21,_22,_23){
+_23.prototype=new MochiKit.Base.NamedError(_21.NAME+"."+_22);
+_21[_22]=_23;
+},operator:{truth:function(a){
+return !!a;
+},lognot:function(a){
+return !a;
+},identity:function(a){
+return a;
+},not:function(a){
+return ~a;
+},neg:function(a){
+return -a;
+},add:function(a,b){
+return a+b;
+},sub:function(a,b){
+return a-b;
+},div:function(a,b){
+return a/b;
+},mod:function(a,b){
+return a%b;
+},mul:function(a,b){
+return a*b;
+},and:function(a,b){
+return a&b;
+},or:function(a,b){
+return a|b;
+},xor:function(a,b){
+return a^b;
+},lshift:function(a,b){
+return a<<b;
+},rshift:function(a,b){
+return a>>b;
+},zrshift:function(a,b){
+return a>>>b;
+},eq:function(a,b){
+return a==b;
+},ne:function(a,b){
+return a!=b;
+},gt:function(a,b){
+return a>b;
+},ge:function(a,b){
+return a>=b;
+},lt:function(a,b){
+return a<b;
+},le:function(a,b){
+return a<=b;
+},ceq:function(a,b){
+return MochiKit.Base.compare(a,b)==0;
+},cne:function(a,b){
+return MochiKit.Base.compare(a,b)!=0;
+},cgt:function(a,b){
+return MochiKit.Base.compare(a,b)==1;
+},cge:function(a,b){
+return MochiKit.Base.compare(a,b)!=-1;
+},clt:function(a,b){
+return MochiKit.Base.compare(a,b)==-1;
+},cle:function(a,b){
+return MochiKit.Base.compare(a,b)!=1;
+},logand:function(a,b){
+return a&&b;
+},logor:function(a,b){
+return a||b;
+},contains:function(a,b){
+return b in a;
+}},forward:function(_26){
+return function(){
+return this[_26].apply(this,arguments);
 };
-
-
-MochiKit.Base.EXPORT = [
-    "counter",
-    "clone",
-    "extend",
-    "update",
-    "updatetree",
-    "setdefault",
-    "keys",
-    "items",
-    "NamedError",
-    "operator",
-    "forward",
-    "itemgetter",
-    "typeMatcher",
-    "isCallable",
-    "isUndefined",
-    "isUndefinedOrNull",
-    "isNull",
-    "isNotEmpty",
-    "isArrayLike",
-    "isDateLike",
-    "xmap",
-    "map",
-    "xfilter",
-    "filter",
-    "bind",
-    "bindMethods",
-    "NotFound",
-    "AdapterRegistry",
-    "registerComparator",
-    "compare",
-    "registerRepr",
-    "repr",
-    "objEqual",
-    "arrayEqual",
-    "concat",
-    "keyComparator",
-    "reverseKeyComparator",
-    "partial",
-    "merge",
-    "listMinMax",
-    "listMax",
-    "listMin",
-    "objMax",
-    "objMin",
-    "nodeWalk",
-    "zip",
-    "urlEncode",
-    "queryString",
-    "serializeJSON",
-    "registerJSON",
-    "evalJSON",
-    "parseQueryString",
-    "find",
-    "findIdentical"
-];
-
-MochiKit.Base.EXPORT_OK = [
-    "nameFunctions",
-    "comparatorRegistry",
-    "reprRegistry",
-    "jsonRegistry",
-    "compareDateLike",
-    "compareArrayLike",
-    "reprArrayLike",
-    "reprString",
-    "reprNumber"
-];
-
-MochiKit.Base._exportSymbols = function (globals, module) {
-    if (typeof(MochiKit.__export__) == "undefined") {
-        MochiKit.__export__ = (MochiKit.__compat__  ||
-            (typeof(JSAN) == 'undefined' && typeof(dojo) == 'undefined')
-        );
-    }
-    if (!MochiKit.__export__) {
-        return;
-    }
-    var all = module.EXPORT_TAGS[":all"];
-    for (var i = 0; i < all.length; i++) {
-        globals[all[i]] = module[all[i]];
-    }
+},itemgetter:function(_27){
+return function(arg){
+return arg[_27];
 };
-
-MochiKit.Base.__new__ = function () {
-    // A singleton raised when no suitable adapter is found
-    var m = this;
-    if (typeof(encodeURIComponent) != "undefined") {
-        m.urlEncode = function (unencoded) {
-            return encodeURIComponent(unencoded).replace(/\'/g, '%27');
-        };
-    } else {
-        m.urlEncode = function (unencoded) {
-            return escape(unencoded
-                ).replace(/\+/g, '%2B'
-                ).replace(/\"/g,'%22'
-                ).rval.replace(/\'/g, '%27');
-        };
-    }
-
-    m.NamedError = function (name) {
-        this.message = name;
-        this.name = name;
-    };
-    m.NamedError.prototype = new Error();
-    m.update(m.NamedError.prototype, {
-        repr: function () {
-            if (this.message && this.message != this.name) {
-                return this.name + "(" + m.repr(this.message) + ")";
-            } else {
-                return this.name + "()";
-            }
-        },
-        toString: m.forward("repr")
-    });
-
-    m.NotFound = new m.NamedError("MochiKit.Base.NotFound");
-
-
-    m.listMax = m.partial(m.listMinMax, 1);
-    m.listMin = m.partial(m.listMinMax, -1);
-
-    m.isCallable = m.typeMatcher('function');
-    m.isUndefined = m.typeMatcher('undefined');
-
-    m.merge = m.partial(m.update, null);
-    m.zip = m.partial(m.map, null);
-
-    m.comparatorRegistry = new m.AdapterRegistry();
-    m.registerComparator("dateLike", m.isDateLike, m.compareDateLike);
-    m.registerComparator("arrayLike", m.isArrayLike, m.compareArrayLike);
-
-    m.reprRegistry = new m.AdapterRegistry();
-    m.registerRepr("arrayLike", m.isArrayLike, m.reprArrayLike);
-    m.registerRepr("string", m.typeMatcher("string"), m.reprString);
-    m.registerRepr("numbers", m.typeMatcher("number", "boolean"), m.reprNumber);
-
-    m.jsonRegistry = new m.AdapterRegistry();
-
-    var all = m.concat(m.EXPORT, m.EXPORT_OK);
-    m.EXPORT_TAGS = {
-        ":common": m.concat(m.EXPORT_OK),
-        ":all": all
-    };
-
-    m.nameFunctions(this);
-
+},typeMatcher:function(){
+var _29={};
+for(var i=0;i<arguments.length;i++){
+var typ=arguments[i];
+_29[typ]=typ;
+}
+return function(){
+for(var i=0;i<arguments.length;i++){
+if(!(typeof (arguments[i]) in _29)){
+return false;
+}
+}
+return true;
 };
-
+},isNull:function(){
+for(var i=0;i<arguments.length;i++){
+if(arguments[i]!==null){
+return false;
+}
+}
+return true;
+},isUndefinedOrNull:function(){
+for(var i=0;i<arguments.length;i++){
+var o=arguments[i];
+if(!(typeof (o)=="undefined"||o==null)){
+return false;
+}
+}
+return true;
+},isNotEmpty:function(obj){
+for(var i=0;i<arguments.length;i++){
+var o=arguments[i];
+if(!(o&&o.length)){
+return false;
+}
+}
+return true;
+},isArrayLike:function(){
+for(var i=0;i<arguments.length;i++){
+var o=arguments[i];
+var typ=typeof (o);
+if((typ!="object"&&!(typ=="function"&&typeof (o.item)=="function"))||o==null||typeof (o.length)!="number"){
+return false;
+}
+}
+return true;
+},isDateLike:function(){
+for(var i=0;i<arguments.length;i++){
+var o=arguments[i];
+if(typeof (o)!="object"||o==null||typeof (o.getTime)!="function"){
+return false;
+}
+}
+return true;
+},xmap:function(fn){
+if(fn==null){
+return MochiKit.Base.extend(null,arguments,1);
+}
+var _32=[];
+for(var i=1;i<arguments.length;i++){
+_32.push(fn(arguments[i]));
+}
+return _32;
+},map:function(fn,lst){
+var m=MochiKit.Base;
+var _35=m.isArrayLike;
+if(arguments.length<=2){
+if(!_35(lst)){
+if(MochiKit.Iter){
+lst=MochiKit.Iter.list(lst);
+if(fn==null){
+return lst;
+}
+}else{
+throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
+}
+}
+if(fn==null){
+return m.extend(null,lst);
+}
+var _36=[];
+for(var i=0;i<lst.length;i++){
+_36.push(fn(lst[i]));
+}
+return _36;
+}else{
+if(fn==null){
+fn=Array;
+}
+var _37=null;
+for(i=1;i<arguments.length;i++){
+if(!_35(arguments[i])){
+if(MochiKit.Iter){
+arguments[i]=MochiKit.Iter.list(arguments[i]);
+}else{
+throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
+}
+}
+var l=arguments[i].length;
+if(_37==null||_37>l){
+_37=l;
+}
+}
+_36=[];
+for(i=0;i<_37;i++){
+var _38=[];
+for(var j=1;j<arguments.length;j++){
+_38.push(arguments[j][i]);
+}
+_36.push(fn.apply(this,_38));
+}
+return _36;
+}
+},xfilter:function(fn){
+var _40=[];
+if(fn==null){
+fn=MochiKit.Base.operator.truth;
+}
+for(var i=1;i<arguments.length;i++){
+var o=arguments[i];
+if(fn(o)){
+_40.push(o);
+}
+}
+return _40;
+},filter:function(fn,lst,_41){
+var _42=[];
+var m=MochiKit.Base;
+if(!m.isArrayLike(lst)){
+if(MochiKit.Iter){
+lst=MochiKit.Iter.list(lst);
+}else{
+throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
+}
+}
+if(fn==null){
+fn=m.operator.truth;
+}
+if(typeof (Array.prototype.filter)=="function"){
+return Array.prototype.filter.call(lst,fn,_41);
+}else{
+if(typeof (_41)=="undefined"||_41==null){
+for(var i=0;i<lst.length;i++){
+var o=lst[i];
+if(fn(o)){
+_42.push(o);
+}
+}
+}else{
+for(i=0;i<lst.length;i++){
+o=lst[i];
+if(fn.call(_41,o)){
+_42.push(o);
+}
+}
+}
+}
+return _42;
+},_wrapDumbFunction:function(_43){
+return function(){
+switch(arguments.length){
+case 0:
+return _43();
+case 1:
+return _43(arguments[0]);
+case 2:
+return _43(arguments[0],arguments[1]);
+case 3:
+return _43(arguments[0],arguments[1],arguments[2]);
+}
+var _44=[];
+for(var i=0;i<arguments.length;i++){
+_44.push("arguments["+i+"]");
+}
+return eval("(func("+_44.join(",")+"))");
+};
+},bind:function(_45,_46){
+if(typeof (_45)=="string"){
+_45=_46[_45];
+}
+var _47=_45.im_func;
+var _48=_45.im_preargs;
+var _49=_45.im_self;
+var m=MochiKit.Base;
+if(typeof (_45)=="function"&&typeof (_45.apply)=="undefined"){
+_45=m._wrapDumbFunction(_45);
+}
+if(typeof (_47)!="function"){
+_47=_45;
+}
+if(typeof (_46)!="undefined"){
+_49=_46;
+}
+if(typeof (_48)=="undefined"){
+_48=[];
+}else{
+_48=_48.slice();
+}
+m.extend(_48,arguments,2);
+var _50=function(){
+var _51=arguments;
+var me=arguments.callee;
+if(me.im_preargs.length>0){
+_51=m.concat(me.im_preargs,_51);
+}
+var _46=me.im_self;
+if(!_46){
+_46=this;
+}
+return me.im_func.apply(_46,_51);
+};
+_50.im_self=_49;
+_50.im_func=_47;
+_50.im_preargs=_48;
+return _50;
+},bindMethods:function(_52){
+var _53=MochiKit.Base.bind;
+for(var k in _52){
+var _54=_52[k];
+if(typeof (_54)=="function"){
+_52[k]=_53(_54,_52);
+}
+}
+},registerComparator:function(_55,_56,_57,_58){
+MochiKit.Base.comparatorRegistry.register(_55,_56,_57,_58);
+},_primitives:{"bool":true,"string":true,"number":true},compare:function(a,b){
+if(a==b){
+return 0;
+}
+var _59=(typeof (a)=="undefined"||a==null);
+var _60=(typeof (b)=="undefined"||b==null);
+if(_59&&_60){
+return 0;
+}else{
+if(_59){
+return -1;
+}else{
+if(_60){
+return 1;
+}
+}
+}
+var m=MochiKit.Base;
+var _61=m._primitives;
+if(!(typeof (a) in _61&&typeof (b) in _61)){
+try{
+return m.comparatorRegistry.match(a,b);
+}
+catch(e){
+if(e!=m.NotFound){
+throw e;
+}
+}
+}
+if(a<b){
+return -1;
+}else{
+if(a>b){
+return 1;
+}
+}
+var _62=m.repr;
+throw new TypeError(_62(a)+" and "+_62(b)+" can not be compared");
+},compareDateLike:function(a,b){
+return MochiKit.Base.compare(a.getTime(),b.getTime());
+},compareArrayLike:function(a,b){
+var _63=MochiKit.Base.compare;
+var _64=a.length;
+var _65=0;
+if(_64>b.length){
+_65=1;
+_64=b.length;
+}else{
+if(_64<b.length){
+_65=-1;
+}
+}
+for(var i=0;i<_64;i++){
+var cmp=_63(a[i],b[i]);
+if(cmp){
+return cmp;
+}
+}
+return _65;
+},registerRepr:function(_67,_68,_69,_70){
+MochiKit.Base.reprRegistry.register(_67,_68,_69,_70);
+},repr:function(o){
+if(typeof (o)=="undefined"){
+return "undefined";
+}else{
+if(o===null){
+return "null";
+}
+}
+try{
+if(typeof (o.__repr__)=="function"){
+return o.__repr__();
+}else{
+if(typeof (o.repr)=="function"&&o.repr!=arguments.callee){
+return o.repr();
+}
+}
+return MochiKit.Base.reprRegistry.match(o);
+}
+catch(e){
+if(typeof (o.NAME)=="string"&&(o.toString==Function.prototype.toString||o.toString==Object.prototype.toString)){
+return o.NAME;
+}
+}
+try{
+var _71=(o+"");
+}
+catch(e){
+return "["+typeof (o)+"]";
+}
+if(typeof (o)=="function"){
+o=_71.replace(/^\s+/,"");
+var idx=o.indexOf("{");
+if(idx!=-1){
+o=o.substr(0,idx)+"{...}";
+}
+}
+return _71;
+},reprArrayLike:function(o){
+var m=MochiKit.Base;
+return "["+m.map(m.repr,o).join(", ")+"]";
+},reprString:function(o){
+return ("\""+o.replace(/(["\\])/g,"\\$1")+"\"").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r");
+},reprNumber:function(o){
+return o+"";
+},registerJSON:function(_73,_74,_75,_76){
+MochiKit.Base.jsonRegistry.register(_73,_74,_75,_76);
+},evalJSON:function(){
+return eval("("+arguments[0]+")");
+},serializeJSON:function(o){
+var _77=typeof (o);
+if(_77=="undefined"){
+return "undefined";
+}else{
+if(_77=="number"||_77=="boolean"){
+return o+"";
+}else{
+if(o===null){
+return "null";
+}
+}
+}
+var m=MochiKit.Base;
+var _78=m.reprString;
+if(_77=="string"){
+return _78(o);
+}
+var me=arguments.callee;
+var _79;
+if(typeof (o.__json__)=="function"){
+_79=o.__json__();
+if(o!==_79){
+return me(_79);
+}
+}
+if(typeof (o.json)=="function"){
+_79=o.json();
+if(o!==_79){
+return me(_79);
+}
+}
+if(_77!="function"&&typeof (o.length)=="number"){
+var res=[];
+for(var i=0;i<o.length;i++){
+var val=me(o[i]);
+if(typeof (val)!="string"){
+val="undefined";
+}
+res.push(val);
+}
+return "["+res.join(", ")+"]";
+}
+try{
+_79=m.jsonRegistry.match(o);
+return me(_79);
+}
+catch(e){
+if(e!=m.NotFound){
+throw e;
+}
+}
+if(_77=="function"){
+return null;
+}
+res=[];
+for(var k in o){
+var _82;
+if(typeof (k)=="number"){
+_82="\""+k+"\"";
+}else{
+if(typeof (k)=="string"){
+_82=_78(k);
+}else{
+continue;
+}
+}
+val=me(o[k]);
+if(typeof (val)!="string"){
+continue;
+}
+res.push(_82+":"+val);
+}
+return "{"+res.join(", ")+"}";
+},objEqual:function(a,b){
+return (MochiKit.Base.compare(a,b)==0);
+},arrayEqual:function(_83,arr){
+if(_83.length!=arr.length){
+return false;
+}
+return (MochiKit.Base.compare(_83,arr)==0);
+},concat:function(){
+var _85=[];
+var _86=MochiKit.Base.extend;
+for(var i=0;i<arguments.length;i++){
+_86(_85,arguments[i]);
+}
+return _85;
+},keyComparator:function(key){
+var m=MochiKit.Base;
+var _88=m.compare;
+if(arguments.length==1){
+return function(a,b){
+return _88(a[key],b[key]);
+};
+}
+var _89=m.extend(null,arguments);
+return function(a,b){
+var _90=0;
+for(var i=0;(_90==0)&&(i<_89.length);i++){
+var key=_89[i];
+_90=_88(a[key],b[key]);
+}
+return _90;
+};
+},reverseKeyComparator:function(key){
+var _91=MochiKit.Base.keyComparator.apply(this,arguments);
+return function(a,b){
+return _91(b,a);
+};
+},partial:function(_92){
+var m=MochiKit.Base;
+return m.bind.apply(this,m.extend([_92,undefined],arguments,1));
+},listMinMax:function(_93,lst){
+if(lst.length==0){
+return null;
+}
+var cur=lst[0];
+var _95=MochiKit.Base.compare;
+for(var i=1;i<lst.length;i++){
+var o=lst[i];
+if(_95(o,cur)==_93){
+cur=o;
+}
+}
+return cur;
+},objMax:function(){
+return MochiKit.Base.listMinMax(1,arguments);
+},objMin:function(){
+return MochiKit.Base.listMinMax(-1,arguments);
+},findIdentical:function(lst,_96,_97,end){
+if(typeof (end)=="undefined"||end==null){
+end=lst.length;
+}
+for(var i=(_97||0);i<end;i++){
+if(lst[i]===_96){
+return i;
+}
+}
+return -1;
+},find:function(lst,_99,_100,end){
+if(typeof (end)=="undefined"||end==null){
+end=lst.length;
+}
+var cmp=MochiKit.Base.compare;
+for(var i=(_100||0);i<end;i++){
+if(cmp(lst[i],_99)==0){
+return i;
+}
+}
+return -1;
+},nodeWalk:function(node,_102){
+var _103=[node];
+var _104=MochiKit.Base.extend;
+while(_103.length){
+var res=_102(_103.shift());
+if(res){
+_104(_103,res);
+}
+}
+},nameFunctions:function(_105){
+var base=_105.NAME;
+if(typeof (base)=="undefined"){
+base="";
+}else{
+base=base+".";
+}
+for(var name in _105){
+var o=_105[name];
+if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
+try{
+o.NAME=base+name;
+}
+catch(e){
+}
+}
+}
+},queryString:function(_108,_109){
+if(typeof (MochiKit.DOM)!="undefined"&&arguments.length==1&&(typeof (_108)=="string"||(typeof (_108.nodeType)!="undefined"&&_108.nodeType>0))){
+var kv=MochiKit.DOM.formContents(_108);
+_108=kv[0];
+_109=kv[1];
+}else{
+if(arguments.length==1){
+var o=_108;
+_108=[];
+_109=[];
+for(var k in o){
+var v=o[k];
+if(typeof (v)!="function"){
+_108.push(k);
+_109.push(v);
+}
+}
+}
+}
+var rval=[];
+var len=Math.min(_108.length,_109.length);
+var _113=MochiKit.Base.urlEncode;
+for(var i=0;i<len;i++){
+v=_109[i];
+if(typeof (v)!="undefined"&&v!=null){
+rval.push(_113(_108[i])+"="+_113(v));
+}
+}
+return rval.join("&");
+},parseQueryString:function(_114,_115){
+var _116=_114.replace(/\+/g,"%20").split("&");
+var o={};
+var _117;
+if(typeof (decodeURIComponent)!="undefined"){
+_117=decodeURIComponent;
+}else{
+_117=unescape;
+}
+if(_115){
+for(var i=0;i<_116.length;i++){
+var pair=_116[i].split("=");
+var name=_117(pair[0]);
+var arr=o[name];
+if(!(arr instanceof Array)){
+arr=[];
+o[name]=arr;
+}
+arr.push(_117(pair[1]));
+}
+}else{
+for(i=0;i<_116.length;i++){
+pair=_116[i].split("=");
+o[_117(pair[0])]=_117(pair[1]);
+}
+}
+return o;
+}});
+MochiKit.Base.AdapterRegistry=function(){
+this.pairs=[];
+};
+MochiKit.Base.AdapterRegistry.prototype={register:function(name,_119,wrap,_121){
+if(_121){
+this.pairs.unshift([name,_119,wrap]);
+}else{
+this.pairs.push([name,_119,wrap]);
+}
+},match:function(){
+for(var i=0;i<this.pairs.length;i++){
+var pair=this.pairs[i];
+if(pair[1].apply(this,arguments)){
+return pair[2].apply(this,arguments);
+}
+}
+throw MochiKit.Base.NotFound;
+},unregister:function(name){
+for(var i=0;i<this.pairs.length;i++){
+var pair=this.pairs[i];
+if(pair[0]==name){
+this.pairs.splice(i,1);
+return true;
+}
+}
+return false;
+}};
+MochiKit.Base.EXPORT=["counter","clone","extend","update","updatetree","setdefault","keys","items","NamedError","operator","forward","itemgetter","typeMatcher","isCallable","isUndefined","isUndefinedOrNull","isNull","isNotEmpty","isArrayLike","isDateLike","xmap","map","xfilter","filter","bind","bindMethods","NotFound","AdapterRegistry","registerComparator","compare","registerRepr","repr","objEqual","arrayEqual","concat","keyComparator","reverseKeyComparator","partial","merge","listMinMax","listMax","listMin","objMax","objMin","nodeWalk","zip","urlEncode","queryString","serializeJSON","registerJSON","evalJSON","parseQueryString","find","findIdentical"];
+MochiKit.Base.EXPORT_OK=["nameFunctions","comparatorRegistry","reprRegistry","jsonRegistry","compareDateLike","compareArrayLike","reprArrayLike","reprString","reprNumber"];
+MochiKit.Base._exportSymbols=function(_122,_123){
+if(typeof (MochiKit.__export__)=="undefined"){
+MochiKit.__export__=(MochiKit.__compat__||(typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined"));
+}
+if(!MochiKit.__export__){
+return;
+}
+var all=_123.EXPORT_TAGS[":all"];
+for(var i=0;i<all.length;i++){
+_122[all[i]]=_123[all[i]];
+}
+};
+MochiKit.Base.__new__=function(){
+var m=this;
+if(typeof (encodeURIComponent)!="undefined"){
+m.urlEncode=function(_125){
+return encodeURIComponent(_125).replace(/\'/g,"%27");
+};
+}else{
+m.urlEncode=function(_126){
+return escape(_126).replace(/\+/g,"%2B").replace(/\"/g,"%22").rval.replace(/\'/g,"%27");
+};
+}
+m.NamedError=function(name){
+this.message=name;
+this.name=name;
+};
+m.NamedError.prototype=new Error();
+m.update(m.NamedError.prototype,{repr:function(){
+if(this.message&&this.message!=this.name){
+return this.name+"("+m.repr(this.message)+")";
+}else{
+return this.name+"()";
+}
+},toString:m.forward("repr")});
+m.NotFound=new m.NamedError("MochiKit.Base.NotFound");
+m.listMax=m.partial(m.listMinMax,1);
+m.listMin=m.partial(m.listMinMax,-1);
+m.isCallable=m.typeMatcher("function");
+m.isUndefined=m.typeMatcher("undefined");
+m.merge=m.partial(m.update,null);
+m.zip=m.partial(m.map,null);
+m.comparatorRegistry=new m.AdapterRegistry();
+m.registerComparator("dateLike",m.isDateLike,m.compareDateLike);
+m.registerComparator("arrayLike",m.isArrayLike,m.compareArrayLike);
+m.reprRegistry=new m.AdapterRegistry();
+m.registerRepr("arrayLike",m.isArrayLike,m.reprArrayLike);
+m.registerRepr("string",m.typeMatcher("string"),m.reprString);
+m.registerRepr("numbers",m.typeMatcher("number","boolean"),m.reprNumber);
+m.jsonRegistry=new m.AdapterRegistry();
+var all=m.concat(m.EXPORT,m.EXPORT_OK);
+m.EXPORT_TAGS={":common":m.concat(m.EXPORT_OK),":all":all};
+m.nameFunctions(this);
+};
 MochiKit.Base.__new__();
-
-//
-// XXX: Internet Explorer blows
-//
-compare = MochiKit.Base.compare;
-
-MochiKit.Base._exportSymbols(this, MochiKit.Base);
-
-/***
-
-MochiKit.Iter 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito.  All rights Reserved.
-
-***/
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.Iter');
-    dojo.require('MochiKit.Base');
+compare=MochiKit.Base.compare;
+MochiKit.Base._exportSymbols(this,MochiKit.Base);
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Iter");
+dojo.require("MochiKit.Base");
 }
-
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use("MochiKit.Base", []);
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Base",[]);
 }
-
-try {
-    if (typeof(MochiKit.Base) == 'undefined') {
-        throw "";
-    }
-} catch (e) {
-    throw "MochiKit.Iter depends on MochiKit.Base!";
+try{
+if(typeof (MochiKit.Base)=="undefined"){
+throw "";
 }
-
-if (typeof(MochiKit.Iter) == 'undefined') {
-    MochiKit.Iter = {};
 }
-
-MochiKit.Iter.NAME = "MochiKit.Iter";
-MochiKit.Iter.VERSION = "1.3";
-MochiKit.Base.update(MochiKit.Iter, {
-    __repr__: function () {
-        return "[" + this.NAME + " " + this.VERSION + "]";
-    },
-    toString: function () {
-        return this.__repr__();
-    },
-
-    registerIteratorFactory: function (name, check, iterfactory, /* optional */ override) {
-        /***
-
-            Register an iterator factory for use with the iter function.
-
-            check is a function (a) that returns true if a can be converted
-            into an iterator with iterfactory.
-
-            iterfactory is a function (a) that returns an object with a
-            "next" function that returns the next value in the sequence.
-
-            iterfactory is guaranteed to only be called if check(a)
-            returns a true value.
-
-            If override is given and true, then it will be made the
-            highest precedence iterator factory.  Otherwise, the lowest.
-
-        ***/
-
-        MochiKit.Iter.iteratorRegistry.register(name, check, iterfactory, override);
-    },
-
-    iter: function (iterable, /* optional */ sentinel) {
-        /***
-
-            Convert the given argument to an iterator (object implementing
-            "next").
-
-            1. If iterable is an iterator (implements "next"), then it will be
-               returned as-is.
-            2. If iterable is an iterator factory (implements "iter"), then the
-               result of iterable.iter() will be returned.
-            3. Otherwise, the iterator factory registry is used to find a
-               match.
-            4. If no factory is found, it will throw TypeError
-
-            When used directly, using an iterator should look like this::
-
-                var it = iter(iterable);
-                try {
-                    while (var o = it.next()) {
-                        // use o
-                    }
-                } catch (e) {
-                    if (e != StopIteration) {
-                        throw e;
-                    }
-                    // pass
-                }
-
-        ***/
-
-        var self = MochiKit.Iter;
-        if (arguments.length == 2) {
-            return self.takewhile(
-                function (a) { return a != sentinel; },
-                iterable
-            );
-        }
-        if (typeof(iterable.next) == 'function') {
-            return iterable;
-        } else if (typeof(iterable.iter) == 'function') {
-            return iterable.iter();
-        }
-        try {
-            return self.iteratorRegistry.match(iterable);
-        } catch (e) {
-            var m = MochiKit.Base;
-            if (e == m.NotFound) {
-                e = new TypeError(typeof(iterable) + ": " + m.repr(iterable) + " is not iterable");
-            }
-            throw e;
-        }
-    },
-
-    count: function (n) {
-        /***
-
-            count([n]) --> n, n + 1, n + 2, ...
-
-        ***/
-        if (!n) {
-            n = 0;
-        }
-        var m = MochiKit.Base;
-        return {
-            repr: function () { return "count(" + n + ")"; },
-            toString: m.forward("repr"),
-            next: m.counter(n)
-        };
-    },
-
-    cycle: function (p) {
-        /***
-
-            cycle(p) --> p0, p1, ... plast, p0, p1, ...
-
-        ***/
-        var self = MochiKit.Iter;
-        var m = MochiKit.Base;
-        var lst = [];
-        var iterator = self.iter(p);
-        return {
-            repr: function () { return "cycle(...)"; },
-            toString: m.forward("repr"),
-            next: function () {
-                try {
-                    var rval = iterator.next();
-                    lst.push(rval);
-                    return rval;
-                } catch (e) {
-                    if (e != self.StopIteration) {
-                        throw e;
-                    }
-                    if (lst.length == 0) {
-                        this.next = function () {
-                            throw self.StopIteration;
-                        };
-                    } else {
-                        var i = -1;
-                        this.next = function () {
-                            i = (i + 1) % lst.length;
-                            return lst[i];
-                        }
-                    }
-                    return this.next();
-                }
-            }
-        }
-    },
-
-    repeat: function (elem, /* optional */n) {
-        /***
-
-            repeat(elem, [,n]) --> elem, elem, elem, ... endlessly or up to n
-                times
-
-        ***/
-        var m = MochiKit.Base;
-        if (typeof(n) == 'undefined') {
-            return {
-                repr: function () {
-                    return "repeat(" + m.repr(elem) + ")";
-                },
-                toString: m.forward("repr"),
-                next: function () {
-                    return elem;
-                }
-            };
-        }
-        return {
-            repr: function () {
-                return "repeat(" + m.repr(elem) + ", " + n + ")";
-            },
-            toString: m.forward("repr"),
-            next: function () {
-                if (n <= 0) {
-                    throw MochiKit.Iter.StopIteration;
-                }
-                n -= 1;
-                return elem;
-            }
-        };
-    },
-
-    next: function (iterator) {
-        /***
-
-            Return the next value from the iterator
-
-        ***/
-        return iterator.next();
-    },
-
-    izip: function (p, q/*, ...*/) {
-        /***
-
-            izip(p, q, ...) --> (p0, q0, ...), (p1, q1, ...), ...
-
-        ***/
-        var m = MochiKit.Base;
-        var next = MochiKit.Iter.next;
-        var iterables = m.map(iter, arguments);
-        return {
-            repr: function () { return "izip(...)"; },
-            toString: m.forward("repr"),
-            next: function () { return m.map(next, iterables); }
-        };
-    },
-
-    ifilter: function (pred, seq) {
-        /***
-
-            ifilter(pred, seq) --> elements of seq where pred(elem) is true
-
-        ***/
-        var m = MochiKit.Base;
-        seq = MochiKit.Iter.iter(seq);
-        if (pred == null) {
-            pred = m.operator.truth;
-        }
-        return {
-            repr: function () { return "ifilter(...)"; },
-            toString: m.forward("repr"),
-            next: function () {
-                while (true) {
-                    var rval = seq.next();
-                    if (pred(rval)) {
-                        return rval;
-                    }
-                }
-                // mozilla warnings aren't too bright
-                return undefined;
-            }
-        }
-    },
-
-    ifilterfalse: function (pred, seq) {
-        /***
-
-            ifilterfalse(pred, seq) --> elements of seq where pred(elem) is
-                false
-
-        ***/
-        var m = MochiKit.Base;
-        seq = MochiKit.Iter.iter(seq);
-        if (pred == null) {
-            pred = m.operator.truth;
-        }
-        return {
-            repr: function () { return "ifilterfalse(...)"; },
-            toString: m.forward("repr"),
-            next: function () {
-                while (true) {
-                    var rval = seq.next();
-                    if (!pred(rval)) {
-                        return rval;
-                    }
-                }
-                // mozilla warnings aren't too bright
-                return undefined;
-            }
-        }
-    },
-
-    islice: function (seq/*, [start,] stop[, step] */) {
-        /***
-
-            islice(seq, [start,] stop[, step])  --> elements from
-                seq[start:stop:step] (in Python slice syntax)
-
-        ***/
-        var self = MochiKit.Iter;
-        var m = MochiKit.Base;
-        seq = self.iter(seq);
-        var start = 0;
-        var stop = 0;
-        var step = 1;
-        var i = -1;
-        if (arguments.length == 2) {
-            stop = arguments[1];
-        } else if (arguments.length == 3) {
-            start = arguments[1];
-            stop = arguments[2];
-        } else {
-            start = arguments[1];
-            stop = arguments[2];
-            step = arguments[3];
-        }
-        return {
-            repr: function () {
-                return "islice(" + ["...", start, stop, step].join(", ") + ")";
-            },
-            toString: m.forward("repr"),
-            next: function () {
-                var rval;
-                while (i < start) {
-                    rval = seq.next();
-                    i++;
-                }
-                if (start >= stop) {
-                    throw self.StopIteration;
-                }
-                start += step;
-                return rval;
-            }
-        };
-    },
-
-    imap: function (fun, p, q/*, ...*/) {
-        /***
-
-            imap(fun, p, q, ...) --> fun(p0, q0, ...), fun(p1, q1, ...), ...
-
-        ***/
-        var m = MochiKit.Base;
-        var self = MochiKit.Iter;
-        var iterables = m.map(self.iter, m.extend(null, arguments, 1));
-        var map = m.map;
-        var next = self.next;
-        return {
-            repr: function () { return "imap(...)"; },
-            toString: m.forward("repr"),
-            next: function () {
-                return fun.apply(this, map(next, iterables));
-            }
-        };
-    },
-
-    applymap: function (fun, seq, self) {
-        /***
-
-            applymap(fun, seq) -->
-                fun.apply(self, seq0), fun.apply(self, seq1), ...
-
-        ***/
-        seq = MochiKit.Iter.iter(seq);
-        var m = MochiKit.Base;
-        return {
-            repr: function () { return "applymap(...)"; },
-            toString: m.forward("repr"),
-            next: function () {
-                return fun.apply(self, seq.next());
-            }
-        };
-    },
-
-    chain: function (p, q/*, ...*/) {
-        /***
-
-            chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ...
-
-        ***/
-        // dumb fast path
-        var self = MochiKit.Iter;
-        var m = MochiKit.Base;
-        if (arguments.length == 1) {
-            return self.iter(arguments[0]);
-        }
-        var argiter = m.map(self.iter, arguments);
-        return {
-            repr: function () { return "chain(...)"; },
-            toString: m.forward("repr"),
-            next: function () {
-                while (argiter.length > 1) {
-                    try {
-                        return argiter[0].next();
-                    } catch (e) {
-                        if (e != self.StopIteration) {
-                            throw e;
-                        }
-                        argiter.shift();
-                    }
-                }
-                if (argiter.length == 1) {
-                    // optimize last element
-                    var arg = argiter.shift();
-                    this.next = m.bind("next", arg);
-                    return this.next();
-                }
-                throw self.StopIteration;
-            }
-        };
-    },
-
-    takewhile: function (pred, seq) {
-        /***
-
-            takewhile(pred, seq) --> seq[0], seq[1], ... until pred(seq[n])
-                fails
-
-        ***/
-        var self = MochiKit.Iter;
-        seq = self.iter(seq);
-        return {
-            repr: function () { return "takewhile(...)"; },
-            toString: MochiKit.Base.forward("repr"),
-            next: function () {
-                var rval = seq.next();
-                if (!pred(rval)) {
-                    this.next = function () {
-                        throw self.StopIteration;
-                    };
-                    this.next();
-                }
-                return rval;
-            }
-        };
-    },
-
-    dropwhile: function (pred, seq) {
-        /***
-
-            dropwhile(pred, seq) --> seq[n], seq[n + 1], starting when
-                pred(seq[n]) fails
-
-        ***/
-        seq = MochiKit.Iter.iter(seq);
-        var m = MochiKit.Base;
-        var bind = m.bind;
-        return {
-            "repr": function () { return "dropwhile(...)"; },
-            "toString": m.forward("repr"),
-            "next": function () {
-                while (true) {
-                    var rval = seq.next();
-                    if (!pred(rval)) {
-                        break;
-                    }
-                }
-                this.next = bind("next", seq);
-                return rval;
-            }
-        };
-    },
-
-    _tee: function (ident, sync, iterable) {
-        sync.pos[ident] = -1;
-        var m = MochiKit.Base;
-        var listMin = m.listMin;
-        return {
-            repr: function () { return "tee(" + ident + ", ...)"; },
-            toString: m.forward("repr"),
-            next: function () {
-                var rval;
-                var i = sync.pos[ident];
-
-                if (i == sync.max) {
-                    rval = iterable.next();
-                    sync.deque.push(rval);
-                    sync.max += 1;
-                    sync.pos[ident] += 1;
-                } else {
-                    rval = sync.deque[i - sync.min];
-                    sync.pos[ident] += 1;
-                    if (i == sync.min && listMin(sync.pos) != sync.min) {
-                        sync.min += 1;
-                        sync.deque.shift();
-                    }
-                }
-                return rval;
-            }
-        };
-    },
-
-    tee: function (iterable, n/* = 2 */) {
-        /***
-
-            tee(it, n=2) --> (it1, it2, it3, ... itn) splits one iterator
-                into n
-
-        ***/
-        var rval = [];
-        var sync = {
-            "pos": [],
-            "deque": [],
-            "max": -1,
-            "min": -1
-        };
-        if (arguments.length == 1) {
-            n = 2;
-        }
-        var self = MochiKit.Iter;
-        iterable = self.iter(iterable);
-        var _tee = self._tee;
-        for (var i = 0; i < n; i++) {
-            rval.push(_tee(i, sync, iterable));
-        }
-        return rval;
-    },
-
-    list: function (iterable) {
-        /***
-
-            Convert an iterable to a new array
-
-        ***/
-
-        // Fast-path for Array and Array-like
-        var m = MochiKit.Base;
-        if (typeof(iterable.slice) == 'function') {
-            return iterable.slice();
-        } else if (m.isArrayLike(iterable)) {
-            return m.concat(iterable);
-        }
-
-        var self = MochiKit.Iter;
-        iterable = self.iter(iterable);
-        var rval = [];
-        try {
-            while (true) {
-                rval.push(iterable.next());
-            }
-        } catch (e) {
-            if (e != self.StopIteration) {
-                throw e;
-            }
-            return rval;
-        }
-        // mozilla warnings aren't too bright
-        return undefined;
-    },
-
-
-    reduce: function (fn, iterable, /* optional */initial) {
-        /***
-
-            Apply a fn = function (a, b) cumulatively to the items of an
-            iterable from left to right, so as to reduce the iterable
-            to a single value.
-
-            For example::
-
-                reduce(function (a, b) { return x + y; }, [1, 2, 3, 4, 5])
-
-            calculates::
-
-                ((((1 + 2) + 3) + 4) + 5).
-
-            If initial is given, it is placed before the items of the sequence
-            in the calculation, and serves as a default when the sequence is
-            empty.
-
-            Note that the above example could be written more clearly as::
-
-                reduce(operator.add, [1, 2, 3, 4, 5])
-
-            Or even simpler::
-
-                sum([1, 2, 3, 4, 5])
-
-        ***/
-        var i = 0;
-        var x = initial;
-        var self = MochiKit.Iter;
-        iterable = self.iter(iterable);
-        if (arguments.length < 3) {
-            try {
-                x = iterable.next();
-            } catch (e) {
-                if (e == self.StopIteration) {
-                    e = new TypeError("reduce() of empty sequence with no initial value");
-                }
-                throw e;
-            }
-            i++;
-        }
-        try {
-            while (true) {
-                x = fn(x, iterable.next());
-            }
-        } catch (e) {
-            if (e != self.StopIteration) {
-                throw e;
-            }
-        }
-        return x;
-    },
-
-    range: function (/* [start,] stop[, step] */) {
-        /***
-
-        Return an iterator containing an arithmetic progression of integers.
-        range(i, j) returns iter([i, i + 1, i + 2, ..., j - 1]);
-        start (!) defaults to 0.  When step is given, it specifies the
-        increment (or decrement).  For example, range(4) returns
-        iter([0, 1, 2, 3]).  The end point is omitted!  These are exactly the
-        valid elements for an array of 4 elements.
-
-        ***/
-        var start = 0;
-        var stop = 0;
-        var step = 1;
-        if (arguments.length == 1) {
-            stop = arguments[0];
-        } else if (arguments.length == 2) {
-            start = arguments[0];
-            stop = arguments[1];
-        } else if (arguments.length == 3) {
-            start = arguments[0];
-            stop = arguments[1];
-            step = arguments[2];
-        } else {
-            throw new TypeError("range() takes 1, 2, or 3 arguments!");
-        }
-        if (step == 0) {
-            throw new TypeError("range() step must not be 0");
-        }
-        return {
-            next: function () {
-                if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {
-                    throw MochiKit.Iter.StopIteration;
-                }
-                var rval = start;
-                start += step;
-                return rval;
-            },
-            repr: function () {
-                return "range(" + [start, stop, step].join(", ") + ")";
-            },
-            toString: MochiKit.Base.forward("repr")
-        };
-    },
-
-    sum: function (iterable, start/* = 0 */) {
-        /***
-
-        Returns the sum of a sequence of numbers (NOT strings) plus the value
-        of parameter 'start' (with a default of 0).  When the sequence is
-        empty, returns start.
-
-        Equivalent to::
-
-            reduce(operator.add, iterable, start);
-
-        ***/
-        var x = start || 0;
-        var self = MochiKit.Iter;
-        iterable = self.iter(iterable);
-        try {
-            while (true) {
-                x += iterable.next();
-            }
-        } catch (e) {
-            if (e != self.StopIteration) {
-                throw e;
-            }
-        }
-        return x;
-    },
-
-    exhaust: function (iterable) {
-        /***
-
-            Exhausts an iterable without saving the results anywhere,
-            like list(iterable) when you don't care what the output is.
-
-        ***/
-
-        var self = MochiKit.Iter;
-        iterable = self.iter(iterable);
-        try {
-            while (true) {
-                iterable.next();
-            }
-        } catch (e) {
-            if (e != self.StopIteration) {
-                throw e;
-            }
-        }
-    },
-
-    forEach: function (iterable, func, /* optional */self) {
-        /***
-
-            Call func for each item in iterable.
-
-        ***/
-        var m = MochiKit.Base;
-        if (arguments.length > 2) {
-            func = m.bind(func, self);
-        }
-        // fast path for array
-        if (m.isArrayLike(iterable)) {
-            try {
-                for (var i = 0; i < iterable.length; i++) {
-                    func(iterable[i]);
-                }
-            } catch (e) {
-                if (e != MochiKit.Iter.StopIteration) {
-                    throw e;
-                }
-            }
-        } else {
-            self = MochiKit.Iter;
-            self.exhaust(self.imap(func, iterable));
-        }
-    },
-
-    every: function (iterable, func) {
-        /***
-
-            Return true if func(item) is true for every item in iterable
-
-        ***/
-        var self = MochiKit.Iter;
-        try {
-            self.ifilterfalse(func, iterable).next();
-            return false;
-        } catch (e) {
-            if (e != self.StopIteration) {
-                throw e;
-            }
-            return true;
-        }
-    },
-
-    sorted: function (iterable, /* optional */cmp) {
-        /***
-
-            Return a sorted array from iterable
-
-        ***/
-        var rval = MochiKit.Iter.list(iterable);
-        if (arguments.length == 1) {
-            cmp = MochiKit.Base.compare;
-        }
-        rval.sort(cmp);
-        return rval;
-    },
-
-    reversed: function (iterable) {
-        /***
-
-            Return a reversed array from iterable.
-
-        ***/
-        var rval = MochiKit.Iter.list(iterable);
-        rval.reverse();
-        return rval;
-    },
-
-    some: function (iterable, func) {
-        /***
-
-            Return true if func(item) is true for at least one item in iterable
-
-        ***/
-        var self = MochiKit.Iter;
-        try {
-            self.ifilter(func, iterable).next();
-            return true;
-        } catch (e) {
-            if (e != self.StopIteration) {
-                throw e;
-            }
-            return false;
-        }
-    },
-
-    iextend: function (lst, iterable) {
-        /***
-
-            Just like list(iterable), except it pushes results on lst
-
-        ***/
-
-        if (MochiKit.Base.isArrayLike(iterable)) {
-            // fast-path for array-like
-            for (var i = 0; i < iterable.length; i++) {
-                lst.push(iterable[i]);
-            }
-        } else {
-            var self = MochiKit.Iter;
-            iterable = self.iter(iterable);
-            try {
-                while (true) {
-                    lst.push(iterable.next());
-                }
-            } catch (e) {
-                if (e != self.StopIteration) {
-                    throw e;
-                }
-            }
-        }
-        return lst;
-    },
-
-    groupby: function(iterable, /* optional */ keyfunc) {
-        /***
-
-            Like Python's itertools.groupby
-
-        ***/
-        var m = MochiKit.Base;
-        var self = MochiKit.Iter;
-        if (arguments.length < 2) {
-            keyfunc = m.operator.identity;
-        }
-        iterable = self.iter(iterable);
-
-        // shared
-        var pk = undefined;
-        var k = undefined;
-        var v;
-
-        function fetch() {
-            v = iterable.next();
-            k = keyfunc(v);
-        };
-
-        function eat() {
-            var ret = v;
-            v = undefined;
-            return ret;
-        };
-
-        var first = true;
-        return {
-            repr: function () { return "groupby(...)"; },
-            next: function() {
-                // iterator-next
-
-                // iterate until meet next group
-                while (k == pk) {
-                    fetch();
-                    if (first) {
-                        first = false;
-                        break;
-                    }
-                }
-                pk = k;
-                return [k, {
-                    next: function() {
-                        // subiterator-next
-                        if (v == undefined) { // Is there something to eat?
-                            fetch();
-                        }
-                        if (k != pk) {
-                            throw self.StopIteration;
-                        }
-                        return eat();
-                    }
-                }];
-            }
-        };
-    },
-
-    groupby_as_array: function (iterable, /* optional */ keyfunc) {
-        /***
-
-            Like groupby, but return array of [key, subarray of values]
-
-        ***/
-        var m = MochiKit.Base;
-        var self = MochiKit.Iter;
-        if (arguments.length < 2) {
-            keyfunc = m.operator.identity;
-        }
-
-        iterable = self.iter(iterable);
-        var result = [];
-        var first = true;
-        var prev_key;
-        while (true) {
-            try {
-                var value = iterable.next();
-                var key = keyfunc(value);
-            } catch (e) {
-                if (e == self.StopIteration) {
-                    break;
-                }
-                throw e;
-            }
-            if (first || key != prev_key) {
-                var values = [];
-                result.push([key, values]);
-            }
-            values.push(value);
-            first = false;
-            prev_key = key;
-        }
-        return result;
-    },
-
-    arrayLikeIter: function (iterable) {
-        var i = 0;
-        return {
-            repr: function () { return "arrayLikeIter(...)"; },
-            toString: MochiKit.Base.forward("repr"),
-            next: function () {
-                if (i >= iterable.length) {
-                    throw MochiKit.Iter.StopIteration;
-                }
-                return iterable[i++];
-            }
-        };
-    },
-
-    hasIterateNext: function (iterable) {
-        return (iterable && typeof(iterable.iterateNext) == "function");
-    },
-
-    iterateNextIter: function (iterable) {
-        return {
-            repr: function () { return "iterateNextIter(...)"; },
-            toString: MochiKit.Base.forward("repr"),
-            next: function () {
-                var rval = iterable.iterateNext();
-                if (rval === null || rval === undefined) {
-                    throw MochiKit.Iter.StopIteration;
-                }
-                return rval;
-            }
-        };
-    }
-});
-
-
-MochiKit.Iter.EXPORT_OK = [
-    "iteratorRegistry",
-    "arrayLikeIter",
-    "hasIterateNext",
-    "iterateNextIter",
-];
-
-MochiKit.Iter.EXPORT = [
-    "StopIteration",
-    "registerIteratorFactory",
-    "iter",
-    "count",
-    "cycle",
-    "repeat",
-    "next",
-    "izip",
-    "ifilter",
-    "ifilterfalse",
-    "islice",
-    "imap",
-    "applymap",
-    "chain",
-    "takewhile",
-    "dropwhile",
-    "tee",
-    "list",
-    "reduce",
-    "range",
-    "sum",
-    "exhaust",
-    "forEach",
-    "every",
-    "sorted",
-    "reversed",
-    "some",
-    "iextend",
-    "groupby",
-    "groupby_as_array"
-];
-
-MochiKit.Iter.__new__ = function () {
-    var m = MochiKit.Base;
-    this.StopIteration = new m.NamedError("StopIteration");
-    this.iteratorRegistry = new m.AdapterRegistry();
-    // Register the iterator factory for arrays
-    this.registerIteratorFactory(
-        "arrayLike",
-        m.isArrayLike,
-        this.arrayLikeIter
-    );
-
-    this.registerIteratorFactory(
-        "iterateNext",
-        this.hasIterateNext,
-        this.iterateNextIter
-    );
-
-    this.EXPORT_TAGS = {
-        ":common": this.EXPORT,
-        ":all": m.concat(this.EXPORT, this.EXPORT_OK)
-    };
-
-    m.nameFunctions(this);
-
+catch(e){
+throw "MochiKit.Iter depends on MochiKit.Base!";
+}
+if(typeof (MochiKit.Iter)=="undefined"){
+MochiKit.Iter={};
+}
+MochiKit.Iter.NAME="MochiKit.Iter";
+MochiKit.Iter.VERSION="1.3";
+MochiKit.Base.update(MochiKit.Iter,{__repr__:function(){
+return "["+this.NAME+" "+this.VERSION+"]";
+},toString:function(){
+return this.__repr__();
+},registerIteratorFactory:function(name,_127,_128,_129){
+MochiKit.Iter.iteratorRegistry.register(name,_127,_128,_129);
+},iter:function(_130,_131){
+var self=MochiKit.Iter;
+if(arguments.length==2){
+return self.takewhile(function(a){
+return a!=_131;
+},_130);
+}
+if(typeof (_130.next)=="function"){
+return _130;
+}else{
+if(typeof (_130.iter)=="function"){
+return _130.iter();
+}
+}
+try{
+return self.iteratorRegistry.match(_130);
+}
+catch(e){
+var m=MochiKit.Base;
+if(e==m.NotFound){
+e=new TypeError(typeof (_130)+": "+m.repr(_130)+" is not iterable");
+}
+throw e;
+}
+},count:function(n){
+if(!n){
+n=0;
+}
+var m=MochiKit.Base;
+return {repr:function(){
+return "count("+n+")";
+},toString:m.forward("repr"),next:m.counter(n)};
+},cycle:function(p){
+var self=MochiKit.Iter;
+var m=MochiKit.Base;
+var lst=[];
+var _134=self.iter(p);
+return {repr:function(){
+return "cycle(...)";
+},toString:m.forward("repr"),next:function(){
+try{
+var rval=_134.next();
+lst.push(rval);
+return rval;
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+if(lst.length==0){
+this.next=function(){
+throw self.StopIteration;
 };
-
+}else{
+var i=-1;
+this.next=function(){
+i=(i+1)%lst.length;
+return lst[i];
+};
+}
+return this.next();
+}
+}};
+},repeat:function(elem,n){
+var m=MochiKit.Base;
+if(typeof (n)=="undefined"){
+return {repr:function(){
+return "repeat("+m.repr(elem)+")";
+},toString:m.forward("repr"),next:function(){
+return elem;
+}};
+}
+return {repr:function(){
+return "repeat("+m.repr(elem)+", "+n+")";
+},toString:m.forward("repr"),next:function(){
+if(n<=0){
+throw MochiKit.Iter.StopIteration;
+}
+n-=1;
+return elem;
+}};
+},next:function(_136){
+return _136.next();
+},izip:function(p,q){
+var m=MochiKit.Base;
+var next=MochiKit.Iter.next;
+var _139=m.map(iter,arguments);
+return {repr:function(){
+return "izip(...)";
+},toString:m.forward("repr"),next:function(){
+return m.map(next,_139);
+}};
+},ifilter:function(pred,seq){
+var m=MochiKit.Base;
+seq=MochiKit.Iter.iter(seq);
+if(pred==null){
+pred=m.operator.truth;
+}
+return {repr:function(){
+return "ifilter(...)";
+},toString:m.forward("repr"),next:function(){
+while(true){
+var rval=seq.next();
+if(pred(rval)){
+return rval;
+}
+}
+return undefined;
+}};
+},ifilterfalse:function(pred,seq){
+var m=MochiKit.Base;
+seq=MochiKit.Iter.iter(seq);
+if(pred==null){
+pred=m.operator.truth;
+}
+return {repr:function(){
+return "ifilterfalse(...)";
+},toString:m.forward("repr"),next:function(){
+while(true){
+var rval=seq.next();
+if(!pred(rval)){
+return rval;
+}
+}
+return undefined;
+}};
+},islice:function(seq){
+var self=MochiKit.Iter;
+var m=MochiKit.Base;
+seq=self.iter(seq);
+var _142=0;
+var stop=0;
+var step=1;
+var i=-1;
+if(arguments.length==2){
+stop=arguments[1];
+}else{
+if(arguments.length==3){
+_142=arguments[1];
+stop=arguments[2];
+}else{
+_142=arguments[1];
+stop=arguments[2];
+step=arguments[3];
+}
+}
+return {repr:function(){
+return "islice("+["...",_142,stop,step].join(", ")+")";
+},toString:m.forward("repr"),next:function(){
+var rval;
+while(i<_142){
+rval=seq.next();
+i++;
+}
+if(_142>=stop){
+throw self.StopIteration;
+}
+_142+=step;
+return rval;
+}};
+},imap:function(fun,p,q){
+var m=MochiKit.Base;
+var self=MochiKit.Iter;
+var _146=m.map(self.iter,m.extend(null,arguments,1));
+var map=m.map;
+var next=self.next;
+return {repr:function(){
+return "imap(...)";
+},toString:m.forward("repr"),next:function(){
+return fun.apply(this,map(next,_146));
+}};
+},applymap:function(fun,seq,self){
+seq=MochiKit.Iter.iter(seq);
+var m=MochiKit.Base;
+return {repr:function(){
+return "applymap(...)";
+},toString:m.forward("repr"),next:function(){
+return fun.apply(self,seq.next());
+}};
+},chain:function(p,q){
+var self=MochiKit.Iter;
+var m=MochiKit.Base;
+if(arguments.length==1){
+return self.iter(arguments[0]);
+}
+var _148=m.map(self.iter,arguments);
+return {repr:function(){
+return "chain(...)";
+},toString:m.forward("repr"),next:function(){
+while(_148.length>1){
+try{
+return _148[0].next();
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+_148.shift();
+}
+}
+if(_148.length==1){
+var arg=_148.shift();
+this.next=m.bind("next",arg);
+return this.next();
+}
+throw self.StopIteration;
+}};
+},takewhile:function(pred,seq){
+var self=MochiKit.Iter;
+seq=self.iter(seq);
+return {repr:function(){
+return "takewhile(...)";
+},toString:MochiKit.Base.forward("repr"),next:function(){
+var rval=seq.next();
+if(!pred(rval)){
+this.next=function(){
+throw self.StopIteration;
+};
+this.next();
+}
+return rval;
+}};
+},dropwhile:function(pred,seq){
+seq=MochiKit.Iter.iter(seq);
+var m=MochiKit.Base;
+var bind=m.bind;
+return {"repr":function(){
+return "dropwhile(...)";
+},"toString":m.forward("repr"),"next":function(){
+while(true){
+var rval=seq.next();
+if(!pred(rval)){
+break;
+}
+}
+this.next=bind("next",seq);
+return rval;
+}};
+},_tee:function(_150,sync,_152){
+sync.pos[_150]=-1;
+var m=MochiKit.Base;
+var _153=m.listMin;
+return {repr:function(){
+return "tee("+_150+", ...)";
+},toString:m.forward("repr"),next:function(){
+var rval;
+var i=sync.pos[_150];
+if(i==sync.max){
+rval=_152.next();
+sync.deque.push(rval);
+sync.max+=1;
+sync.pos[_150]+=1;
+}else{
+rval=sync.deque[i-sync.min];
+sync.pos[_150]+=1;
+if(i==sync.min&&_153(sync.pos)!=sync.min){
+sync.min+=1;
+sync.deque.shift();
+}
+}
+return rval;
+}};
+},tee:function(_154,n){
+var rval=[];
+var sync={"pos":[],"deque":[],"max":-1,"min":-1};
+if(arguments.length==1){
+n=2;
+}
+var self=MochiKit.Iter;
+_154=self.iter(_154);
+var _tee=self._tee;
+for(var i=0;i<n;i++){
+rval.push(_tee(i,sync,_154));
+}
+return rval;
+},list:function(_156){
+var m=MochiKit.Base;
+if(typeof (_156.slice)=="function"){
+return _156.slice();
+}else{
+if(m.isArrayLike(_156)){
+return m.concat(_156);
+}
+}
+var self=MochiKit.Iter;
+_156=self.iter(_156);
+var rval=[];
+try{
+while(true){
+rval.push(_156.next());
+}
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+return rval;
+}
+return undefined;
+},reduce:function(fn,_157,_158){
+var i=0;
+var x=_158;
+var self=MochiKit.Iter;
+_157=self.iter(_157);
+if(arguments.length<3){
+try{
+x=_157.next();
+}
+catch(e){
+if(e==self.StopIteration){
+e=new TypeError("reduce() of empty sequence with no initial value");
+}
+throw e;
+}
+i++;
+}
+try{
+while(true){
+x=fn(x,_157.next());
+}
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+}
+return x;
+},range:function(){
+var _160=0;
+var stop=0;
+var step=1;
+if(arguments.length==1){
+stop=arguments[0];
+}else{
+if(arguments.length==2){
+_160=arguments[0];
+stop=arguments[1];
+}else{
+if(arguments.length==3){
+_160=arguments[0];
+stop=arguments[1];
+step=arguments[2];
+}else{
+throw new TypeError("range() takes 1, 2, or 3 arguments!");
+}
+}
+}
+if(step==0){
+throw new TypeError("range() step must not be 0");
+}
+return {next:function(){
+if((step>0&&_160>=stop)||(step<0&&_160<=stop)){
+throw MochiKit.Iter.StopIteration;
+}
+var rval=_160;
+_160+=step;
+return rval;
+},repr:function(){
+return "range("+[_160,stop,step].join(", ")+")";
+},toString:MochiKit.Base.forward("repr")};
+},sum:function(_161,_162){
+var x=_162||0;
+var self=MochiKit.Iter;
+_161=self.iter(_161);
+try{
+while(true){
+x+=_161.next();
+}
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+}
+return x;
+},exhaust:function(_163){
+var self=MochiKit.Iter;
+_163=self.iter(_163);
+try{
+while(true){
+_163.next();
+}
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+}
+},forEach:function(_164,func,self){
+var m=MochiKit.Base;
+if(arguments.length>2){
+func=m.bind(func,self);
+}
+if(m.isArrayLike(_164)){
+try{
+for(var i=0;i<_164.length;i++){
+func(_164[i]);
+}
+}
+catch(e){
+if(e!=MochiKit.Iter.StopIteration){
+throw e;
+}
+}
+}else{
+self=MochiKit.Iter;
+self.exhaust(self.imap(func,_164));
+}
+},every:function(_166,func){
+var self=MochiKit.Iter;
+try{
+self.ifilterfalse(func,_166).next();
+return false;
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+return true;
+}
+},sorted:function(_167,cmp){
+var rval=MochiKit.Iter.list(_167);
+if(arguments.length==1){
+cmp=MochiKit.Base.compare;
+}
+rval.sort(cmp);
+return rval;
+},reversed:function(_168){
+var rval=MochiKit.Iter.list(_168);
+rval.reverse();
+return rval;
+},some:function(_169,func){
+var self=MochiKit.Iter;
+try{
+self.ifilter(func,_169).next();
+return true;
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+return false;
+}
+},iextend:function(lst,_170){
+if(MochiKit.Base.isArrayLike(_170)){
+for(var i=0;i<_170.length;i++){
+lst.push(_170[i]);
+}
+}else{
+var self=MochiKit.Iter;
+_170=self.iter(_170);
+try{
+while(true){
+lst.push(_170.next());
+}
+}
+catch(e){
+if(e!=self.StopIteration){
+throw e;
+}
+}
+}
+return lst;
+},groupby:function(_171,_172){
+var m=MochiKit.Base;
+var self=MochiKit.Iter;
+if(arguments.length<2){
+_172=m.operator.identity;
+}
+_171=self.iter(_171);
+var pk=undefined;
+var k=undefined;
+var v;
+function fetch(){
+v=_171.next();
+k=_172(v);
+}
+function eat(){
+var ret=v;
+v=undefined;
+return ret;
+}
+var _175=true;
+return {repr:function(){
+return "groupby(...)";
+},next:function(){
+while(k==pk){
+fetch();
+if(_175){
+_175=false;
+break;
+}
+}
+pk=k;
+return [k,{next:function(){
+if(v==undefined){
+fetch();
+}
+if(k!=pk){
+throw self.StopIteration;
+}
+return eat();
+}}];
+}};
+},groupby_as_array:function(_176,_177){
+var m=MochiKit.Base;
+var self=MochiKit.Iter;
+if(arguments.length<2){
+_177=m.operator.identity;
+}
+_176=self.iter(_176);
+var _178=[];
+var _179=true;
+var _180;
+while(true){
+try{
+var _181=_176.next();
+var key=_177(_181);
+}
+catch(e){
+if(e==self.StopIteration){
+break;
+}
+throw e;
+}
+if(_179||key!=_180){
+var _182=[];
+_178.push([key,_182]);
+}
+_182.push(_181);
+_179=false;
+_180=key;
+}
+return _178;
+},arrayLikeIter:function(_183){
+var i=0;
+return {repr:function(){
+return "arrayLikeIter(...)";
+},toString:MochiKit.Base.forward("repr"),next:function(){
+if(i>=_183.length){
+throw MochiKit.Iter.StopIteration;
+}
+return _183[i++];
+}};
+},hasIterateNext:function(_184){
+return (_184&&typeof (_184.iterateNext)=="function");
+},iterateNextIter:function(_185){
+return {repr:function(){
+return "iterateNextIter(...)";
+},toString:MochiKit.Base.forward("repr"),next:function(){
+var rval=_185.iterateNext();
+if(rval===null||rval===undefined){
+throw MochiKit.Iter.StopIteration;
+}
+return rval;
+}};
+}});
+MochiKit.Iter.EXPORT_OK=["iteratorRegistry","arrayLikeIter","hasIterateNext","iterateNextIter",];
+MochiKit.Iter.EXPORT=["StopIteration","registerIteratorFactory","iter","count","cycle","repeat","next","izip","ifilter","ifilterfalse","islice","imap","applymap","chain","takewhile","dropwhile","tee","list","reduce","range","sum","exhaust","forEach","every","sorted","reversed","some","iextend","groupby","groupby_as_array"];
+MochiKit.Iter.__new__=function(){
+var m=MochiKit.Base;
+this.StopIteration=new m.NamedError("StopIteration");
+this.iteratorRegistry=new m.AdapterRegistry();
+this.registerIteratorFactory("arrayLike",m.isArrayLike,this.arrayLikeIter);
+this.registerIteratorFactory("iterateNext",this.hasIterateNext,this.iterateNextIter);
+this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
+m.nameFunctions(this);
+};
 MochiKit.Iter.__new__();
-
-//
-// XXX: Internet Explorer blows
-//
-reduce = MochiKit.Iter.reduce;
-
-MochiKit.Base._exportSymbols(this, MochiKit.Iter);
-
-/***
-
-MochiKit.Logging 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito.  All rights Reserved.
-
-***/
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.Logging');
-    dojo.require('MochiKit.Base');
+reduce=MochiKit.Iter.reduce;
+MochiKit.Base._exportSymbols(this,MochiKit.Iter);
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Logging");
+dojo.require("MochiKit.Base");
 }
-
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use("MochiKit.Base", []);
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Base",[]);
 }
-
-try {
-    if (typeof(MochiKit.Base) == 'undefined') {
-        throw "";
-    }
-} catch (e) {
-    throw "MochiKit.Logging depends on MochiKit.Base!";
+try{
+if(typeof (MochiKit.Base)=="undefined"){
+throw "";
 }
-
-if (typeof(MochiKit.Logging) == 'undefined') {
-    MochiKit.Logging = {};
 }
-
-MochiKit.Logging.NAME = "MochiKit.Logging";
-MochiKit.Logging.VERSION = "1.3";
-MochiKit.Logging.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+catch(e){
+throw "MochiKit.Logging depends on MochiKit.Base!";
+}
+if(typeof (MochiKit.Logging)=="undefined"){
+MochiKit.Logging={};
+}
+MochiKit.Logging.NAME="MochiKit.Logging";
+MochiKit.Logging.VERSION="1.3";
+MochiKit.Logging.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
 };
-
-MochiKit.Logging.toString = function () {
-    return this.__repr__();
+MochiKit.Logging.toString=function(){
+return this.__repr__();
 };
-
-
-MochiKit.Logging.EXPORT = [
-    "LogLevel",
-    "LogMessage",
-    "Logger",
-    "alertListener",
-    "logger",
-    "log",
-    "logError",
-    "logDebug",
-    "logFatal",
-    "logWarning"
-];
-
-
-MochiKit.Logging.EXPORT_OK = [
-    "logLevelAtLeast",
-    "isLogMessage",
-    "compareLogMessage"
-];
-
-
-MochiKit.Logging.LogMessage = function (num, level, info) {
-    this.num = num;
-    this.level = level;
-    this.info = info;
-    this.timestamp = new Date();
+MochiKit.Logging.EXPORT=["LogLevel","LogMessage","Logger","alertListener","logger","log","logError","logDebug","logFatal","logWarning"];
+MochiKit.Logging.EXPORT_OK=["logLevelAtLeast","isLogMessage","compareLogMessage"];
+MochiKit.Logging.LogMessage=function(num,_187,info){
+this.num=num;
+this.level=_187;
+this.info=info;
+this.timestamp=new Date();
 };
-
-MochiKit.Logging.LogMessage.prototype = {
-    repr: function () {
-        var m = MochiKit.Base;
-        return 'LogMessage(' +
-            m.map(
-                m.repr,
-                [this.num, this.level, this.info]
-            ).join(', ') + ')';
-    },
-    toString: MochiKit.Base.forward("repr")
+MochiKit.Logging.LogMessage.prototype={repr:function(){
+var m=MochiKit.Base;
+return "LogMessage("+m.map(m.repr,[this.num,this.level,this.info]).join(", ")+")";
+},toString:MochiKit.Base.forward("repr")};
+MochiKit.Base.update(MochiKit.Logging,{logLevelAtLeast:function(_189){
+var self=MochiKit.Logging;
+if(typeof (_189)=="string"){
+_189=self.LogLevel[_189];
+}
+return function(msg){
+var _191=msg.level;
+if(typeof (_191)=="string"){
+_191=self.LogLevel[_191];
+}
+return _191>=_189;
 };
-
-MochiKit.Base.update(MochiKit.Logging, {
-    logLevelAtLeast: function (minLevel) {
-        /***
-
-            Return a function that will match log messages whose level
-            is at least minLevel
-
-        ***/
-        var self = MochiKit.Logging;
-        if (typeof(minLevel) == 'string') {
-            minLevel = self.LogLevel[minLevel];
-        }
-        return function (msg) {
-            var msgLevel = msg.level;
-            if (typeof(msgLevel) == 'string') {
-                msgLevel = self.LogLevel[msgLevel];
-            }
-            return msgLevel >= minLevel;
-        }
-    },
-
-    isLogMessage: function (/* ... */) {
-        var LogMessage = MochiKit.Logging.LogMessage;
-        for (var i = 0; i < arguments.length; i++) {
-            if (!(arguments[i] instanceof LogMessage)) {
-                return false;
-            }
-        }
-        return true;
-    },
-
-    compareLogMessage: function (a, b) {
-        return MochiKit.Base.compare([a.level, a.info], [b.level, b.info]);
-    },
-
-    alertListener: function (msg) {
-        /***
-
-        Ultra-obnoxious alert(...) listener
-
-        ***/
-        alert(
-            "num: " + msg.num +
-            "\nlevel: " +  msg.level +
-            "\ninfo: " + msg.info.join(" ")
-        );
-    }
-
-});
-
-MochiKit.Logging.Logger = function (/* optional */maxSize) {
-    /***
-
-        A basic logger object that has a buffer of recent messages
-        plus a listener dispatch mechanism for "real-time" logging
-        of important messages
-
-        maxSize is the maximum number of entries in the log.
-        If maxSize >= 0, then the log will not buffer more than that
-        many messages.
-
-        There is a default logger available named "logger", and several
-        of its methods are also global functions:
-
-            logger.log      -> log
-            logger.debug    -> logDebug
-            logger.warning  -> logWarning
-            logger.error    -> logError
-            logger.fatal    -> logFatal
-
-    ***/
-    this.counter = 0;
-    if (typeof(maxSize) == 'undefined' || maxSize == null) {
-        maxSize = -1;
-    }
-    this.maxSize = maxSize;
-    this._messages = [];
-    this.listeners = {};
+},isLogMessage:function(){
+var _192=MochiKit.Logging.LogMessage;
+for(var i=0;i<arguments.length;i++){
+if(!(arguments[i] instanceof _192)){
+return false;
+}
+}
+return true;
+},compareLogMessage:function(a,b){
+return MochiKit.Base.compare([a.level,a.info],[b.level,b.info]);
+},alertListener:function(msg){
+alert("num: "+msg.num+"\nlevel: "+msg.level+"\ninfo: "+msg.info.join(" "));
+}});
+MochiKit.Logging.Logger=function(_193){
+this.counter=0;
+if(typeof (_193)=="undefined"||_193==null){
+_193=-1;
+}
+this.maxSize=_193;
+this._messages=[];
+this.listeners={};
 };
-
-MochiKit.Logging.Logger.prototype = {
-    clear: function () {
-        /***
-
-            Clear all messages from the message buffer.
-
-        ***/
-        this._messages.splice(0, this._messages.length);
-    },
-
-    dispatchListeners: function (msg) {
-        /***
-
-            Dispatch a log message to all listeners.
-
-        ***/
-        for (var k in this.listeners) {
-            var pair = this.listeners[k];
-            if (pair.ident != k || (pair[0] && !pair[0](msg))) {
-                continue;
-            }
-            pair[1](msg);
-        }
-    },
-
-    addListener: function (ident, filter, listener) {
-        /***
-
-            Add a listener for log messages.
-
-            ident is a unique identifier that may be used to remove the listener
-            later on.
-
-            filter can be one of the following:
-                null:
-                    listener(msg) will be called for every log message
-                    received.
-
-                string:
-                    logLevelAtLeast(filter) will be used as the function
-                    (see below).
-
-                function:
-                    filter(msg) will be called for every msg, if it returns
-                    true then listener(msg) will be called.
-
-            listener is a function that takes one argument, a log message.  A log
-            message has three properties:
-
-                num:
-                    A counter that uniquely identifies a log message (per-logger)
-
-                level:
-                    A string or number representing the log level.  If string, you
-                    may want to use LogLevel[level] for comparison.
-
-                info:
-                    A list of objects passed as arguments to the log function.
-
-        ***/
-
-
-        if (typeof(filter) == 'string') {
-            filter = MochiKit.Logging.logLevelAtLeast(filter);
-        }
-        var entry = [filter, listener];
-        entry.ident = ident;
-        this.listeners[ident] = entry;
-    },
-
-    removeListener: function (ident) {
-        /***
-
-            Remove a listener using the ident given to addListener
-
-        ***/
-        delete this.listeners[ident];
-    },
-
-    baseLog: function (level, message/*, ...*/) {
-        /***
-
-            The base functionality behind all of the log functions.
-            The first argument is the log level as a string or number,
-            and all other arguments are used as the info list.
-
-            This function is available partially applied as:
-
-                Logger.debug    'DEBUG'
-                Logger.log      'INFO'
-                Logger.error    'ERROR'
-                Logger.fatal    'FATAL'
-                Logger.warning  'WARNING'
-
-            For the default logger, these are also available as global functions,
-            see the Logger constructor documentation for more info.
-
-        ***/
-
-        var msg = new MochiKit.Logging.LogMessage(
-            this.counter,
-            level,
-            MochiKit.Base.extend(null, arguments, 1)
-        );
-        this._messages.push(msg);
-        this.dispatchListeners(msg);
-        this.counter += 1;
-        while (this.maxSize >= 0 && this._messages.length > this.maxSize) {
-            this._messages.shift();
-        }
-    },
-
-    getMessages: function (howMany) {
-        /***
-
-            Return a list of up to howMany messages from the message buffer.
-
-        ***/
-        var firstMsg = 0;
-        if (!(typeof(howMany) == 'undefined' || howMany == null)) {
-            firstMsg = Math.max(0, this._messages.length - howMany);
-        }
-        return this._messages.slice(firstMsg);
-    },
-
-    getMessageText: function (howMany) {
-        /***
-
-            Get a string representing up to the last howMany messages in the
-            message buffer.  The default is 30.
-
-            The message looks like this:
-
-                LAST {messages.length} MESSAGES:
-                  [{msg.num}] {msg.level}: {m.info.join(' ')}
-                  [{msg.num}] {msg.level}: {m.info.join(' ')}
-                  ...
-
-            If you want some other format, use Logger.getMessages and do it
-            yourself.
-
-        ***/
-        if (typeof(howMany) == 'undefined' || howMany == null) {
-            howMany = 30;
-        }
-        var messages = this.getMessages(howMany);
-        if (messages.length) {
-            var lst = map(function (m) {
-                return '\n  [' + m.num + '] ' + m.level + ': ' + m.info.join(' ');
-            }, messages);
-            lst.unshift('LAST ' + messages.length + ' MESSAGES:');
-            return lst.join('');
-        }
-        return '';
-    },
-
-    debuggingBookmarklet: function (inline) {
-        if (typeof(MochiKit.LoggingPane) == "undefined") {
-            alert(this.getMessageText());
-        } else {
-            MochiKit.LoggingPane.createLoggingPane(inline || false);
-        }
-    }
+MochiKit.Logging.Logger.prototype={clear:function(){
+this._messages.splice(0,this._messages.length);
+},dispatchListeners:function(msg){
+for(var k in this.listeners){
+var pair=this.listeners[k];
+if(pair.ident!=k||(pair[0]&&!pair[0](msg))){
+continue;
+}
+pair[1](msg);
+}
+},addListener:function(_194,_195,_196){
+if(typeof (_195)=="string"){
+_195=MochiKit.Logging.logLevelAtLeast(_195);
+}
+var _197=[_195,_196];
+_197.ident=_194;
+this.listeners[_194]=_197;
+},removeListener:function(_198){
+delete this.listeners[_198];
+},baseLog:function(_199,_200){
+var msg=new MochiKit.Logging.LogMessage(this.counter,_199,MochiKit.Base.extend(null,arguments,1));
+this._messages.push(msg);
+this.dispatchListeners(msg);
+this.counter+=1;
+while(this.maxSize>=0&&this._messages.length>this.maxSize){
+this._messages.shift();
+}
+},getMessages:function(_201){
+var _202=0;
+if(!(typeof (_201)=="undefined"||_201==null)){
+_202=Math.max(0,this._messages.length-_201);
+}
+return this._messages.slice(_202);
+},getMessageText:function(_203){
+if(typeof (_203)=="undefined"||_203==null){
+_203=30;
+}
+var _204=this.getMessages(_203);
+if(_204.length){
+var lst=map(function(m){
+return "\n  ["+m.num+"] "+m.level+": "+m.info.join(" ");
+},_204);
+lst.unshift("LAST "+_204.length+" MESSAGES:");
+return lst.join("");
+}
+return "";
+},debuggingBookmarklet:function(_205){
+if(typeof (MochiKit.LoggingPane)=="undefined"){
+alert(this.getMessageText());
+}else{
+MochiKit.LoggingPane.createLoggingPane(_205||false);
+}
+}};
+MochiKit.Logging.__new__=function(){
+this.LogLevel={ERROR:40,FATAL:50,WARNING:30,INFO:20,DEBUG:10};
+var m=MochiKit.Base;
+m.registerComparator("LogMessage",this.isLogMessage,this.compareLogMessage);
+var _206=m.partial;
+var _207=this.Logger;
+var _208=_207.prototype.baseLog;
+m.update(this.Logger.prototype,{debug:_206(_208,"DEBUG"),log:_206(_208,"INFO"),error:_206(_208,"ERROR"),fatal:_206(_208,"FATAL"),warning:_206(_208,"WARNING")});
+var self=this;
+var _209=function(name){
+return function(){
+self.logger[name].apply(self.logger,arguments);
 };
-
-
-MochiKit.Logging.__new__ = function () {
-    this.LogLevel = {
-        ERROR: 40,
-        FATAL: 50,
-        WARNING: 30,
-        INFO: 20,
-        DEBUG: 10
-    };
-
-    var m = MochiKit.Base;
-    m.registerComparator("LogMessage",
-        this.isLogMessage,
-        this.compareLogMessage
-    );
-
-    var partial = m.partial;
-
-    var Logger = this.Logger;
-    var baseLog = Logger.prototype.baseLog;
-    m.update(this.Logger.prototype, {
-        debug: partial(baseLog, 'DEBUG'),
-        log: partial(baseLog, 'INFO'),
-        error: partial(baseLog, 'ERROR'),
-        fatal: partial(baseLog, 'FATAL'),
-        warning: partial(baseLog, 'WARNING')
-    });
-
-    // indirectly find logger so it can be replaced
-    var self = this;
-    var connectLog = function (name) {
-        return function () {
-            self.logger[name].apply(self.logger, arguments);
-        }
-    };
-
-    this.log = connectLog('log');
-    this.logError = connectLog('error');
-    this.logDebug = connectLog('debug');
-    this.logFatal = connectLog('fatal');
-    this.logWarning = connectLog('warning');
-    this.logger = new Logger();
-
-    this.EXPORT_TAGS = {
-        ":common": this.EXPORT,
-        ":all": m.concat(this.EXPORT, this.EXPORT_OK)
-    };
-
-    m.nameFunctions(this);
-
 };
-
+this.log=_209("log");
+this.logError=_209("error");
+this.logDebug=_209("debug");
+this.logFatal=_209("fatal");
+this.logWarning=_209("warning");
+this.logger=new _207();
+this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
+m.nameFunctions(this);
+};
 MochiKit.Logging.__new__();
-
-MochiKit.Base._exportSymbols(this, MochiKit.Logging);
-
-/***
-
-MochiKit.DateTime 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito.  All rights Reserved.
-
-***/
-
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.DateTime');
+MochiKit.Base._exportSymbols(this,MochiKit.Logging);
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.DateTime");
 }
-
-if (typeof(MochiKit) == 'undefined') {
-    MochiKit = {};
+if(typeof (MochiKit)=="undefined"){
+MochiKit={};
 }
-
-if (typeof(MochiKit.DateTime) == 'undefined') {
-    MochiKit.DateTime = {};
+if(typeof (MochiKit.DateTime)=="undefined"){
+MochiKit.DateTime={};
 }
-
-MochiKit.DateTime.NAME = "MochiKit.DateTime";
-MochiKit.DateTime.VERSION = "1.3";
-MochiKit.DateTime.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+MochiKit.DateTime.NAME="MochiKit.DateTime";
+MochiKit.DateTime.VERSION="1.3";
+MochiKit.DateTime.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
 };
-MochiKit.DateTime.toString = function () {
-    return this.__repr__();
+MochiKit.DateTime.toString=function(){
+return this.__repr__();
 };
-
-MochiKit.DateTime.isoDate = function (str) {
-    /***
-
-        Convert an ISO 8601 date (YYYY-MM-DD) to a Date object.
-
-    ***/
-    str = str + "";
-    if (typeof(str) != "string" || str.length == 0) {
-        return null;
-    }
-    var iso = str.split('-');
-    if (iso.length == 0) {
-        return null;
-    }
-    return new Date(iso[0], iso[1] - 1, iso[2]);
+MochiKit.DateTime.isoDate=function(str){
+str=str+"";
+if(typeof (str)!="string"||str.length==0){
+return null;
+}
+var iso=str.split("-");
+if(iso.length==0){
+return null;
+}
+return new Date(iso[0],iso[1]-1,iso[2]);
 };
-
-MochiKit.DateTime._isoRegexp = /(\d{4,})(?:-(\d{1,2})(?:-(\d{1,2})(?:[T ](\d{1,2}):(\d{1,2})(?::(\d{1,2})(?:\.(\d+))?)?(?:(Z)|([+-])(\d{1,2})(?::(\d{1,2}))?)?)?)?)?/;
-
-MochiKit.DateTime.isoTimestamp = function (str) {
-    /***
-
-        Convert an ISO 8601 timestamp (or something close to it) to
-        a Date object.  Will accept the "de facto" form:
-
-            YYYY-MM-DD hh:mm:ss
-
-        or (the proper form):
-
-            YYYY-MM-DDThh:mm:ss
-
-    ***/
-    str = str + "";
-    if (typeof(str) != "string" || str.length == 0) {
-        return null;
-    }
-    var res = str.match(MochiKit.DateTime._isoRegexp);
-    if (typeof(res) == "undefined" || res == null) {
-        return null;
-    }
-    var year, month, day, hour, min, sec, msec;
-    year = parseInt(res[1], 10);
-    if (typeof(res[2]) == "undefined" || res[2] == "") {
-        return new Date(year);
-    }
-    month = parseInt(res[2], 10) - 1;
-    day = parseInt(res[3], 10);
-    if (typeof(res[4]) == "undefined" || res[4] == "") {
-        return new Date(year, month, day);
-    }
-    hour = parseInt(res[4], 10);
-    min = parseInt(res[5], 10);
-    sec = (typeof(res[6]) != "undefined" && res[6] != "") ? parseInt(res[6], 10) : 0;
-    if (typeof(res[7]) != "undefined" && res[7] != "") {
-        msec = Math.round(1000.0 * parseFloat("0." + res[7]));
-    } else {
-        msec = 0;
-    }
-    if ((typeof(res[8]) == "undefined" || res[8] == "") && (typeof(res[9]) == "undefined" || res[9] == "")) {
-        return new Date(year, month, day, hour, min, sec, msec);
-    }
-    var ofs;
-    if (typeof(res[9]) != "undefined" && res[9] != "") {
-        ofs = parseInt(res[10], 10) * 3600000;
-        if (typeof(res[11]) != "undefined" && res[11] != "") {
-            ofs += parseInt(res[11], 10) * 60000;
-        }
-        if (res[9] == "-") {
-            ofs = -ofs;
-        }
-    } else {
-        ofs = 0;
-    }
-    return new Date(Date.UTC(year, month, day, hour, min, sec, msec) - ofs);
+MochiKit.DateTime._isoRegexp=/(\d{4,})(?:-(\d{1,2})(?:-(\d{1,2})(?:[T ](\d{1,2}):(\d{1,2})(?::(\d{1,2})(?:\.(\d+))?)?(?:(Z)|([+-])(\d{1,2})(?::(\d{1,2}))?)?)?)?)?/;
+MochiKit.DateTime.isoTimestamp=function(str){
+str=str+"";
+if(typeof (str)!="string"||str.length==0){
+return null;
+}
+var res=str.match(MochiKit.DateTime._isoRegexp);
+if(typeof (res)=="undefined"||res==null){
+return null;
+}
+var year,month,day,hour,min,sec,msec;
+year=parseInt(res[1],10);
+if(typeof (res[2])=="undefined"||res[2]==""){
+return new Date(year);
+}
+month=parseInt(res[2],10)-1;
+day=parseInt(res[3],10);
+if(typeof (res[4])=="undefined"||res[4]==""){
+return new Date(year,month,day);
+}
+hour=parseInt(res[4],10);
+min=parseInt(res[5],10);
+sec=(typeof (res[6])!="undefined"&&res[6]!="")?parseInt(res[6],10):0;
+if(typeof (res[7])!="undefined"&&res[7]!=""){
+msec=Math.round(1000*parseFloat("0."+res[7]));
+}else{
+msec=0;
+}
+if((typeof (res[8])=="undefined"||res[8]=="")&&(typeof (res[9])=="undefined"||res[9]=="")){
+return new Date(year,month,day,hour,min,sec,msec);
+}
+var ofs;
+if(typeof (res[9])!="undefined"&&res[9]!=""){
+ofs=parseInt(res[10],10)*3600000;
+if(typeof (res[11])!="undefined"&&res[11]!=""){
+ofs+=parseInt(res[11],10)*60000;
+}
+if(res[9]=="-"){
+ofs=-ofs;
+}
+}else{
+ofs=0;
+}
+return new Date(Date.UTC(year,month,day,hour,min,sec,msec)-ofs);
 };
-
-MochiKit.DateTime.toISOTime = function (date, realISO/* = false */) {
-    /***
-
-        Get the hh:mm:ss from the given Date object.
-
-    ***/
-    if (typeof(date) == "undefined" || date == null) {
-        return null;
-    }
-    var hh = date.getHours();
-    var mm = date.getMinutes();
-    var ss = date.getSeconds();
-    var lst = [
-        ((realISO && (hh < 10)) ? "0" + hh : hh),
-        ((mm < 10) ? "0" + mm : mm),
-        ((ss < 10) ? "0" + ss : ss)
-    ];
-    return lst.join(":");
+MochiKit.DateTime.toISOTime=function(date,_215){
+if(typeof (date)=="undefined"||date==null){
+return null;
+}
+var hh=date.getHours();
+var mm=date.getMinutes();
+var ss=date.getSeconds();
+var lst=[((_215&&(hh<10))?"0"+hh:hh),((mm<10)?"0"+mm:mm),((ss<10)?"0"+ss:ss)];
+return lst.join(":");
 };
-
-MochiKit.DateTime.toISOTimestamp = function (date, realISO/* = false*/) {
-    /***
-
-        Convert a Date object to something that's ALMOST but not quite an
-        ISO 8601 timestamp.  If it was a proper ISO timestamp it would be:
-
-            YYYY-MM-DDThh:mm:ssZ
-
-        However, we see junk in SQL and other places that looks like this:
-
-            YYYY-MM-DD hh:mm:ss
-
-        So, this function returns the latter form, despite its name, unless
-        you pass true for realISO.
-
-    ***/
-    if (typeof(date) == "undefined" || date == null) {
-        return null;
-    }
-    var sep = realISO ? "T" : " ";
-    var foot = realISO ? "Z" : "";
-    if (realISO) {
-        date = new Date(date.getTime() + (date.getTimezoneOffset() * 60000));
-    }
-    return MochiKit.DateTime.toISODate(date) + sep + MochiKit.DateTime.toISOTime(date, realISO) + foot;
+MochiKit.DateTime.toISOTimestamp=function(date,_219){
+if(typeof (date)=="undefined"||date==null){
+return null;
+}
+var sep=_219?"T":" ";
+var foot=_219?"Z":"";
+if(_219){
+date=new Date(date.getTime()+(date.getTimezoneOffset()*60000));
+}
+return MochiKit.DateTime.toISODate(date)+sep+MochiKit.DateTime.toISOTime(date,_219)+foot;
 };
-
-MochiKit.DateTime.toISODate = function (date) {
-    /***
-
-        Convert a Date object to an ISO 8601 date string (YYYY-MM-DD)
-
-    ***/
-    if (typeof(date) == "undefined" || date == null) {
-        return null;
-    }
-    var _padTwo = MochiKit.DateTime._padTwo;
-    return [
-        date.getFullYear(),
-        _padTwo(date.getMonth() + 1),
-        _padTwo(date.getDate())
-    ].join("-");
+MochiKit.DateTime.toISODate=function(date){
+if(typeof (date)=="undefined"||date==null){
+return null;
+}
+var _222=MochiKit.DateTime._padTwo;
+return [date.getFullYear(),_222(date.getMonth()+1),_222(date.getDate())].join("-");
 };
-
-MochiKit.DateTime.americanDate = function (d) {
-    /***
-
-        Converts a MM/DD/YYYY date to a Date object
-
-    ***/
-    d = d + "";
-    if (typeof(d) != "string" || d.length == 0) {
-        return null;
-    }
-    var a = d.split('/');
-    return new Date(a[2], a[0] - 1, a[1]);
+MochiKit.DateTime.americanDate=function(d){
+d=d+"";
+if(typeof (d)!="string"||d.length==0){
+return null;
+}
+var a=d.split("/");
+return new Date(a[2],a[0]-1,a[1]);
 };
-
-MochiKit.DateTime._padTwo = function (n) {
-    return (n > 9) ? n : "0" + n;
+MochiKit.DateTime._padTwo=function(n){
+return (n>9)?n:"0"+n;
 };
-
-MochiKit.DateTime.toPaddedAmericanDate = function (d) {
-    /***
-
-        Converts a Date object to an MM/DD/YYYY date, e.g. 01/01/2001
-
-    ***/
-    if (typeof(d) == "undefined" || d == null) {
-        return null;
-    }
-    var _padTwo = MochiKit.DateTime._padTwo;
-    return [
-        _padTwo(d.getMonth() + 1),
-        _padTwo(d.getDate()),
-        d.getFullYear()
-    ].join('/');
+MochiKit.DateTime.toPaddedAmericanDate=function(d){
+if(typeof (d)=="undefined"||d==null){
+return null;
+}
+var _224=MochiKit.DateTime._padTwo;
+return [_224(d.getMonth()+1),_224(d.getDate()),d.getFullYear()].join("/");
 };
-
-MochiKit.DateTime.toAmericanDate = function (d) {
-    /***
-
-        Converts a Date object to an M/D/YYYY date, e.g. 1/1/2001
-
-    ***/
-    if (typeof(d) == "undefined" || d == null) {
-        return null;
-    }
-    return [d.getMonth() + 1, d.getDate(), d.getFullYear()].join('/');
+MochiKit.DateTime.toAmericanDate=function(d){
+if(typeof (d)=="undefined"||d==null){
+return null;
+}
+return [d.getMonth()+1,d.getDate(),d.getFullYear()].join("/");
 };
-
-MochiKit.DateTime.EXPORT = [
-    "isoDate",
-    "isoTimestamp",
-    "toISOTime",
-    "toISOTimestamp",
-    "toISODate",
-    "americanDate",
-    "toPaddedAmericanDate",
-    "toAmericanDate"
-];
-
-MochiKit.DateTime.EXPORT_OK = [];
-MochiKit.DateTime.EXPORT_TAGS = {
-    ":common": MochiKit.DateTime.EXPORT,
-    ":all": MochiKit.DateTime.EXPORT
+MochiKit.DateTime.EXPORT=["isoDate","isoTimestamp","toISOTime","toISOTimestamp","toISODate","americanDate","toPaddedAmericanDate","toAmericanDate"];
+MochiKit.DateTime.EXPORT_OK=[];
+MochiKit.DateTime.EXPORT_TAGS={":common":MochiKit.DateTime.EXPORT,":all":MochiKit.DateTime.EXPORT};
+MochiKit.DateTime.__new__=function(){
+var base=this.NAME+".";
+for(var k in this){
+var o=this[k];
+if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
+try{
+o.NAME=base+k;
+}
+catch(e){
+}
+}
+}
 };
-
-MochiKit.DateTime.__new__ = function () {
-    // MochiKit.Base.nameFunctions(this);
-    var base = this.NAME + ".";
-    for (var k in this) {
-        var o = this[k];
-        if (typeof(o) == 'function' && typeof(o.NAME) == 'undefined') {
-            try {
-                o.NAME = base + k;
-            } catch (e) {
-                // pass
-            }
-        }
-    }
-};
-
 MochiKit.DateTime.__new__();
-
-if (typeof(MochiKit.Base) != "undefined") {
-    MochiKit.Base._exportSymbols(this, MochiKit.DateTime);
-} else {
-    (function (globals, module) {
-        if ((typeof(JSAN) == 'undefined' && typeof(dojo) == 'undefined')
-            || (typeof(MochiKit.__compat__) == 'boolean' && MochiKit.__compat__)) {
-            var all = module.EXPORT_TAGS[":all"];
-            for (var i = 0; i < all.length; i++) {
-                globals[all[i]] = module[all[i]];
-            }
-        }
-    })(this, MochiKit.DateTime);
+if(typeof (MochiKit.Base)!="undefined"){
+MochiKit.Base._exportSymbols(this,MochiKit.DateTime);
+}else{
+(function(_225,_226){
+if((typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined")||(typeof (MochiKit.__compat__)=="boolean"&&MochiKit.__compat__)){
+var all=_226.EXPORT_TAGS[":all"];
+for(var i=0;i<all.length;i++){
+_225[all[i]]=_226[all[i]];
 }
-
-/***
-
-MochiKit.Format 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito.  All rights Reserved.
-
-***/
-
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.Format');
 }
-
-if (typeof(MochiKit) == 'undefined') {
-    MochiKit = {};
+})(this,MochiKit.DateTime);
 }
-
-if (typeof(MochiKit.Format) == 'undefined') {
-    MochiKit.Format = {};
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Format");
 }
-
-MochiKit.Format.NAME = "MochiKit.Format";
-MochiKit.Format.VERSION = "1.3";
-MochiKit.Format.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+if(typeof (MochiKit)=="undefined"){
+MochiKit={};
+}
+if(typeof (MochiKit.Format)=="undefined"){
+MochiKit.Format={};
+}
+MochiKit.Format.NAME="MochiKit.Format";
+MochiKit.Format.VERSION="1.3";
+MochiKit.Format.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
 };
-MochiKit.Format.toString = function () {
-    return this.__repr__();
+MochiKit.Format.toString=function(){
+return this.__repr__();
 };
-
-MochiKit.Format._numberFormatter = function (placeholder, header, footer, locale, isPercent, precision, leadingZeros, separatorAt, trailingZeros) {
-    return function (num) {
-        num = parseFloat(num);
-        if (typeof(num) == "undefined" || num == null || isNaN(num)) {
-            return placeholder;
-        }
-        var curheader = header;
-        var curfooter = footer;
-        if (num < 0) {
-            num = -num;
-        } else {
-            curheader = curheader.replace(/-/, "");
-        }
-        var me = arguments.callee;
-        var fmt = MochiKit.Format.formatLocale(locale);
-        if (isPercent) {
-            num = num * 100.0;
-            curfooter = fmt.percent + curfooter;
-        }
-        num = MochiKit.Format.roundToFixed(num, precision);
-        var parts = num.split(/\./);
-        var whole = parts[0];
-        var frac = (parts.length == 1) ? "" : parts[1];
-        var res = "";
-        while (whole.length < leadingZeros) {
-            whole = "0" + whole;
-        }
-        if (separatorAt) {
-            while (whole.length > separatorAt) {
-                var i = whole.length - separatorAt;
-                //res = res + fmt.separator + whole.substring(i, whole.length);
-                res = fmt.separator + whole.substring(i, whole.length) + res;
-                whole = whole.substring(0, i);
-            }
-        }
-        res = whole + res;
-        if (precision > 0) {
-            while (frac.length < trailingZeros) {
-                frac = frac + "0";
-            }
-            res = res + fmt.decimal + frac;
-        }
-        return curheader + res + curfooter;
-    };
+MochiKit.Format._numberFormatter=function(_227,_228,_229,_230,_231,_232,_233,_234,_235){
+return function(num){
+num=parseFloat(num);
+if(typeof (num)=="undefined"||num==null||isNaN(num)){
+return _227;
+}
+var _236=_228;
+var _237=_229;
+if(num<0){
+num=-num;
+}else{
+_236=_236.replace(/-/,"");
+}
+var me=arguments.callee;
+var fmt=MochiKit.Format.formatLocale(_230);
+if(_231){
+num=num*100;
+_237=fmt.percent+_237;
+}
+num=MochiKit.Format.roundToFixed(num,_232);
+var _239=num.split(/\./);
+var _240=_239[0];
+var frac=(_239.length==1)?"":_239[1];
+var res="";
+while(_240.length<_233){
+_240="0"+_240;
+}
+if(_234){
+while(_240.length>_234){
+var i=_240.length-_234;
+res=fmt.separator+_240.substring(i,_240.length)+res;
+_240=_240.substring(0,i);
+}
+}
+res=_240+res;
+if(_232>0){
+while(frac.length<_235){
+frac=frac+"0";
+}
+res=res+fmt.decimal+frac;
+}
+return _236+res+_237;
 };
-
-MochiKit.Format.numberFormatter = function (pattern, placeholder/* = "" */, locale/* = "default" */) {
-    // http://java.sun.com/docs/books/tutorial/i18n/format/numberpattern.html
-    // | 0 | leading or trailing zeros
-    // | # | just the number
-    // | , | separator
-    // | . | decimal separator
-    // | % | Multiply by 100 and format as percent
-    if (typeof(placeholder) == "undefined") {
-        placeholder = "";
-    }
-    var match = pattern.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);
-    if (!match) {
-        throw TypeError("Invalid pattern");
-    }
-    var header = pattern.substr(0, match.index);
-    var footer = pattern.substr(match.index + match[0].length);
-    if (header.search(/-/) == -1) {
-        header = header + "-";
-    }
-    var whole = match[1];
-    var frac = (typeof(match[2]) == "string" && match[2] != "") ? match[2] : "";
-    var isPercent = (typeof(match[3]) == "string" && match[3] != "");
-    var tmp = whole.split(/,/);
-    var separatorAt;
-    if (typeof(locale) == "undefined") {
-        locale = "default";
-    }
-    if (tmp.length == 1) {
-        separatorAt = null;
-    } else {
-        separatorAt = tmp[1].length;
-    }
-    var leadingZeros = whole.length - whole.replace(/0/g, "").length;
-    var trailingZeros = frac.length - frac.replace(/0/g, "").length;
-    var precision = frac.length;
-    var rval = MochiKit.Format._numberFormatter(
-        placeholder, header, footer, locale, isPercent, precision,
-        leadingZeros, separatorAt, trailingZeros
-    );
-    var m = MochiKit.Base;
-    if (m) {
-        var fn = arguments.callee;
-        var args = m.concat(arguments);
-        rval.repr = function () {
-            return [
-                self.NAME,
-                "(",
-                map(m.repr, args).join(", "),
-                ")"
-            ].join("");
-        }
-    }
-    return rval;
 };
-
-MochiKit.Format.formatLocale = function (locale) {
-    if (typeof(locale) == "undefined" || locale == null) {
-        locale = "default";
-    }
-    if (typeof(locale) == "string") {
-        var rval = MochiKit.Format.LOCALE[locale];
-        if (typeof(rval) == "string") {
-            rval = arguments.callee(rval);
-            MochiKit.Format.LOCALE[locale] = rval;
-        }
-        return rval;
-    } else {
-        return locale;
-    }
+MochiKit.Format.numberFormatter=function(_242,_243,_244){
+if(typeof (_243)=="undefined"){
+_243="";
+}
+var _245=_242.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);
+if(!_245){
+throw TypeError("Invalid pattern");
+}
+var _246=_242.substr(0,_245.index);
+var _247=_242.substr(_245.index+_245[0].length);
+if(_246.search(/-/)==-1){
+_246=_246+"-";
+}
+var _248=_245[1];
+var frac=(typeof (_245[2])=="string"&&_245[2]!="")?_245[2]:"";
+var _249=(typeof (_245[3])=="string"&&_245[3]!="");
+var tmp=_248.split(/,/);
+var _251;
+if(typeof (_244)=="undefined"){
+_244="default";
+}
+if(tmp.length==1){
+_251=null;
+}else{
+_251=tmp[1].length;
+}
+var _252=_248.length-_248.replace(/0/g,"").length;
+var _253=frac.length-frac.replace(/0/g,"").length;
+var _254=frac.length;
+var rval=MochiKit.Format._numberFormatter(_243,_246,_247,_244,_249,_254,_252,_251,_253);
+var m=MochiKit.Base;
+if(m){
+var fn=arguments.callee;
+var args=m.concat(arguments);
+rval.repr=function(){
+return [self.NAME,"(",map(m.repr,args).join(", "),")"].join("");
 };
-
-MochiKit.Format.twoDigitAverage = function (numerator, denominator) {
-    /***
-
-        Calculate an average from a numerator and a denominator and return
-        it as a string with two digits of precision (e.g. "1.23").
-
-        If the denominator is 0, "0" will be returned instead of NaN.
-
-    ***/
-    if (denominator) {
-        var res = numerator / denominator;
-        if (!isNaN(res)) {
-            return MochiKit.Format.twoDigitFloat(numerator / denominator);
-        }
-    }
-    return "0";
+}
+return rval;
 };
-
-MochiKit.Format.twoDigitFloat = function (someFloat) {
-    /***
-
-        Roughly equivalent to: sprintf("%.2f", someFloat)
-
-    ***/
-    var sign = (someFloat < 0 ? '-' : '');
-    var s = Math.floor(Math.abs(someFloat) * 100).toString();
-    if (s == '0') {
-        return s;
-    }
-    if (s.length < 3) {
-        while (s.charAt(s.length - 1) == '0') {
-            s = s.substring(0, s.length - 1);
-        }
-        return sign + '0.' + s;
-    }
-    var head = sign + s.substring(0, s.length - 2);
-    var tail = s.substring(s.length - 2, s.length);
-    if (tail == '00') {
-        return head;
-    } else if (tail.charAt(1) == '0') {
-        return head + '.' + tail.charAt(0);
-    } else {
-        return head + '.' + tail;
-    }
+MochiKit.Format.formatLocale=function(_256){
+if(typeof (_256)=="undefined"||_256==null){
+_256="default";
+}
+if(typeof (_256)=="string"){
+var rval=MochiKit.Format.LOCALE[_256];
+if(typeof (rval)=="string"){
+rval=arguments.callee(rval);
+MochiKit.Format.LOCALE[_256]=rval;
+}
+return rval;
+}else{
+return _256;
+}
 };
-
-MochiKit.Format.lstrip = function (str, /* optional */chars) {
-    str = str + "";
-    if (typeof(str) != "string") {
-        return null;
-    }
-    if (!chars) {
-        return str.replace(/^\s+/, "");
-    } else {
-        return str.replace(new RegExp("^[" + chars + "]+"), "");
-    }
+MochiKit.Format.twoDigitAverage=function(_257,_258){
+if(_258){
+var res=_257/_258;
+if(!isNaN(res)){
+return MochiKit.Format.twoDigitFloat(_257/_258);
+}
+}
+return "0";
 };
-
-MochiKit.Format.rstrip = function (str, /* optional */chars) {
-    str = str + "";
-    if (typeof(str) != "string") {
-        return null;
-    }
-    if (!chars) {
-        return str.replace(/\s+$/, "");
-    } else {
-        return str.replace(new RegExp("[" + chars + "]+$"), "");
-    }
+MochiKit.Format.twoDigitFloat=function(_259){
+var sign=(_259<0?"-":"");
+var s=Math.floor(Math.abs(_259)*100).toString();
+if(s=="0"){
+return s;
+}
+if(s.length<3){
+while(s.charAt(s.length-1)=="0"){
+s=s.substring(0,s.length-1);
+}
+return sign+"0."+s;
+}
+var head=sign+s.substring(0,s.length-2);
+var tail=s.substring(s.length-2,s.length);
+if(tail=="00"){
+return head;
+}else{
+if(tail.charAt(1)=="0"){
+return head+"."+tail.charAt(0);
+}else{
+return head+"."+tail;
+}
+}
 };
-
-MochiKit.Format.strip = function (str, /* optional */chars) {
-    var self = MochiKit.Format;
-    return self.rstrip(self.lstrip(str, chars), chars);
+MochiKit.Format.lstrip=function(str,_264){
+str=str+"";
+if(typeof (str)!="string"){
+return null;
+}
+if(!_264){
+return str.replace(/^\s+/,"");
+}else{
+return str.replace(new RegExp("^["+_264+"]+"),"");
+}
 };
-
-MochiKit.Format.truncToFixed = function (aNumber, precision) {
-    aNumber = Math.floor(aNumber * Math.pow(10, precision));
-    var res = (aNumber * Math.pow(10, -precision)).toFixed(precision);
-    if (res.charAt(0) == ".") {
-        res = "0" + res;
-    }
-    return res;
+MochiKit.Format.rstrip=function(str,_265){
+str=str+"";
+if(typeof (str)!="string"){
+return null;
+}
+if(!_265){
+return str.replace(/\s+$/,"");
+}else{
+return str.replace(new RegExp("["+_265+"]+$"),"");
+}
 };
-
-MochiKit.Format.roundToFixed = function (aNumber, precision) {
-    return MochiKit.Format.truncToFixed(
-        aNumber + 0.5 * Math.pow(10, -precision),
-        precision
-    );
+MochiKit.Format.strip=function(str,_266){
+var self=MochiKit.Format;
+return self.rstrip(self.lstrip(str,_266),_266);
 };
-
-MochiKit.Format.percentFormat = function (someFloat) {
-    /***
-
-        Roughly equivalent to: sprintf("%.2f%%", someFloat * 100)
-
-    ***/
-    return MochiKit.Format.twoDigitFloat(100 * someFloat) + '%';
+MochiKit.Format.truncToFixed=function(_267,_268){
+_267=Math.floor(_267*Math.pow(10,_268));
+var res=(_267*Math.pow(10,-_268)).toFixed(_268);
+if(res.charAt(0)=="."){
+res="0"+res;
+}
+return res;
 };
-
-MochiKit.Format.EXPORT = [
-    "truncToFixed",
-    "roundToFixed",
-    "numberFormatter",
-    "formatLocale",
-    "twoDigitAverage",
-    "twoDigitFloat",
-    "percentFormat",
-    "lstrip",
-    "rstrip",
-    "strip"
-];
-
-MochiKit.Format.LOCALE = {
-    en_US: {separator: ",", decimal: ".", percent: "%"},
-    de_DE: {separator: ".", decimal: ",", percent: "%"},
-    fr_FR: {separator: " ", decimal: ",", percent: "%"},
-    "default": "en_US"
+MochiKit.Format.roundToFixed=function(_269,_270){
+return MochiKit.Format.truncToFixed(_269+0.5*Math.pow(10,-_270),_270);
 };
-
-MochiKit.Format.EXPORT_OK = [];
-MochiKit.Format.EXPORT_TAGS = {
-    ':all': MochiKit.Format.EXPORT,
-    ':common': MochiKit.Format.EXPORT
+MochiKit.Format.percentFormat=function(_271){
+return MochiKit.Format.twoDigitFloat(100*_271)+"%";
 };
-
-MochiKit.Format.__new__ = function () {
-    // MochiKit.Base.nameFunctions(this);
-    var base = this.NAME + ".";
-    var k, v, o;
-    for (k in this.LOCALE) {
-        o = this.LOCALE[k];
-        if (typeof(o) == "object") {
-            o.repr = function () { return this.NAME; };
-            o.NAME = base + "LOCALE." + k;
-        }
-    }
-    for (k in this) {
-        o = this[k];
-        if (typeof(o) == 'function' && typeof(o.NAME) == 'undefined') {
-            try {
-                o.NAME = base + k;
-            } catch (e) {
-                // pass
-            }
-        }
-    }
+MochiKit.Format.EXPORT=["truncToFixed","roundToFixed","numberFormatter","formatLocale","twoDigitAverage","twoDigitFloat","percentFormat","lstrip","rstrip","strip"];
+MochiKit.Format.LOCALE={en_US:{separator:",",decimal:".",percent:"%"},de_DE:{separator:".",decimal:",",percent:"%"},fr_FR:{separator:" ",decimal:",",percent:"%"},"default":"en_US"};
+MochiKit.Format.EXPORT_OK=[];
+MochiKit.Format.EXPORT_TAGS={":all":MochiKit.Format.EXPORT,":common":MochiKit.Format.EXPORT};
+MochiKit.Format.__new__=function(){
+var base=this.NAME+".";
+var k,v,o;
+for(k in this.LOCALE){
+o=this.LOCALE[k];
+if(typeof (o)=="object"){
+o.repr=function(){
+return this.NAME;
 };
-
+o.NAME=base+"LOCALE."+k;
+}
+}
+for(k in this){
+o=this[k];
+if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
+try{
+o.NAME=base+k;
+}
+catch(e){
+}
+}
+}
+};
 MochiKit.Format.__new__();
-
-if (typeof(MochiKit.Base) != "undefined") {
-    MochiKit.Base._exportSymbols(this, MochiKit.Format);
-} else {
-    (function (globals, module) {
-        if ((typeof(JSAN) == 'undefined' && typeof(dojo) == 'undefined')
-            || (typeof(MochiKit.__compat__) == 'boolean' && MochiKit.__compat__)) {
-            var all = module.EXPORT_TAGS[":all"];
-            for (var i = 0; i < all.length; i++) {
-                globals[all[i]] = module[all[i]];
-            }
-        }
-    })(this, MochiKit.Format);
+if(typeof (MochiKit.Base)!="undefined"){
+MochiKit.Base._exportSymbols(this,MochiKit.Format);
+}else{
+(function(_272,_273){
+if((typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined")||(typeof (MochiKit.__compat__)=="boolean"&&MochiKit.__compat__)){
+var all=_273.EXPORT_TAGS[":all"];
+for(var i=0;i<all.length;i++){
+_272[all[i]]=_273[all[i]];
 }
-
-/***
-
-MochiKit.Async 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito.  All rights Reserved.
-
-***/
-
-if (typeof(dojo) != 'undefined') {
-    dojo.provide("MochiKit.Async");
-    dojo.require("MochiKit.Base");
 }
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use("MochiKit.Base", []);
+})(this,MochiKit.Format);
 }
-
-try {
-    if (typeof(MochiKit.Base) == 'undefined') {
-        throw "";
-    }
-} catch (e) {
-    throw "MochiKit.Async depends on MochiKit.Base!";
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Async");
+dojo.require("MochiKit.Base");
 }
-
-if (typeof(MochiKit.Async) == 'undefined') {
-    MochiKit.Async = {};
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Base",[]);
 }
-
-MochiKit.Async.NAME = "MochiKit.Async";
-MochiKit.Async.VERSION = "1.3";
-MochiKit.Async.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+try{
+if(typeof (MochiKit.Base)=="undefined"){
+throw "";
+}
+}
+catch(e){
+throw "MochiKit.Async depends on MochiKit.Base!";
+}
+if(typeof (MochiKit.Async)=="undefined"){
+MochiKit.Async={};
+}
+MochiKit.Async.NAME="MochiKit.Async";
+MochiKit.Async.VERSION="1.3";
+MochiKit.Async.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
 };
-MochiKit.Async.toString = function () {
-    return this.__repr__();
+MochiKit.Async.toString=function(){
+return this.__repr__();
 };
-
-MochiKit.Async.Deferred = function (/* optional */ canceller) {
-    /***
-
-    Encapsulates a sequence of callbacks in response to a value that
-    may not yet be available.  This is modeled after the Deferred class
-    from Twisted <http://twistedmatrix.com>.
-
-    Why do we want this?  JavaScript has no threads, and even if it did,
-    threads are hard.  Deferreds are a way of abstracting non-blocking
-    events, such as the final response to an XMLHttpRequest.
-
-    The sequence of callbacks is internally represented as a list
-    of 2-tuples containing the callback/errback pair.  For example,
-    the following call sequence::
-
-        var d = new Deferred();
-        d.addCallback(myCallback);
-        d.addErrback(myErrback);
-        d.addBoth(myBoth);
-        d.addCallbacks(myCallback, myErrback);
-
-    is translated into a Deferred with the following internal
-    representation::
-
-        [
-            [myCallback, null],
-            [null, myErrback],
-            [myBoth, myBoth],
-            [myCallback, myErrback]
-        ]
-
-    The Deferred also keeps track of its current status (fired).
-    Its status may be one of three things:
-
-        -1: no value yet (initial condition)
-         0: success
-         1: error
-
-    A Deferred will be in the error state if one of the following
-    three conditions are met:
-
-    1. The result given to callback or errback is "instanceof" Error
-    2. The previous callback or errback raised an exception while executing
-    3. The previous callback or errback returned a value "instanceof" Error
-
-    Otherwise, the Deferred will be in the success state.  The state of the
-    Deferred determines the next element in the callback sequence to run.
-
-    When a callback or errback occurs with the example deferred chain, something
-    equivalent to the following will happen (imagine that exceptions are caught
-    and returned)::
-
-        // d.callback(result) or d.errback(result)
-        if (!(result instanceof Error)) {
-            result = myCallback(result);
-        }
-        if (result instanceof Error) {
-            result = myErrback(result);
-        }
-        result = myBoth(result);
-        if (result instanceof Error) {
-            result = myErrback(result);
-        } else {
-            result = myCallback(result);
-        }
-
-    The result is then stored away in case another step is added to the
-    callback sequence.  Since the Deferred already has a value available,
-    any new callbacks added will be called immediately.
-
-    There are two other "advanced" details about this implementation that are
-    useful:
-
-    Callbacks are allowed to return Deferred instances themselves, so
-    you can build complicated sequences of events with ease.
-
-    The creator of the Deferred may specify a canceller.  The canceller
-    is a function that will be called if Deferred.cancel is called before
-    the Deferred fires.  You can use this to implement clean aborting of an
-    XMLHttpRequest, etc.  Note that cancel will fire the deferred with a
-    CancelledError (unless your canceller returns another kind of error),
-    so the errbacks should be prepared to handle that error for cancellable
-    Deferreds.
-
-    ***/
-
-
-    this.chain = [];
-    this.id = this._nextId();
-    this.fired = -1;
-    this.paused = 0;
-    this.results = [null, null];
-    this.canceller = canceller;
-    this.silentlyCancelled = false;
+MochiKit.Async.Deferred=function(_274){
+this.chain=[];
+this.id=this._nextId();
+this.fired=-1;
+this.paused=0;
+this.results=[null,null];
+this.canceller=_274;
+this.silentlyCancelled=false;
 };
-
-MochiKit.Async.Deferred.prototype = {
-    repr: function () {
-        var state;
-        if (this.fired == -1) {
-            state = 'unfired';
-        } else if (this.fired == 0) {
-            state = 'success';
-        } else {
-            state = 'error';
-        }
-        return 'Deferred(' + this.id + ', ' + state + ')';
-    },
-
-    toString: MochiKit.Base.forward("repr"),
-
-    _nextId: MochiKit.Base.counter(),
-
-    cancel: function () {
-        /***
-
-        Cancels a Deferred that has not yet received a value,
-        or is waiting on another Deferred as its value.
-
-        If a canceller is defined, the canceller is called.
-        If the canceller did not return an error, or there
-        was no canceller, then the errback chain is started
-        with CancelledError.
-
-        ***/
-        var self = MochiKit.Async;
-        if (this.fired == -1) {
-            if (this.canceller) {
-                this.canceller(this);
-            } else {
-                this.silentlyCancelled = true;
-            }
-            if (this.fired == -1) {
-                this.errback(new self.CancelledError(this));
-            }
-        } else if ((this.fired == 0) && (this.results[0] instanceof self.Deferred)) {
-            this.results[0].cancel();
-        }
-    },
-
-
-    _pause: function () {
-        /***
-
-        Used internally to signal that it's waiting on another Deferred
-
-        ***/
-        this.paused++;
-    },
-
-    _unpause: function () {
-        /***
-
-        Used internally to signal that it's no longer waiting on another
-        Deferred.
-
-        ***/
-        this.paused--;
-        if ((this.paused == 0) && (this.fired >= 0)) {
-            this._fire();
-        }
-    },
-
-    _continue: function (res) {
-        /***
-
-        Used internally when a dependent deferred fires.
-
-        ***/
-        this._resback(res);
-        this._unpause();
-    },
-
-    _resback: function (res) {
-        /***
-
-        The primitive that means either callback or errback
-
-        ***/
-        this.fired = ((res instanceof Error) ? 1 : 0);
-        this.results[this.fired] = res;
-        this._fire();
-    },
-
-    _check: function () {
-        if (this.fired != -1) {
-            if (!this.silentlyCancelled) {
-                throw new MochiKit.Async.AlreadyCalledError(this);
-            }
-            this.silentlyCancelled = false;
-            return;
-        }
-    },
-
-    callback: function (res) {
-        /***
-
-        Begin the callback sequence with a non-error value.
-
-        callback or errback should only be called once
-        on a given Deferred.
-
-        ***/
-        this._check();
-        this._resback(res);
-    },
-
-    errback: function (res) {
-        /***
-
-        Begin the callback sequence with an error result.
-
-        callback or errback should only be called once
-        on a given Deferred.
-
-        ***/
-        this._check();
-        if (!(res instanceof Error)) {
-            res = new MochiKit.Async.GenericError(res);
-        }
-        this._resback(res);
-    },
-
-    addBoth: function (fn) {
-        /***
-
-        Add the same function as both a callback and an errback as the
-        next element on the callback sequence.  This is useful for code
-        that you want to guarantee to run, e.g. a finalizer.
-
-        ***/
-        if (arguments.length > 1) {
-            fn = MochiKit.Base.partial.apply(null, arguments);
-        }
-        return this.addCallbacks(fn, fn);
-    },
-
-    addCallback: function (fn) {
-        /***
-
-        Add a single callback to the end of the callback sequence.
-
-        ***/
-        if (arguments.length > 1) {
-            fn = MochiKit.Base.partial.apply(null, arguments);
-        }
-        return this.addCallbacks(fn, null);
-    },
-
-    addErrback: function (fn) {
-        /***
-
-        Add a single errback to the end of the callback sequence.
-
-        ***/
-        if (arguments.length > 1) {
-            fn = MochiKit.Base.partial.apply(null, arguments);
-        }
-        return this.addCallbacks(null, fn);
-    },
-
-    addCallbacks: function (cb, eb) {
-        /***
-
-        Add separate callback and errback to the end of the callback
-        sequence.
-
-        ***/
-        this.chain.push([cb, eb])
-        if (this.fired >= 0) {
-            this._fire();
-        }
-        return this;
-    },
-
-    _fire: function () {
-        /***
-
-        Used internally to exhaust the callback sequence when a result
-        is available.
-
-        ***/
-        var chain = this.chain;
-        var fired = this.fired;
-        var res = this.results[fired];
-        var self = this;
-        var cb = null;
-        while (chain.length > 0 && this.paused == 0) {
-            // Array
-            var pair = chain.shift();
-            var f = pair[fired];
-            if (f == null) {
-                continue;
-            }
-            try {
-                res = f(res);
-                fired = ((res instanceof Error) ? 1 : 0);
-                if (res instanceof MochiKit.Async.Deferred) {
-                    cb = function (res) {
-                        self._continue(res);
-                    }
-                    this._pause();
-                }
-            } catch (err) {
-                fired = 1;
-                if (!(err instanceof Error)) {
-                    err = new MochiKit.Async.GenericError(err);
-                }
-                res = err;
-            }
-        }
-        this.fired = fired;
-        this.results[fired] = res;
-        if (cb && this.paused) {
-            // this is for "tail recursion" in case the dependent deferred
-            // is already fired
-            res.addBoth(cb);
-        }
-    }
+MochiKit.Async.Deferred.prototype={repr:function(){
+var _275;
+if(this.fired==-1){
+_275="unfired";
+}else{
+if(this.fired==0){
+_275="success";
+}else{
+_275="error";
+}
+}
+return "Deferred("+this.id+", "+_275+")";
+},toString:MochiKit.Base.forward("repr"),_nextId:MochiKit.Base.counter(),cancel:function(){
+var self=MochiKit.Async;
+if(this.fired==-1){
+if(this.canceller){
+this.canceller(this);
+}else{
+this.silentlyCancelled=true;
+}
+if(this.fired==-1){
+this.errback(new self.CancelledError(this));
+}
+}else{
+if((this.fired==0)&&(this.results[0] instanceof self.Deferred)){
+this.results[0].cancel();
+}
+}
+},_pause:function(){
+this.paused++;
+},_unpause:function(){
+this.paused--;
+if((this.paused==0)&&(this.fired>=0)){
+this._fire();
+}
+},_continue:function(res){
+this._resback(res);
+this._unpause();
+},_resback:function(res){
+this.fired=((res instanceof Error)?1:0);
+this.results[this.fired]=res;
+this._fire();
+},_check:function(){
+if(this.fired!=-1){
+if(!this.silentlyCancelled){
+throw new MochiKit.Async.AlreadyCalledError(this);
+}
+this.silentlyCancelled=false;
+return;
+}
+},callback:function(res){
+this._check();
+this._resback(res);
+},errback:function(res){
+this._check();
+if(!(res instanceof Error)){
+res=new MochiKit.Async.GenericError(res);
+}
+this._resback(res);
+},addBoth:function(fn){
+if(arguments.length>1){
+fn=MochiKit.Base.partial.apply(null,arguments);
+}
+return this.addCallbacks(fn,fn);
+},addCallback:function(fn){
+if(arguments.length>1){
+fn=MochiKit.Base.partial.apply(null,arguments);
+}
+return this.addCallbacks(fn,null);
+},addErrback:function(fn){
+if(arguments.length>1){
+fn=MochiKit.Base.partial.apply(null,arguments);
+}
+return this.addCallbacks(null,fn);
+},addCallbacks:function(cb,eb){
+this.chain.push([cb,eb]);
+if(this.fired>=0){
+this._fire();
+}
+return this;
+},_fire:function(){
+var _278=this.chain;
+var _279=this.fired;
+var res=this.results[_279];
+var self=this;
+var cb=null;
+while(_278.length>0&&this.paused==0){
+var pair=_278.shift();
+var f=pair[_279];
+if(f==null){
+continue;
+}
+try{
+res=f(res);
+_279=((res instanceof Error)?1:0);
+if(res instanceof MochiKit.Async.Deferred){
+cb=function(res){
+self._continue(res);
 };
-
-MochiKit.Base.update(MochiKit.Async, {
-    evalJSONRequest: function (/* req */) {
-        /***
-
-        Evaluate a JSON (JavaScript Object Notation) XMLHttpRequest
-
-        @param req: The request whose responseText is to be evaluated
-
-        @rtype: L{Object}
-
-        ***/
-        return eval('(' + arguments[0].responseText + ')');
-    },
-
-    succeed: function (/* optional */result) {
-        /***
-
-        Return a Deferred that has already had '.callback(result)' called.
-
-        This is useful when you're writing synchronous code to an asynchronous
-        interface: i.e., some code is calling you expecting a Deferred result,
-        but you don't actually need to do anything asynchronous.  Just return
-        succeed(theResult).
-
-        See L{fail} for a version of this function that uses a failing Deferred
-        rather than a successful one.
-
-        @param result: The result to give to the Deferred's 'callback' method.
-
-        @rtype: L{Deferred}
-
-        ***/
-        var d = new MochiKit.Async.Deferred();
-        d.callback.apply(d, arguments);
-        return d;
-    },
-
-    fail: function (/* optional */result) {
-        /***
-
-        Return a Deferred that has already had '.errback(result)' called.
-
-        See L{succeed}'s docstring for rationale.
-
-        @param result: The same argument that L{Deferred.errback} takes.
-
-        @rtype: L{Deferred}
-
-        ***/
-        var d = new MochiKit.Async.Deferred();
-        d.errback.apply(d, arguments);
-        return d;
-    },
-
-    getXMLHttpRequest: function () {
-        var self = arguments.callee;
-        if (!self.XMLHttpRequest) {
-            var tryThese = [
-                function () { return new XMLHttpRequest(); },
-                function () { return new ActiveXObject('Msxml2.XMLHTTP'); },
-                function () { return new ActiveXObject('Microsoft.XMLHTTP'); },
-                function () { return new ActiveXObject('Msxml2.XMLHTTP.4.0'); },
-                function () {
-                    throw new MochiKit.Async.BrowserComplianceError("Browser does not support XMLHttpRequest");
-                }
-            ];
-            for (var i = 0; i < tryThese.length; i++) {
-                var func = tryThese[i];
-                try {
-                    self.XMLHttpRequest = func;
-                    return func();
-                } catch (e) {
-                    // pass
-                }
-            }
-        }
-        return self.XMLHttpRequest();
-    },
-
-    sendXMLHttpRequest: function (req, /* optional */ sendContent) {
-        if (typeof(sendContent) == 'undefined') {
-            sendContent = "";
-        }
-
-        var canceller = function () {
-            // IE SUCKS
-            try {
-                req.onreadystatechange = null;
-            } catch (e) {
-                try {
-                    req.onreadystatechange = function () {};
-                } catch (e) {
-                }
-            }
-            req.abort();
-        };
-
-        var self = MochiKit.Async;
-        var d = new self.Deferred(canceller);
-
-        var onreadystatechange = function () {
-            // MochiKit.Logging.logDebug('req.readyState', req.readyState);
-            if (req.readyState == 4) {
-                // IE SUCKS
-                try {
-                    req.onreadystatechange = null;
-                } catch (e) {
-                    try {
-                        req.onreadystatechange = function () {};
-                    } catch (e) {
-                    }
-                }
-                var status = null;
-                try {
-                    status = req.status;
-                    if (!status && MochiKit.Base.isNotEmpty(req.responseText)) {
-                        // 0 or undefined seems to mean cached or local
-                        status = 304;
-                    }
-                } catch (e) {
-                    // pass
-                    // MochiKit.Logging.logDebug('error getting status?', repr(items(e)));
-                }
-                //  200 is OK, 304 is NOT_MODIFIED
-                if (status == 200 || status == 304) { // OK
-                    d.callback(req);
-                } else {
-                    var err = new self.XMLHttpRequestError(req, "Request failed:" + status);
-                    if (err.number) {
-                        // XXX: This seems to happen on page change
-                        d.errback(err);
-                    } else {
-                        // XXX: this seems to happen when the server is unreachable
-                        d.errback(err);
-                    }
-                }
-            }
-        }
-        try {
-            req.onreadystatechange = onreadystatechange;
-            req.send(sendContent);
-        } catch (e) {
-            try {
-                req.onreadystatechange = null;
-            } catch (ignore) {
-                // pass
-            }
-            d.errback(e);
-        }
-
-        return d;
-
-    },
-
-    doSimpleXMLHttpRequest: function (url/*, ...*/) {
-        var self = MochiKit.Async;
-        var req = self.getXMLHttpRequest();
-        if (arguments.length > 1) {
-            var m = MochiKit.Base;
-            var qs = m.queryString.apply(null, m.extend(null, arguments, 1));
-            if (qs) {
-                url += "?" + qs;
-            }
-        }
-        req.open("GET", url, true);
-        return self.sendXMLHttpRequest(req);
-    },
-
-    loadJSONDoc: function (url) {
-        /***
-
-        Do a simple XMLHttpRequest to a URL and get the response
-        as a JSON document.
-
-        @param url: The URL to GET
-
-        @rtype: L{Deferred} returning the evaluated JSON response
-
-        ***/
-
-        var self = MochiKit.Async;
-        var d = self.doSimpleXMLHttpRequest.apply(self, arguments);
-        d = d.addCallback(self.evalJSONRequest);
-        return d;
-    },
-
-    wait: function (seconds, /* optional */value) {
-        var d = new MochiKit.Async.Deferred();
-        var m = MochiKit.Base;
-        if (typeof(value) != 'undefined') {
-            d.addCallback(function () { return value; });
-        }
-        var timeout = setTimeout(
-            m.bind("callback", d),
-            Math.floor(seconds * 1000));
-        d.canceller = function () {
-            try {
-                clearTimeout(timeout);
-            } catch (e) {
-                // pass
-            }
-        };
-        return d;
-    },
-
-    callLater: function (seconds, func) {
-        var m = MochiKit.Base;
-        var pfunc = m.partial.apply(m, m.extend(null, arguments, 1));
-        return MochiKit.Async.wait(seconds).addCallback(
-            function (res) { return pfunc(); }
-        );
-    }
+this._pause();
+}
+}
+catch(err){
+_279=1;
+if(!(err instanceof Error)){
+err=new MochiKit.Async.GenericError(err);
+}
+res=err;
+}
+}
+this.fired=_279;
+this.results[_279]=res;
+if(cb&&this.paused){
+res.addBoth(cb);
+}
+}};
+MochiKit.Base.update(MochiKit.Async,{evalJSONRequest:function(){
+return eval("("+arguments[0].responseText+")");
+},succeed:function(_281){
+var d=new MochiKit.Async.Deferred();
+d.callback.apply(d,arguments);
+return d;
+},fail:function(_282){
+var d=new MochiKit.Async.Deferred();
+d.errback.apply(d,arguments);
+return d;
+},getXMLHttpRequest:function(){
+var self=arguments.callee;
+if(!self.XMLHttpRequest){
+var _283=[function(){
+return new XMLHttpRequest();
+},function(){
+return new ActiveXObject("Msxml2.XMLHTTP");
+},function(){
+return new ActiveXObject("Microsoft.XMLHTTP");
+},function(){
+return new ActiveXObject("Msxml2.XMLHTTP.4.0");
+},function(){
+throw new MochiKit.Async.BrowserComplianceError("Browser does not support XMLHttpRequest");
+}];
+for(var i=0;i<_283.length;i++){
+var func=_283[i];
+try{
+self.XMLHttpRequest=func;
+return func();
+}
+catch(e){
+}
+}
+}
+return self.XMLHttpRequest();
+},sendXMLHttpRequest:function(req,_285){
+if(typeof (_285)=="undefined"){
+_285="";
+}
+var _286=function(){
+try{
+req.onreadystatechange=null;
+}
+catch(e){
+try{
+req.onreadystatechange=function(){
+};
+}
+catch(e){
+}
+}
+req.abort();
+};
+var self=MochiKit.Async;
+var d=new self.Deferred(_286);
+var _287=function(){
+if(req.readyState==4){
+try{
+req.onreadystatechange=null;
+}
+catch(e){
+try{
+req.onreadystatechange=function(){
+};
+}
+catch(e){
+}
+}
+var _288=null;
+try{
+_288=req.status;
+if(!_288&&MochiKit.Base.isNotEmpty(req.responseText)){
+_288=304;
+}
+}
+catch(e){
+}
+if(_288==200||_288==304){
+d.callback(req);
+}else{
+var err=new self.XMLHttpRequestError(req,"Request failed");
+if(err.number){
+d.errback(err);
+}else{
+d.errback(err);
+}
+}
+}
+};
+try{
+req.onreadystatechange=_287;
+req.send(_285);
+}
+catch(e){
+try{
+req.onreadystatechange=null;
+}
+catch(ignore){
+}
+d.errback(e);
+}
+return d;
+},doSimpleXMLHttpRequest:function(url){
+var self=MochiKit.Async;
+var req=self.getXMLHttpRequest();
+if(arguments.length>1){
+var m=MochiKit.Base;
+var qs=m.queryString.apply(null,m.extend(null,arguments,1));
+if(qs){
+url+="?"+qs;
+}
+}
+req.open("GET",url,true);
+return self.sendXMLHttpRequest(req);
+},loadJSONDoc:function(url){
+var self=MochiKit.Async;
+var d=self.doSimpleXMLHttpRequest.apply(self,arguments);
+d=d.addCallback(self.evalJSONRequest);
+return d;
+},wait:function(_292,_293){
+var d=new MochiKit.Async.Deferred();
+var m=MochiKit.Base;
+if(typeof (_293)!="undefined"){
+d.addCallback(function(){
+return _293;
 });
-
-
-MochiKit.Async.DeferredLock = function () {
-    this.waiting = [];
-    this.locked = false;
-    this.id = this._nextId();
+}
+var _294=setTimeout(m.bind("callback",d),Math.floor(_292*1000));
+d.canceller=function(){
+try{
+clearTimeout(_294);
+}
+catch(e){
+}
 };
-
-MochiKit.Async.DeferredLock.prototype = {
-    __class__: MochiKit.Async.DeferredLock,
-    acquire: function () {
-        d = new MochiKit.Async.Deferred();
-        if (this.locked) {
-            this.waiting.push(d);
-        } else {
-            this.locked = true;
-            d.callback(this);
-        }
-        return d;
-    },
-    release: function () {
-        if (!this.locked) {
-            throw TypeError("Tried to release an unlocked DeferredLock");
-        }
-        this.locked = false;
-        if (this.waiting.length > 0) {
-            this.locked = true;
-            this.waiting.shift().callback(this);
-        }
-    },
-    _nextId: MochiKit.Base.counter(),
-    repr: function () {
-        var state;
-        if (this.locked) {
-            state = 'locked, ' + this.waiting.length + ' waiting'
-        } else {
-            state = 'unlocked';
-        }
-        return 'DeferredLock(' + this.id + ', ' + state + ')';
-    },
-    toString: MochiKit.Base.forward("repr")
-
+return d;
+},callLater:function(_295,func){
+var m=MochiKit.Base;
+var _296=m.partial.apply(m,m.extend(null,arguments,1));
+return MochiKit.Async.wait(_295).addCallback(function(res){
+return _296();
+});
+}});
+MochiKit.Async.DeferredLock=function(){
+this.waiting=[];
+this.locked=false;
+this.id=this._nextId();
 };
-
-
-MochiKit.Async.EXPORT = [
-    "AlreadyCalledError",
-    "CancelledError",
-    "BrowserComplianceError",
-    "GenericError",
-    "XMLHttpRequestError",
-    "Deferred",
-    "succeed",
-    "fail",
-    "getXMLHttpRequest",
-    "doSimpleXMLHttpRequest",
-    "loadJSONDoc",
-    "wait",
-    "callLater",
-    "sendXMLHttpRequest",
-    "DeferredLock"
-];
-
-MochiKit.Async.EXPORT_OK = [
-    "evalJSONRequest"
-];
-
-MochiKit.Async.__new__ = function () {
-    var m = MochiKit.Base;
-    var ne = m.partial(m._newNamedError, this);
-    ne("AlreadyCalledError",
-        function (deferred) {
-            /***
-
-            Raised by the Deferred if callback or errback happens
-            after it was already fired.
-
-            ***/
-            this.deferred = deferred;
-        }
-    );
-
-    ne("CancelledError",
-        function (deferred) {
-            /***
-
-            Raised by the Deferred cancellation mechanism.
-
-            ***/
-            this.deferred = deferred;
-        }
-    );
-
-    ne("BrowserComplianceError",
-        function (msg) {
-            /***
-
-            Raised when the JavaScript runtime is not capable of performing
-            the given function.  Technically, this should really never be
-            raised because a non-conforming JavaScript runtime probably
-            isn't going to support exceptions in the first place.
-
-            ***/
-            this.message = msg;
-        }
-    );
-
-    ne("GenericError",
-        function (msg) {
-            this.message = msg;
-        }
-    );
-
-    ne("XMLHttpRequestError",
-        function (req, msg) {
-            /***
-
-            Raised when an XMLHttpRequest does not complete for any reason.
-
-            ***/
-            this.req = req;
-            this.message = msg;
-            try {
-                // Strange but true that this can raise in some cases.
-                this.number = req.status;
-            } catch (e) {
-                // pass
-            }
-        }
-    );
-
-
-    this.EXPORT_TAGS = {
-        ":common": this.EXPORT,
-        ":all": m.concat(this.EXPORT, this.EXPORT_OK)
-    };
-
-    m.nameFunctions(this);
-
+MochiKit.Async.DeferredLock.prototype={__class__:MochiKit.Async.DeferredLock,acquire:function(){
+d=new MochiKit.Async.Deferred();
+if(this.locked){
+this.waiting.push(d);
+}else{
+this.locked=true;
+d.callback(this);
+}
+return d;
+},release:function(){
+if(!this.locked){
+throw TypeError("Tried to release an unlocked DeferredLock");
+}
+this.locked=false;
+if(this.waiting.length>0){
+this.locked=true;
+this.waiting.shift().callback(this);
+}
+},_nextId:MochiKit.Base.counter(),repr:function(){
+var _297;
+if(this.locked){
+_297="locked, "+this.waiting.length+" waiting";
+}else{
+_297="unlocked";
+}
+return "DeferredLock("+this.id+", "+_297+")";
+},toString:MochiKit.Base.forward("repr")};
+MochiKit.Async.EXPORT=["AlreadyCalledError","CancelledError","BrowserComplianceError","GenericError","XMLHttpRequestError","Deferred","succeed","fail","getXMLHttpRequest","doSimpleXMLHttpRequest","loadJSONDoc","wait","callLater","sendXMLHttpRequest","DeferredLock"];
+MochiKit.Async.EXPORT_OK=["evalJSONRequest"];
+MochiKit.Async.__new__=function(){
+var m=MochiKit.Base;
+var ne=m.partial(m._newNamedError,this);
+ne("AlreadyCalledError",function(_299){
+this.deferred=_299;
+});
+ne("CancelledError",function(_300){
+this.deferred=_300;
+});
+ne("BrowserComplianceError",function(msg){
+this.message=msg;
+});
+ne("GenericError",function(msg){
+this.message=msg;
+});
+ne("XMLHttpRequestError",function(req,msg){
+this.req=req;
+this.message=msg;
+try{
+this.number=req.status;
+}
+catch(e){
+}
+});
+this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
+m.nameFunctions(this);
 };
-
 MochiKit.Async.__new__();
-
-MochiKit.Base._exportSymbols(this, MochiKit.Async);
-
-/***
-
-MochiKit.DOM 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito.  All rights Reserved.
-
-***/
-
-if (typeof(dojo) != 'undefined') {
-    dojo.provide("MochiKit.DOM");
-    dojo.require("MochiKit.Iter");
+MochiKit.Base._exportSymbols(this,MochiKit.Async);
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.DOM");
+dojo.require("MochiKit.Iter");
 }
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use("MochiKit.Iter", []);
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Iter",[]);
 }
-
-try {
-    if (typeof(MochiKit.Iter) == 'undefined') {
-        throw "";
-    }
-} catch (e) {
-    throw "MochiKit.DOM depends on MochiKit.Iter!";
+try{
+if(typeof (MochiKit.Iter)=="undefined"){
+throw "";
 }
-
-if (typeof(MochiKit.DOM) == 'undefined') {
-    MochiKit.DOM = {};
 }
-
-MochiKit.DOM.NAME = "MochiKit.DOM";
-MochiKit.DOM.VERSION = "1.3";
-MochiKit.DOM.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+catch(e){
+throw "MochiKit.DOM depends on MochiKit.Iter!";
+}
+if(typeof (MochiKit.DOM)=="undefined"){
+MochiKit.DOM={};
+}
+MochiKit.DOM.NAME="MochiKit.DOM";
+MochiKit.DOM.VERSION="1.3";
+MochiKit.DOM.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
 };
-MochiKit.DOM.toString = function () {
-    return this.__repr__();
+MochiKit.DOM.toString=function(){
+return this.__repr__();
 };
-
-MochiKit.DOM.EXPORT = [
-    "formContents",
-    "currentWindow",
-    "currentDocument",
-    "withWindow",
-    "withDocument",
-    "registerDOMConverter",
-    "coerceToDOM",
-    "createDOM",
-    "createDOMFunc",
-    "getNodeAttribute",
-    "setNodeAttribute",
-    "updateNodeAttributes",
-    "appendChildNodes",
-    "replaceChildNodes",
-    "removeElement",
-    "swapDOM",
-    "BUTTON",
-    "TT",
-    "PRE",
-    "H1",
-    "H2",
-    "H3",
-    "BR",
-    "CANVAS",
-    "HR",
-    "LABEL",
-    "TEXTAREA",
-    "FORM",
-    "STRONG",
-    "SELECT",
-    "OPTION",
-    "OPTGROUP",
-    "LEGEND",
-    "FIELDSET",
-    "P",
-    "UL",
-    "OL",
-    "LI",
-    "TD",
-    "TR",
-    "THEAD",
-    "TBODY",
-    "TFOOT",
-    "TABLE",
-    "TH",
-    "INPUT",
-    "SPAN",
-    "A",
-    "DIV",
-    "IMG",
-    "getElement",
-    "$",
-    "computedStyle",
-    "getElementsByTagAndClassName",
-    "addToCallStack",
-    "addLoadEvent",
-    "focusOnLoad",
-    "setElementClass",
-    "toggleElementClass",
-    "addElementClass",
-    "removeElementClass",
-    "swapElementClass",
-    "hasElementClass",
-    "escapeHTML",
-    "toHTML",
-    "emitHTML",
-    "setDisplayForElement",
-    "hideElement",
-    "showElement",
-    "scrapeText",
-    "elementDimensions",
-    "elementPosition",
-    "setElementDimensions",
-    "setElementPosition",
-    "getViewportDimensions",
-    "setOpacity"
-];
-
-MochiKit.DOM.EXPORT_OK = [
-    "domConverters"
-];
-
-MochiKit.DOM.Dimensions = function (w, h) {
-    this.w = w;
-    this.h = h;
+MochiKit.DOM.EXPORT=["formContents","currentWindow","currentDocument","withWindow","withDocument","registerDOMConverter","coerceToDOM","createDOM","createDOMFunc","getNodeAttribute","setNodeAttribute","updateNodeAttributes","appendChildNodes","replaceChildNodes","removeElement","swapDOM","BUTTON","TT","PRE","H1","H2","H3","BR","CANVAS","HR","LABEL","TEXTAREA","FORM","STRONG","SELECT","OPTION","OPTGROUP","LEGEND","FIELDSET","P","UL","OL","LI","TD","TR","THEAD","TBODY","TFOOT","TABLE","TH","INPUT","SPAN","A","DIV","IMG","getElement","$","computedStyle","getElementsByTagAndClassName","addToCallStack","addLoadEvent","focusOnLoad","setElementClass","toggleElementClass","addElementClass","removeElementClass","swapElementClass","hasElementClass","escapeHTML","toHTML","emitHTML","setDisplayForElement","hideElement","showElement","scrapeText","elementDimensions","elementPosition","setElementDimensions","setElementPosition","getViewportDimensions","setOpacity"];
+MochiKit.DOM.EXPORT_OK=["domConverters"];
+MochiKit.DOM.Dimensions=function(w,h){
+this.w=w;
+this.h=h;
 };
-
-MochiKit.DOM.Dimensions.prototype.repr = function () {
-    var repr = MochiKit.Base.repr;
-    return "{w: "  + repr(this.w) + ", h: " + repr(this.h) + "}";
+MochiKit.DOM.Dimensions.prototype.repr=function(){
+var repr=MochiKit.Base.repr;
+return "{w: "+repr(this.w)+", h: "+repr(this.h)+"}";
 };
-
-MochiKit.DOM.Coordinates = function (x, y) {
-    this.x = x;
-    this.y = y;
+MochiKit.DOM.Coordinates=function(x,y){
+this.x=x;
+this.y=y;
 };
-
-MochiKit.DOM.Coordinates.prototype.repr = function () {
-    var repr = MochiKit.Base.repr;
-    return "{x: "  + repr(this.x) + ", y: " + repr(this.y) + "}";
+MochiKit.DOM.Coordinates.prototype.repr=function(){
+var repr=MochiKit.Base.repr;
+return "{x: "+repr(this.x)+", y: "+repr(this.y)+"}";
 };
-
-MochiKit.Base.update(MochiKit.DOM, {
-
-    setOpacity: function(elem, o) {
-        elem = MochiKit.DOM.getElement(elem);
-        MochiKit.DOM.updateNodeAttributes(elem, {'style': {
-                'opacity': o,
-                '-moz-opacity': o,
-                '-khtml-opacity': o,
-                'filter':' alpha(opacity=' + (o * 100) + ')'
-            }});
-    },
-
-    getViewportDimensions: function() {
-        var d = new MochiKit.DOM.Dimensions();
-
-        var w = MochiKit.DOM._window;
-        var b = MochiKit.DOM._document.body;
-
-        if (w.innerWidth) {
-            d.w = w.innerWidth;
-            d.h = w.innerHeight;
-        } else if (b.parentElement.clientWidth) {
-            d.w = b.parentElement.clientWidth;
-            d.h = b.parentElement.clientHeight;
-        } else if (b && b.clientWidth) {
-            d.w = b.clientWidth;
-            d.h = b.clientHeight;
-        }
-        return d;
-    },
-
-    elementDimensions: function (elem) {
-        var self = MochiKit.DOM;
-        if (typeof(elem.w) == 'number' || typeof(elem.h) == 'number') {
-            return new self.Dimensions(elem.w || 0, elem.h || 0);
-        }
-        elem = self.getElement(elem);
-        if (!elem) {
-            return undefined;
-        }
-        if (self.computedStyle(elem, 'display') != 'none') {
-            return new self.Dimensions(elem.offsetWidth || 0,
-                elem.offsetHeight || 0);
-        }
-        var s = elem.style;
-        var originalVisibility = s.visibility;
-        var originalPosition = s.position;
-        s.visibility = 'hidden';
-        s.position = 'absolute';
-        s.display = '';
-        var originalWidth = elem.offsetWidth;
-        var originalHeight = elem.offsetHeight;
-        s.display = 'none';
-        s.position = originalPosition;
-        s.visibility = originalVisibility;
-        return new self.Dimensions(originalWidth, originalHeight);
-    },
-
-    /*
-    elementPosition is adapted from YAHOO.util.Dom.getXY, version 0.9.0.
-    Copyright: Copyright (c) 2006, Yahoo! Inc. All rights reserved.
-    BSD License: http://developer.yahoo.net/yui/license.txt
-    */
-    elementPosition: function (elem, /* optional */relativeTo) {
-        var self = MochiKit.DOM;
-        elem = self.getElement(elem);
-
-        if (!elem ||
-            elem.parentNode === null ||
-            self.computedStyle(elem, 'display') == 'none') {
-            return undefined;
-        }
-
-        var c = new self.Coordinates(0, 0);
-        var box = null;
-        var parent = null;
-
-        var d = MochiKit.DOM._document;
-
-        if (typeof(relativeTo) != 'undefined') {
-            relativeTo = arguments.callee(relativeTo);
-            if (relativeTo) {
-                c.x -= (relativeTo.x || 0);
-                c.y -= (relativeTo.y || 0);
-            }
-        }
-
-        if (elem.getBoundingClientRect) { // IE shortcut
-            box = elem.getBoundingClientRect();
-
-            c.x += box.left +
-                (d.documentElement.scrollLeft ||
-                d.body.scrollLeft);
-
-            c.y += box.top +
-                (d.documentElement.scrollTop ||
-                d.body.scrollTop);
-
-            return c;
-        } else if (d.getBoxObjectFor) { // Gecko shortcut
-            box = d.getBoxObjectFor(elem);
-            c.x += box.x;
-            c.y += box.y;
-        } else if (elem.offsetParent) {
-            c.x += elem.offsetLeft;
-            c.y += elem.offsetTop;
-            parent = elem.offsetParent;
-
-            if (parent != elem) {
-                while (parent) {
-                    c.x += parent.offsetLeft;
-                    c.y += parent.offsetTop;
-                    parent = parent.offsetParent;
-                }
-            }
-
-            // opera & (safari absolute) incorrectly account for body offsetTop
-            var ua = navigator.userAgent.toLowerCase();
-            if (ua.indexOf('opera') != -1 ||
-                (ua.indexOf('safari') != -1 &&
-                self.computedStyle(elem, 'position') == 'absolute')) {
-
-                c.y -= d.body.offsetTop;
-
-            }
-        } else {
-            /* it's just a MochiKit.DOM.Coordinates object */
-            c.x += elem.x || 0;
-            c.y += elem.y || 0;
-            return c;
-        }
-
-        if (elem.parentNode) {
-            parent = elem.parentNode;
-        } else {
-            parent = null;
-        }
-
-        while (parent && parent.tagName != 'BODY' && parent.tagName != 'HTML') {
-            c.x -= parent.scrollLeft;
-            c.y -= parent.scrollTop;
-            if (parent.parentNode) {
-                parent = parent.parentNode;
-            } else {
-                parent = null;
-            }
-        }
-
-        return c;
-    },
-
-    setElementDimensions: function (elem, newSize/* optional */, units) {
-        elem = MochiKit.DOM.getElement(elem);
-        if (typeof(units) == 'undefined') {
-            units = 'px';
-        }
-        MochiKit.DOM.updateNodeAttributes(elem, {'style': {
-            'width': newSize.w + units,
-            'height': newSize.h + units
-        }});
-    },
-
-    setElementPosition: function (elem, newPos/* optional */, units) {
-        elem = MochiKit.DOM.getElement(elem);
-        if (typeof(units) == 'undefined') {
-            units = 'px';
-        }
-        MochiKit.DOM.updateNodeAttributes(elem, {'style': {
-            'left': newPos.x + units,
-            'top': newPos.y + units
-        }});
-    },
-
-    currentWindow: function () {
-        return MochiKit.DOM._window;
-    },
-
-    currentDocument: function () {
-        return MochiKit.DOM._document;
-    },
-
-    withWindow: function (win, func) {
-        var self = MochiKit.DOM;
-        var oldDoc = self._document;
-        var oldWin = self._win;
-        var rval;
-        try {
-            self._window = win;
-            self._document = win.document;
-            rval = func();
-        } catch (e) {
-            self._window = oldWin;
-            self._document = oldDoc;
-            throw e;
-        }
-        self._window = oldWin;
-        self._document = oldDoc;
-        return rval;
-    },
-
-    formContents: function (elem/* = document */) {
-        var names = [];
-        var values = [];
-        var m = MochiKit.Base;
-        var self = MochiKit.DOM;
-        if (typeof(elem) == "undefined" || elem === null) {
-            elem = self._document;
-        } else {
-            elem = self.getElement(elem);
-        }
-        m.nodeWalk(elem, function (elem) {
-            var name = elem.name;
-            if (m.isNotEmpty(name)) {
-                var tagName = elem.nodeName;
-                if (tagName == "INPUT"
-                    && (elem.type == "radio" || elem.type == "checkbox")
-                    && !elem.checked
-                ) {
-                    return null;
-                }
-                if (tagName == "SELECT") {
-                    if (elem.selectedIndex >= 0) {
-                        var opt = elem.options[elem.selectedIndex];
-                        names.push(name);
-                        values.push((opt.value) ? opt.value : opt.text);
-                        return null;
-                    }
-                    // no form elements?
-                    names.push(name);
-                    values.push("");
-                    return null;
-                }
-                if (tagName == "FORM" || tagName == "P" || tagName == "SPAN"
-                    || tagName == "DIV"
-                ) {
-                    return elem.childNodes;
-                }
-                names.push(name);
-                values.push(elem.value || '');
-                return null;
-            }
-            return elem.childNodes;
-        });
-        return [names, values];
-    },
-
-    withDocument: function (doc, func) {
-        var self = MochiKit.DOM;
-        var oldDoc = self._document;
-        var rval;
-        try {
-            self._document = doc;
-            rval = func();
-        } catch (e) {
-            self._document = oldDoc;
-            throw e;
-        }
-        self._document = oldDoc;
-        return rval;
-    },
-
-    registerDOMConverter: function (name, check, wrap, /* optional */override) {
-        /***
-
-            Register an adapter to convert objects that match check(obj, ctx)
-            to a DOM element, or something that can be converted to a DOM
-            element (i.e. number, bool, string, function, iterable).
-
-        ***/
-        MochiKit.DOM.domConverters.register(name, check, wrap, override);
-    },
-
-    coerceToDOM: function (node, ctx) {
-        /***
-
-            Used internally by createDOM, coerces a node to null, a DOM object,
-            or an iterable.
-
-        ***/
-
-        var im = MochiKit.Iter;
-        var self = MochiKit.DOM;
-        var iter = im.iter;
-        var repeat = im.repeat;
-        var imap = im.imap;
-        var domConverters = self.domConverters;
-        var coerceToDOM = self.coerceToDOM;
-        var NotFound = MochiKit.Base.NotFound;
-        while (true) {
-            if (typeof(node) == 'undefined' || node === null) {
-                return null;
-            }
-            if (typeof(node.nodeType) != 'undefined' && node.nodeType > 0) {
-                return node;
-            }
-            if (typeof(node) == 'number' || typeof(node) == 'bool') {
-                node = node.toString();
-                // FALL THROUGH
-            }
-            if (typeof(node) == 'string') {
-                return self._document.createTextNode(node);
-            }
-            if (typeof(node.toDOM) == 'function') {
-                node = node.toDOM(ctx);
-                continue;
-            }
-            if (typeof(node) == 'function') {
-                node = node(ctx);
-                continue;
-            }
-
-            // iterable
-            var iterNodes = null;
-            try {
-                iterNodes = iter(node);
-            } catch (e) {
-                // pass
-            }
-            if (iterNodes) {
-                return imap(
-                    coerceToDOM,
-                    iterNodes,
-                    repeat(ctx)
-                );
-            }
-
-            // adapter
-            try {
-                node = domConverters.match(node, ctx);
-                continue;
-            } catch (e) {
-                if (e != NotFound) {
-                    throw e;
-                }
-            }
-
-            // fallback
-            return self._document.createTextNode(node.toString());
-        }
-        // mozilla warnings aren't too bright
-        return undefined;
-    },
-
-    setNodeAttribute: function (node, attr, value) {
-        var o = {};
-        o[attr] = value;
-        try {
-            return MochiKit.DOM.updateNodeAttributes(node, o);
-        } catch (e) {
-            // pass
-        }
-        return null;
-    },
-
-    getNodeAttribute: function (node, attr) {
-        var self = MochiKit.DOM;
-        var rename = self.attributeArray.renames[attr];
-        node = self.getElement(node);
-        try {
-            if (rename) {
-                return node[rename];
-            }
-            return node.getAttribute(attr);
-        } catch (e) {
-            // pass
-        }
-        return null;
-    },
-
-    updateNodeAttributes: function (node, attrs) {
-        var elem = node;
-        var self = MochiKit.DOM;
-        if (typeof(node) == 'string') {
-            elem = self.getElement(node);
-        }
-        if (attrs) {
-            var updatetree = MochiKit.Base.updatetree;
-            if (self.attributeArray.compliant) {
-                // not IE, good.
-                for (var k in attrs) {
-                    var v = attrs[k];
-                    if (typeof(v) == 'object' && typeof(elem[k]) == 'object') {
-                        updatetree(elem[k], v);
-                    } else if (k.substring(0, 2) == "on") {
-                        if (typeof(v) == "string") {
-                            v = new Function(v);
-                        }
-                        elem[k] = v;
-                    } else {
-                        elem.setAttribute(k, v);
-                    }
-                }
-            } else {
-                // IE is insane in the membrane
-                var renames = self.attributeArray.renames;
-                for (k in attrs) {
-                    v = attrs[k];
-                    var renamed = renames[k];
-                    if (k == "style" && typeof(v) == "string") {
-                        elem.style.cssText = v;
-                    } else if (typeof(renamed) == "string") {
-                        elem[renamed] = v;
-                    } else if (typeof(elem[k]) == 'object'
-                            && typeof(v) == 'object') {
-                        updatetree(elem[k], v);
-                    } else if (k.substring(0, 2) == "on") {
-                        if (typeof(v) == "string") {
-                            v = new Function(v);
-                        }
-                        elem[k] = v;
-                    } else {
-                        elem.setAttribute(k, v);
-                    }
-                }
-            }
-        }
-        return elem;
-    },
-
-    appendChildNodes: function (node/*, nodes...*/) {
-        var elem = node;
-        var self = MochiKit.DOM;
-        if (typeof(node) == 'string') {
-            elem = self.getElement(node);
-        }
-        var nodeStack = [
-            self.coerceToDOM(
-                MochiKit.Base.extend(null, arguments, 1),
-                elem
-            )
-        ];
-        var concat = MochiKit.Base.concat;
-        while (nodeStack.length) {
-            var n = nodeStack.shift();
-            if (typeof(n) == 'undefined' || n === null) {
-                // pass
-            } else if (typeof(n.nodeType) == 'number') {
-                elem.appendChild(n);
-            } else {
-                nodeStack = concat(n, nodeStack);
-            }
-        }
-        return elem;
-    },
-
-    replaceChildNodes: function (node/*, nodes...*/) {
-        var elem = node;
-        var self = MochiKit.DOM;
-        if (typeof(node) == 'string') {
-            elem = self.getElement(node);
-            arguments[0] = elem;
-        }
-        var child;
-        while ((child = elem.firstChild)) {
-            elem.removeChild(child);
-        }
-        if (arguments.length < 2) {
-            return elem;
-        } else {
-            return self.appendChildNodes.apply(this, arguments);
-        }
-    },
-
-    createDOM: function (name, attrs/*, nodes... */) {
-        /*
-
-            Create a DOM fragment in a really convenient manner, much like
-            Nevow's <http://nevow.com> stan.
-
-        */
-
-        var elem;
-        var self = MochiKit.DOM;
-        if (typeof(name) == 'string') {
-            // Internet Explorer is dumb
-            if (attrs && "name" in attrs && !self.attributeArray.compliant) {
-                // http://msdn.microsoft.com/workshop/author/dhtml/reference/properties/name_2.asp
-                name = ('<' + name + ' name="' + self.escapeHTML(attrs.name)
-                    + '">');
-            }
-            elem = self._document.createElement(name);
-        } else {
-            elem = name;
-        }
-        if (attrs) {
-            self.updateNodeAttributes(elem, attrs);
-        }
-        if (arguments.length <= 2) {
-            return elem;
-        } else {
-            var args = MochiKit.Base.extend([elem], arguments, 2);
-            return self.appendChildNodes.apply(this, args);
-        }
-    },
-
-    createDOMFunc: function (/* tag, attrs, *nodes */) {
-        /***
-
-            Convenience function to create a partially applied createDOM
-
-            @param tag: The name of the tag
-
-            @param attrs: Optionally specify the attributes to apply
-
-            @param *notes: Optionally specify any children nodes it should have
-
-            @rtype: function
-
-        ***/
-        var m = MochiKit.Base;
-        return m.partial.apply(
-            this,
-            m.extend([MochiKit.DOM.createDOM], arguments)
-        );
-    },
-
-    swapDOM: function (dest, src) {
-        /***
-
-            Replace dest in a DOM tree with src, returning src
-
-            @param dest: a DOM element to be replaced
-
-            @param src: the DOM element to replace it with
-                        or null if the DOM element should be removed
-
-            @rtype: a DOM element (src)
-
-        ***/
-        var self = MochiKit.DOM;
-        dest = self.getElement(dest);
-        var parent = dest.parentNode;
-        if (src) {
-            src = self.getElement(src);
-            parent.replaceChild(src, dest);
-        } else {
-            parent.removeChild(dest);
-        }
-        return src;
-    },
-
-    getElement: function (id) {
-        /***
-
-            A small quick little function to encapsulate the getElementById
-            method.  It includes a check to ensure we can use that method.
-
-            If the id isn't a string, it will be returned as-is.
-
-            Also available as $(...) for compatibility/convenience with "other"
-            js frameworks (bah).
-
-        ***/
-        var self = MochiKit.DOM;
-        if (arguments.length == 1) {
-            return ((typeof(id) == "string") ?
-                self._document.getElementById(id) : id);
-        } else {
-            return MochiKit.Base.map(self.getElement, arguments);
-        }
-    },
-
-    computedStyle: function (htmlElement, cssProperty, mozillaEquivalentCSS) {
-        if (arguments.length == 2) {
-            mozillaEquivalentCSS = cssProperty;
-        }
-        var self = MochiKit.DOM;
-        var el = self.getElement(htmlElement);
-        var document = self._document;
-        if (!el || el == document) {
-            return undefined;
-        }
-        if (el.currentStyle) {
-            return el.currentStyle[cssProperty];
-        }
-        if (typeof(document.defaultView) == 'undefined') {
-            return undefined;
-        }
-        if (document.defaultView === null) {
-            return undefined;
-        }
-        var style = document.defaultView.getComputedStyle(el, null);
-        if (typeof(style) == "undefined" || style === null) {
-            return undefined;
-        }
-        return style.getPropertyValue(mozillaEquivalentCSS);
-    },
-
-    getElementsByTagAndClassName: function (tagName, className,
-            /* optional */parent) {
-        var self = MochiKit.DOM;
-        if (typeof(tagName) == 'undefined' || tagName === null) {
-            tagName = '*';
-        }
-        if (typeof(parent) == 'undefined' || parent === null) {
-            parent = self._document;
-        }
-        parent = self.getElement(parent);
-        var children = (parent.getElementsByTagName(tagName)
-            || self._document.all);
-        if (typeof(className) == 'undefined' || className === null) {
-            return MochiKit.Base.extend(null, children);
-        }
-
-        var elements = [];
-        for (var i = 0; i < children.length; i++) {
-            var child = children[i];
-            var classNames = child.className.split(' ');
-            for (var j = 0; j < classNames.length; j++) {
-                if (classNames[j] == className) {
-                    elements.push(child);
-                    break;
-                }
-            }
-        }
-
-        return elements;
-    },
-
-    _newCallStack: function (path, once) {
-        var rval = function () {
-            var callStack = arguments.callee.callStack;
-            for (var i = 0; i < callStack.length; i++) {
-                if (callStack[i].apply(this, arguments) === false) {
-                    break;
-                }
-            }
-            if (once) {
-                try {
-                    this[path] = null;
-                } catch (e) {
-                    // pass
-                }
-            }
-        };
-        rval.callStack = [];
-        return rval;
-    },
-
-    addToCallStack: function (target, path, func, once) {
-        var self = MochiKit.DOM;
-        var existing = target[path];
-        var regfunc = existing;
-        if (!(typeof(existing) == 'function'
-                && typeof(existing.callStack) == "object"
-                && existing.callStack !== null)) {
-            regfunc = self._newCallStack(path, once);
-            if (typeof(existing) == 'function') {
-                regfunc.callStack.push(existing);
-            }
-            target[path] = regfunc;
-        }
-        regfunc.callStack.push(func);
-    },
-
-    addLoadEvent: function (func) {
-        /***
-
-            This will stack load functions on top of each other.
-            Each function added will be called after onload in the
-            order that they were added.
-
-        ***/
-        var self = MochiKit.DOM;
-        self.addToCallStack(self._window, "onload", func, true);
-
-    },
-
-    focusOnLoad: function (element) {
-        var self = MochiKit.DOM;
-        self.addLoadEvent(function () {
-            element = self.getElement(element);
-            if (element) {
-                element.focus();
-            }
-        });
-    },
-
-    setElementClass: function (element, className) {
-        /***
-
-            Set the entire class attribute of an element to className.
-
-        ***/
-        var self = MochiKit.DOM;
-        var obj = self.getElement(element);
-        if (self.attributeArray.compliant) {
-            obj.setAttribute("class", className);
-        } else {
-            obj.setAttribute("className", className);
-        }
-    },
-
-    toggleElementClass: function (className/*, element... */) {
-        /***
-
-            Toggle the presence of a given className in the class attribute
-            of all given elements.
-
-        ***/
-        var self = MochiKit.DOM;
-        for (var i = 1; i < arguments.length; i++) {
-            var obj = self.getElement(arguments[i]);
-            if (!self.addElementClass(obj, className)) {
-                self.removeElementClass(obj, className);
-            }
-        }
-    },
-
-    addElementClass: function (element, className) {
-        /***
-
-            Ensure that the given element has className set as part of its
-            class attribute.  This will not disturb other class names.
-
-        ***/
-        var self = MochiKit.DOM;
-        var obj = self.getElement(element);
-        var cls = obj.className;
-        // trivial case, no className yet
-        if (cls.length === 0) {
-            self.setElementClass(obj, className);
-            return true;
-        }
-        // the other trivial case, already set as the only class
-        if (cls == className) {
-            return false;
-        }
-        var classes = obj.className.split(" ");
-        for (var i = 0; i < classes.length; i++) {
-            // already present
-            if (classes[i] == className) {
-                return false;
-            }
-        }
-        // append class
-        self.setElementClass(obj, cls + " " + className);
-        return true;
-    },
-
-    removeElementClass: function (element, className) {
-        /***
-
-            Ensure that the given element does not have className set as part
-            of its class attribute.  This will not disturb other class names.
-
-        ***/
-        var self = MochiKit.DOM;
-        var obj = self.getElement(element);
-        var cls = obj.className;
-        // trivial case, no className yet
-        if (cls.length === 0) {
-            return false;
-        }
-        // other trivial case, set only to className
-        if (cls == className) {
-            self.setElementClass(obj, "");
-            return true;
-        }
-        var classes = obj.className.split(" ");
-        for (var i = 0; i < classes.length; i++) {
-            // already present
-            if (classes[i] == className) {
-                // only check sane case where the class is used once
-                classes.splice(i, 1);
-                self.setElementClass(obj, classes.join(" "));
-                return true;
-            }
-        }
-        // not found
-        return false;
-    },
-
-    swapElementClass: function (element, fromClass, toClass) {
-        /***
-
-            If fromClass is set on element, replace it with toClass.  This
-            will not disturb other classes on that element.
-
-        ***/
-        var obj = MochiKit.DOM.getElement(element);
-        var res = MochiKit.DOM.removeElementClass(obj, fromClass);
-        if (res) {
-            MochiKit.DOM.addElementClass(obj, toClass);
-        }
-        return res;
-    },
-
-    hasElementClass: function (element, className/*...*/) {
-        /***
-
-          Return true if className is found in the element
-
-        ***/
-        var obj = MochiKit.DOM.getElement(element);
-        var classes = obj.className.split(" ");
-        for (var i = 1; i < arguments.length; i++) {
-            var good = false;
-            for (var j = 0; j < classes.length; j++) {
-                if (classes[j] == arguments[i]) {
-                    good = true;
-                    break;
-                }
-            }
-            if (!good) {
-                return false;
-            }
-        }
-        return true;
-    },
-
-    escapeHTML: function (s) {
-        /***
-
-            Make a string safe for HTML, converting the usual suspects (lt,
-            gt, quot, amp)
-
-        ***/
-        return s.replace(/&/g, "&amp;"
-            ).replace(/"/g, "&quot;"
-            ).replace(/</g, "&lt;"
-            ).replace(/>/g, "&gt;");
-    },
-
-    toHTML: function (dom) {
-        /***
-
-            Convert a DOM tree to a HTML string using emitHTML
-
-        ***/
-        return MochiKit.DOM.emitHTML(dom).join("");
-    },
-
-    emitHTML: function (dom, /* optional */lst) {
-        /***
-
-            Convert a DOM tree to a list of HTML string fragments
-
-            You probably want to use toHTML instead.
-
-        ***/
-
-        if (typeof(lst) == 'undefined' || lst === null) {
-            lst = [];
-        }
-        // queue is the call stack, we're doing this non-recursively
-        var queue = [dom];
-        var self = MochiKit.DOM;
-        var escapeHTML = self.escapeHTML;
-        var attributeArray = self.attributeArray;
-        while (queue.length) {
-            dom = queue.pop();
-            if (typeof(dom) == 'string') {
-                lst.push(dom);
-            } else if (dom.nodeType == 1) {
-                // we're not using higher order stuff here
-                // because safari has heisenbugs.. argh.
-                //
-                // I think it might have something to do with
-                // garbage collection and function calls.
-                lst.push('<' + dom.nodeName.toLowerCase());
-                var attributes = [];
-                var domAttr = attributeArray(dom);
-                for (var i = 0; i < domAttr.length; i++) {
-                    var a = domAttr[i];
-                    attributes.push([
-                        " ",
-                        a.name,
-                        '="',
-                        escapeHTML(a.value),
-                        '"'
-                    ]);
-                }
-                attributes.sort();
-                for (i = 0; i < attributes.length; i++) {
-                    var attrs = attributes[i];
-                    for (var j = 0; j < attrs.length; j++) {
-                        lst.push(attrs[j]);
-                    }
-                }
-                if (dom.hasChildNodes()) {
-                    lst.push(">");
-                    // queue is the FILO call stack, so we put the close tag
-                    // on first
-                    queue.push("</" + dom.nodeName.toLowerCase() + ">");
-                    var cnodes = dom.childNodes;
-                    for (i = cnodes.length - 1; i >= 0; i--) {
-                        queue.push(cnodes[i]);
-                    }
-                } else {
-                    lst.push('/>');
-                }
-            } else if (dom.nodeType == 3) {
-                lst.push(escapeHTML(dom.nodeValue));
-            }
-        }
-        return lst;
-    },
-
-    setDisplayForElement: function (display, element/*, ...*/) {
-        /***
-
-            Change the style.display for the given element(s).  Usually
-            used as the partial forms:
-
-                showElement(element, ...);
-                hideElement(element, ...);
-
-        ***/
-        var m = MochiKit.Base;
-        var elements = m.extend(null, arguments, 1);
-        MochiKit.Iter.forEach(
-            m.filter(null, m.map(MochiKit.DOM.getElement, elements)),
-            function (element) {
-                element.style.display = display;
-            }
-        );
-    },
-
-    scrapeText: function (node, /* optional */asArray) {
-        /***
-
-            Walk a DOM tree in-order and scrape all of the text out of it as a
-            string or an Array
-
-        ***/
-        var rval = [];
-        (function (node) {
-            var cn = node.childNodes;
-            if (cn) {
-                for (var i = 0; i < cn.length; i++) {
-                    arguments.callee.call(this, cn[i]);
-                }
-            }
-            var nodeValue = node.nodeValue;
-            if (typeof(nodeValue) == 'string') {
-                rval.push(nodeValue);
-            }
-        })(MochiKit.DOM.getElement(node));
-        if (asArray) {
-            return rval;
-        } else {
-            return rval.join("");
-        }
-    },
-
-
-    __new__: function (win) {
-
-        var m = MochiKit.Base;
-        this._document = document;
-        this._window = win;
-
-        this.domConverters = new m.AdapterRegistry();
-
-        var __tmpElement = this._document.createElement("span");
-        var attributeArray;
-        if (__tmpElement && __tmpElement.attributes &&
-                __tmpElement.attributes.length > 0) {
-            // for braindead browsers (IE) that insert extra junk
-            var filter = m.filter;
-            attributeArray = function (node) {
-                return filter(attributeArray.ignoreAttrFilter, node.attributes);
-            };
-            attributeArray.ignoreAttr = {};
-            MochiKit.Iter.forEach(__tmpElement.attributes, function (a) {
-                attributeArray.ignoreAttr[a.name] = a.value;
-            });
-            attributeArray.ignoreAttrFilter = function (a) {
-                return (attributeArray.ignoreAttr[a.name] != a.value);
-            };
-            attributeArray.compliant = false;
-            attributeArray.renames = {
-                "class": "className",
-                "checked": "defaultChecked",
-                "usemap": "useMap",
-                "for": "htmlFor"
-            };
-        } else {
-            attributeArray = function (node) {
-                /***
-
-                    Return an array of attributes for a given node,
-                    filtering out attributes that don't belong for
-                    that are inserted by "Certain Browsers".
-
-                ***/
-                return node.attributes;
-            };
-            attributeArray.compliant = true;
-            attributeArray.renames = {};
-        }
-        this.attributeArray = attributeArray;
-
-
-        // shorthand for createDOM syntax
-        var createDOMFunc = this.createDOMFunc;
-        this.UL = createDOMFunc("ul");
-        this.OL = createDOMFunc("ol");
-        this.LI = createDOMFunc("li");
-        this.TD = createDOMFunc("td");
-        this.TR = createDOMFunc("tr");
-        this.TBODY = createDOMFunc("tbody");
-        this.THEAD = createDOMFunc("thead");
-        this.TFOOT = createDOMFunc("tfoot");
-        this.TABLE = createDOMFunc("table");
-        this.TH = createDOMFunc("th");
-        this.INPUT = createDOMFunc("input");
-        this.SPAN = createDOMFunc("span");
-        this.A = createDOMFunc("a");
-        this.DIV = createDOMFunc("div");
-        this.IMG = createDOMFunc("img");
-        this.BUTTON = createDOMFunc("button");
-        this.TT = createDOMFunc("tt");
-        this.PRE = createDOMFunc("pre");
-        this.H1 = createDOMFunc("h1");
-        this.H2 = createDOMFunc("h2");
-        this.H3 = createDOMFunc("h3");
-        this.BR = createDOMFunc("br");
-        this.HR = createDOMFunc("hr");
-        this.LABEL = createDOMFunc("label");
-        this.TEXTAREA = createDOMFunc("textarea");
-        this.FORM = createDOMFunc("form");
-        this.P = createDOMFunc("p");
-        this.SELECT = createDOMFunc("select");
-        this.OPTION = createDOMFunc("option");
-        this.OPTGROUP = createDOMFunc("optgroup");
-        this.LEGEND = createDOMFunc("legend");
-        this.FIELDSET = createDOMFunc("fieldset");
-        this.STRONG = createDOMFunc("strong");
-        this.CANVAS = createDOMFunc("canvas");
-
-        this.hideElement = m.partial(this.setDisplayForElement, "none");
-        this.showElement = m.partial(this.setDisplayForElement, "block");
-        this.removeElement = this.swapDOM;
-
-        this.$ = this.getElement;
-
-        this.EXPORT_TAGS = {
-            ":common": this.EXPORT,
-            ":all": m.concat(this.EXPORT, this.EXPORT_OK)
-        };
-
-        m.nameFunctions(this);
-
-    }
+MochiKit.Base.update(MochiKit.DOM,{setOpacity:function(elem,o){
+elem=MochiKit.DOM.getElement(elem);
+MochiKit.DOM.updateNodeAttributes(elem,{"style":{"opacity":o,"-moz-opacity":o,"-khtml-opacity":o,"filter":" alpha(opacity="+(o*100)+")"}});
+},getViewportDimensions:function(){
+var d=new MochiKit.DOM.Dimensions();
+var w=MochiKit.DOM._window;
+var b=MochiKit.DOM._document.body;
+if(w.innerWidth){
+d.w=w.innerWidth;
+d.h=w.innerHeight;
+}else{
+if(b.parentElement.clientWidth){
+d.w=b.parentElement.clientWidth;
+d.h=b.parentElement.clientHeight;
+}else{
+if(b&&b.clientWidth){
+d.w=b.clientWidth;
+d.h=b.clientHeight;
+}
+}
+}
+return d;
+},elementDimensions:function(elem){
+var self=MochiKit.DOM;
+if(typeof (elem.w)=="number"||typeof (elem.h)=="number"){
+return new self.Dimensions(elem.w||0,elem.h||0);
+}
+elem=self.getElement(elem);
+if(!elem){
+return undefined;
+}
+if(self.computedStyle(elem,"display")!="none"){
+return new self.Dimensions(elem.offsetWidth||0,elem.offsetHeight||0);
+}
+var s=elem.style;
+var _305=s.visibility;
+var _306=s.position;
+s.visibility="hidden";
+s.position="absolute";
+s.display="";
+var _307=elem.offsetWidth;
+var _308=elem.offsetHeight;
+s.display="none";
+s.position=_306;
+s.visibility=_305;
+return new self.Dimensions(_307,_308);
+},elementPosition:function(elem,_309){
+var self=MochiKit.DOM;
+elem=self.getElement(elem);
+if(!elem||elem.parentNode===null||self.computedStyle(elem,"display")=="none"){
+return undefined;
+}
+var c=new self.Coordinates(0,0);
+var box=null;
+var _312=null;
+var d=MochiKit.DOM._document;
+if(typeof (_309)!="undefined"){
+_309=arguments.callee(_309);
+if(_309){
+c.x-=(_309.x||0);
+c.y-=(_309.y||0);
+}
+}
+if(elem.getBoundingClientRect){
+box=elem.getBoundingClientRect();
+c.x+=box.left+(d.documentElement.scrollLeft||d.body.scrollLeft);
+c.y+=box.top+(d.documentElement.scrollTop||d.body.scrollTop);
+return c;
+}else{
+if(d.getBoxObjectFor){
+box=d.getBoxObjectFor(elem);
+c.x+=box.x;
+c.y+=box.y;
+}else{
+if(elem.offsetParent){
+c.x+=elem.offsetLeft;
+c.y+=elem.offsetTop;
+_312=elem.offsetParent;
+if(_312!=elem){
+while(_312){
+c.x+=_312.offsetLeft;
+c.y+=_312.offsetTop;
+_312=_312.offsetParent;
+}
+}
+var ua=navigator.userAgent.toLowerCase();
+if(ua.indexOf("opera")!=-1||(ua.indexOf("safari")!=-1&&self.computedStyle(elem,"position")=="absolute")){
+c.y-=d.body.offsetTop;
+}
+}else{
+c.x+=elem.x||0;
+c.y+=elem.y||0;
+return c;
+}
+}
+}
+if(elem.parentNode){
+_312=elem.parentNode;
+}else{
+_312=null;
+}
+while(_312&&_312.tagName!="BODY"&&_312.tagName!="HTML"){
+c.x-=_312.scrollLeft;
+c.y-=_312.scrollTop;
+if(_312.parentNode){
+_312=_312.parentNode;
+}else{
+_312=null;
+}
+}
+return c;
+},setElementDimensions:function(elem,_314,_315){
+elem=MochiKit.DOM.getElement(elem);
+if(typeof (_315)=="undefined"){
+_315="px";
+}
+MochiKit.DOM.updateNodeAttributes(elem,{"style":{"width":_314.w+_315,"height":_314.h+_315}});
+},setElementPosition:function(elem,_316,_317){
+elem=MochiKit.DOM.getElement(elem);
+if(typeof (_317)=="undefined"){
+_317="px";
+}
+MochiKit.DOM.updateNodeAttributes(elem,{"style":{"left":_316.x+_317,"top":_316.y+_317}});
+},currentWindow:function(){
+return MochiKit.DOM._window;
+},currentDocument:function(){
+return MochiKit.DOM._document;
+},withWindow:function(win,func){
+var self=MochiKit.DOM;
+var _319=self._document;
+var _320=self._win;
+var rval;
+try{
+self._window=win;
+self._document=win.document;
+rval=func();
+}
+catch(e){
+self._window=_320;
+self._document=_319;
+throw e;
+}
+self._window=_320;
+self._document=_319;
+return rval;
+},formContents:function(elem){
+var _321=[];
+var _322=[];
+var m=MochiKit.Base;
+var self=MochiKit.DOM;
+if(typeof (elem)=="undefined"||elem===null){
+elem=self._document;
+}else{
+elem=self.getElement(elem);
+}
+m.nodeWalk(elem,function(elem){
+var name=elem.name;
+if(m.isNotEmpty(name)){
+var _323=elem.nodeName;
+if(_323=="INPUT"&&(elem.type=="radio"||elem.type=="checkbox")&&!elem.checked){
+return null;
+}
+if(_323=="SELECT"){
+if(elem.selectedIndex>=0){
+var opt=elem.options[elem.selectedIndex];
+_321.push(name);
+_322.push((opt.value)?opt.value:opt.text);
+return null;
+}
+_321.push(name);
+_322.push("");
+return null;
+}
+if(_323=="FORM"||_323=="P"||_323=="SPAN"||_323=="DIV"){
+return elem.childNodes;
+}
+_321.push(name);
+_322.push(elem.value||"");
+return null;
+}
+return elem.childNodes;
 });
-
+return [_321,_322];
+},withDocument:function(doc,func){
+var self=MochiKit.DOM;
+var _326=self._document;
+var rval;
+try{
+self._document=doc;
+rval=func();
+}
+catch(e){
+self._document=_326;
+throw e;
+}
+self._document=_326;
+return rval;
+},registerDOMConverter:function(name,_327,wrap,_328){
+MochiKit.DOM.domConverters.register(name,_327,wrap,_328);
+},coerceToDOM:function(node,ctx){
+var im=MochiKit.Iter;
+var self=MochiKit.DOM;
+var iter=im.iter;
+var _332=im.repeat;
+var imap=im.imap;
+var _334=self.domConverters;
+var _335=self.coerceToDOM;
+var _336=MochiKit.Base.NotFound;
+while(true){
+if(typeof (node)=="undefined"||node===null){
+return null;
+}
+if(typeof (node.nodeType)!="undefined"&&node.nodeType>0){
+return node;
+}
+if(typeof (node)=="number"||typeof (node)=="bool"){
+node=node.toString();
+}
+if(typeof (node)=="string"){
+return self._document.createTextNode(node);
+}
+if(typeof (node.toDOM)=="function"){
+node=node.toDOM(ctx);
+continue;
+}
+if(typeof (node)=="function"){
+node=node(ctx);
+continue;
+}
+var _337=null;
+try{
+_337=iter(node);
+}
+catch(e){
+}
+if(_337){
+return imap(_335,_337,_332(ctx));
+}
+try{
+node=_334.match(node,ctx);
+continue;
+}
+catch(e){
+if(e!=_336){
+throw e;
+}
+}
+return self._document.createTextNode(node.toString());
+}
+return undefined;
+},setNodeAttribute:function(node,attr,_339){
+var o={};
+o[attr]=_339;
+try{
+return MochiKit.DOM.updateNodeAttributes(node,o);
+}
+catch(e){
+}
+return null;
+},getNodeAttribute:function(node,attr){
+var self=MochiKit.DOM;
+var _340=self.attributeArray.renames[attr];
+node=self.getElement(node);
+try{
+if(_340){
+return node[_340];
+}
+return node.getAttribute(attr);
+}
+catch(e){
+}
+return null;
+},updateNodeAttributes:function(node,_341){
+var elem=node;
+var self=MochiKit.DOM;
+if(typeof (node)=="string"){
+elem=self.getElement(node);
+}
+if(_341){
+var _342=MochiKit.Base.updatetree;
+if(self.attributeArray.compliant){
+for(var k in _341){
+var v=_341[k];
+if(typeof (v)=="object"&&typeof (elem[k])=="object"){
+_342(elem[k],v);
+}else{
+if(k.substring(0,2)=="on"){
+if(typeof (v)=="string"){
+v=new Function(v);
+}
+elem[k]=v;
+}else{
+elem.setAttribute(k,v);
+}
+}
+}
+}else{
+var _343=self.attributeArray.renames;
+for(k in _341){
+v=_341[k];
+var _344=_343[k];
+if(k=="style"&&typeof (v)=="string"){
+elem.style.cssText=v;
+}else{
+if(typeof (_344)=="string"){
+elem[_344]=v;
+}else{
+if(typeof (elem[k])=="object"&&typeof (v)=="object"){
+_342(elem[k],v);
+}else{
+if(k.substring(0,2)=="on"){
+if(typeof (v)=="string"){
+v=new Function(v);
+}
+elem[k]=v;
+}else{
+elem.setAttribute(k,v);
+}
+}
+}
+}
+}
+}
+}
+return elem;
+},appendChildNodes:function(node){
+var elem=node;
+var self=MochiKit.DOM;
+if(typeof (node)=="string"){
+elem=self.getElement(node);
+}
+var _345=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
+var _346=MochiKit.Base.concat;
+while(_345.length){
+var n=_345.shift();
+if(typeof (n)=="undefined"||n===null){
+}else{
+if(typeof (n.nodeType)=="number"){
+elem.appendChild(n);
+}else{
+_345=_346(n,_345);
+}
+}
+}
+return elem;
+},replaceChildNodes:function(node){
+var elem=node;
+var self=MochiKit.DOM;
+if(typeof (node)=="string"){
+elem=self.getElement(node);
+arguments[0]=elem;
+}
+var _347;
+while((_347=elem.firstChild)){
+elem.removeChild(_347);
+}
+if(arguments.length<2){
+return elem;
+}else{
+return self.appendChildNodes.apply(this,arguments);
+}
+},createDOM:function(name,_348){
+var elem;
+var self=MochiKit.DOM;
+if(typeof (name)=="string"){
+if(_348&&"name" in _348&&!self.attributeArray.compliant){
+name=("<"+name+" name=\""+self.escapeHTML(_348.name)+"\">");
+}
+elem=self._document.createElement(name);
+}else{
+elem=name;
+}
+if(_348){
+self.updateNodeAttributes(elem,_348);
+}
+if(arguments.length<=2){
+return elem;
+}else{
+var args=MochiKit.Base.extend([elem],arguments,2);
+return self.appendChildNodes.apply(this,args);
+}
+},createDOMFunc:function(){
+var m=MochiKit.Base;
+return m.partial.apply(this,m.extend([MochiKit.DOM.createDOM],arguments));
+},swapDOM:function(dest,src){
+var self=MochiKit.DOM;
+dest=self.getElement(dest);
+var _351=dest.parentNode;
+if(src){
+src=self.getElement(src);
+_351.replaceChild(src,dest);
+}else{
+_351.removeChild(dest);
+}
+return src;
+},getElement:function(id){
+var self=MochiKit.DOM;
+if(arguments.length==1){
+return ((typeof (id)=="string")?self._document.getElementById(id):id);
+}else{
+return MochiKit.Base.map(self.getElement,arguments);
+}
+},computedStyle:function(_353,_354,_355){
+if(arguments.length==2){
+_355=_354;
+}
+var self=MochiKit.DOM;
+var el=self.getElement(_353);
+var _357=self._document;
+if(!el||el==_357){
+return undefined;
+}
+if(el.currentStyle){
+return el.currentStyle[_354];
+}
+if(typeof (_357.defaultView)=="undefined"){
+return undefined;
+}
+if(_357.defaultView===null){
+return undefined;
+}
+var _358=_357.defaultView.getComputedStyle(el,null);
+if(typeof (_358)=="undefined"||_358===null){
+return undefined;
+}
+return _358.getPropertyValue(_355);
+},getElementsByTagAndClassName:function(_359,_360,_361){
+var self=MochiKit.DOM;
+if(typeof (_359)=="undefined"||_359===null){
+_359="*";
+}
+if(typeof (_361)=="undefined"||_361===null){
+_361=self._document;
+}
+_361=self.getElement(_361);
+var _362=(_361.getElementsByTagName(_359)||self._document.all);
+if(typeof (_360)=="undefined"||_360===null){
+return MochiKit.Base.extend(null,_362);
+}
+var _363=[];
+for(var i=0;i<_362.length;i++){
+var _364=_362[i];
+var _365=_364.className.split(" ");
+for(var j=0;j<_365.length;j++){
+if(_365[j]==_360){
+_363.push(_364);
+break;
+}
+}
+}
+return _363;
+},_newCallStack:function(path,once){
+var rval=function(){
+var _368=arguments.callee.callStack;
+for(var i=0;i<_368.length;i++){
+if(_368[i].apply(this,arguments)===false){
+break;
+}
+}
+if(once){
+try{
+this[path]=null;
+}
+catch(e){
+}
+}
+};
+rval.callStack=[];
+return rval;
+},addToCallStack:function(_369,path,func,once){
+var self=MochiKit.DOM;
+var _370=_369[path];
+var _371=_370;
+if(!(typeof (_370)=="function"&&typeof (_370.callStack)=="object"&&_370.callStack!==null)){
+_371=self._newCallStack(path,once);
+if(typeof (_370)=="function"){
+_371.callStack.push(_370);
+}
+_369[path]=_371;
+}
+_371.callStack.push(func);
+},addLoadEvent:function(func){
+var self=MochiKit.DOM;
+self.addToCallStack(self._window,"onload",func,true);
+},focusOnLoad:function(_372){
+var self=MochiKit.DOM;
+self.addLoadEvent(function(){
+_372=self.getElement(_372);
+if(_372){
+_372.focus();
+}
+});
+},setElementClass:function(_373,_374){
+var self=MochiKit.DOM;
+var obj=self.getElement(_373);
+if(self.attributeArray.compliant){
+obj.setAttribute("class",_374);
+}else{
+obj.setAttribute("className",_374);
+}
+},toggleElementClass:function(_375){
+var self=MochiKit.DOM;
+for(var i=1;i<arguments.length;i++){
+var obj=self.getElement(arguments[i]);
+if(!self.addElementClass(obj,_375)){
+self.removeElementClass(obj,_375);
+}
+}
+},addElementClass:function(_376,_377){
+var self=MochiKit.DOM;
+var obj=self.getElement(_376);
+var cls=obj.className;
+if(cls.length===0){
+self.setElementClass(obj,_377);
+return true;
+}
+if(cls==_377){
+return false;
+}
+var _379=obj.className.split(" ");
+for(var i=0;i<_379.length;i++){
+if(_379[i]==_377){
+return false;
+}
+}
+self.setElementClass(obj,cls+" "+_377);
+return true;
+},removeElementClass:function(_380,_381){
+var self=MochiKit.DOM;
+var obj=self.getElement(_380);
+var cls=obj.className;
+if(cls.length===0){
+return false;
+}
+if(cls==_381){
+self.setElementClass(obj,"");
+return true;
+}
+var _382=obj.className.split(" ");
+for(var i=0;i<_382.length;i++){
+if(_382[i]==_381){
+_382.splice(i,1);
+self.setElementClass(obj,_382.join(" "));
+return true;
+}
+}
+return false;
+},swapElementClass:function(_383,_384,_385){
+var obj=MochiKit.DOM.getElement(_383);
+var res=MochiKit.DOM.removeElementClass(obj,_384);
+if(res){
+MochiKit.DOM.addElementClass(obj,_385);
+}
+return res;
+},hasElementClass:function(_386,_387){
+var obj=MochiKit.DOM.getElement(_386);
+var _388=obj.className.split(" ");
+for(var i=1;i<arguments.length;i++){
+var good=false;
+for(var j=0;j<_388.length;j++){
+if(_388[j]==arguments[i]){
+good=true;
+break;
+}
+}
+if(!good){
+return false;
+}
+}
+return true;
+},escapeHTML:function(s){
+return s.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
+},toHTML:function(dom){
+return MochiKit.DOM.emitHTML(dom).join("");
+},emitHTML:function(dom,lst){
+if(typeof (lst)=="undefined"||lst===null){
+lst=[];
+}
+var _391=[dom];
+var self=MochiKit.DOM;
+var _392=self.escapeHTML;
+var _393=self.attributeArray;
+while(_391.length){
+dom=_391.pop();
+if(typeof (dom)=="string"){
+lst.push(dom);
+}else{
+if(dom.nodeType==1){
+lst.push("<"+dom.nodeName.toLowerCase());
+var _394=[];
+var _395=_393(dom);
+for(var i=0;i<_395.length;i++){
+var a=_395[i];
+_394.push([" ",a.name,"=\"",_392(a.value),"\""]);
+}
+_394.sort();
+for(i=0;i<_394.length;i++){
+var _396=_394[i];
+for(var j=0;j<_396.length;j++){
+lst.push(_396[j]);
+}
+}
+if(dom.hasChildNodes()){
+lst.push(">");
+_391.push("</"+dom.nodeName.toLowerCase()+">");
+var _397=dom.childNodes;
+for(i=_397.length-1;i>=0;i--){
+_391.push(_397[i]);
+}
+}else{
+lst.push("/>");
+}
+}else{
+if(dom.nodeType==3){
+lst.push(_392(dom.nodeValue));
+}
+}
+}
+}
+return lst;
+},setDisplayForElement:function(_398,_399){
+var m=MochiKit.Base;
+var _400=m.extend(null,arguments,1);
+MochiKit.Iter.forEach(m.filter(null,m.map(MochiKit.DOM.getElement,_400)),function(_399){
+_399.style.display=_398;
+});
+},scrapeText:function(node,_401){
+var rval=[];
+(function(node){
+var cn=node.childNodes;
+if(cn){
+for(var i=0;i<cn.length;i++){
+arguments.callee.call(this,cn[i]);
+}
+}
+var _403=node.nodeValue;
+if(typeof (_403)=="string"){
+rval.push(_403);
+}
+})(MochiKit.DOM.getElement(node));
+if(_401){
+return rval;
+}else{
+return rval.join("");
+}
+},__new__:function(win){
+var m=MochiKit.Base;
+this._document=document;
+this._window=win;
+this.domConverters=new m.AdapterRegistry();
+var _404=this._document.createElement("span");
+var _405;
+if(_404&&_404.attributes&&_404.attributes.length>0){
+var _406=m.filter;
+_405=function(node){
+return _406(_405.ignoreAttrFilter,node.attributes);
+};
+_405.ignoreAttr={};
+MochiKit.Iter.forEach(_404.attributes,function(a){
+_405.ignoreAttr[a.name]=a.value;
+});
+_405.ignoreAttrFilter=function(a){
+return (_405.ignoreAttr[a.name]!=a.value);
+};
+_405.compliant=false;
+_405.renames={"class":"className","checked":"defaultChecked","usemap":"useMap","for":"htmlFor"};
+}else{
+_405=function(node){
+return node.attributes;
+};
+_405.compliant=true;
+_405.renames={};
+}
+this.attributeArray=_405;
+var _407=this.createDOMFunc;
+this.UL=_407("ul");
+this.OL=_407("ol");
+this.LI=_407("li");
+this.TD=_407("td");
+this.TR=_407("tr");
+this.TBODY=_407("tbody");
+this.THEAD=_407("thead");
+this.TFOOT=_407("tfoot");
+this.TABLE=_407("table");
+this.TH=_407("th");
+this.INPUT=_407("input");
+this.SPAN=_407("span");
+this.A=_407("a");
+this.DIV=_407("div");
+this.IMG=_407("img");
+this.BUTTON=_407("button");
+this.TT=_407("tt");
+this.PRE=_407("pre");
+this.H1=_407("h1");
+this.H2=_407("h2");
+this.H3=_407("h3");
+this.BR=_407("br");
+this.HR=_407("hr");
+this.LABEL=_407("label");
+this.TEXTAREA=_407("textarea");
+this.FORM=_407("form");
+this.P=_407("p");
+this.SELECT=_407("select");
+this.OPTION=_407("option");
+this.OPTGROUP=_407("optgroup");
+this.LEGEND=_407("legend");
+this.FIELDSET=_407("fieldset");
+this.STRONG=_407("strong");
+this.CANVAS=_407("canvas");
+this.hideElement=m.partial(this.setDisplayForElement,"none");
+this.showElement=m.partial(this.setDisplayForElement,"block");
+this.removeElement=this.swapDOM;
+this.$=this.getElement;
+this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
+m.nameFunctions(this);
+}});
 MochiKit.DOM.__new__(this);
-
-//
-// XXX: Internet Explorer blows
-//
-withWindow = MochiKit.DOM.withWindow;
-withDocument = MochiKit.DOM.withDocument;
-
-MochiKit.Base._exportSymbols(this, MochiKit.DOM);
-
-/***
-
-MochiKit.LoggingPane 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito.  All rights Reserved.
-
-***/
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.LoggingPane');
-    dojo.require('MochiKit.Logging');
-    dojo.require('MochiKit.Base');
+withWindow=MochiKit.DOM.withWindow;
+withDocument=MochiKit.DOM.withDocument;
+MochiKit.Base._exportSymbols(this,MochiKit.DOM);
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.LoggingPane");
+dojo.require("MochiKit.Logging");
+dojo.require("MochiKit.Base");
 }
-
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use("MochiKit.Logging", []);
-    JSAN.use("MochiKit.Base", []);
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Logging",[]);
+JSAN.use("MochiKit.Base",[]);
 }
-
-try {
-    if (typeof(MochiKit.Base) == 'undefined' || typeof(MochiKit.Logging) == 'undefined') {
-        throw "";
-    }
-} catch (e) {
-    throw "MochiKit.LoggingPane depends on MochiKit.Base and MochiKit.Logging!";
+try{
+if(typeof (MochiKit.Base)=="undefined"||typeof (MochiKit.Logging)=="undefined"){
+throw "";
 }
-
-if (typeof(MochiKit.LoggingPane) == 'undefined') {
-    MochiKit.LoggingPane = {};
 }
-
-MochiKit.LoggingPane.NAME = "MochiKit.LoggingPane";
-MochiKit.LoggingPane.VERSION = "1.3";
-MochiKit.LoggingPane.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+catch(e){
+throw "MochiKit.LoggingPane depends on MochiKit.Base and MochiKit.Logging!";
+}
+if(typeof (MochiKit.LoggingPane)=="undefined"){
+MochiKit.LoggingPane={};
+}
+MochiKit.LoggingPane.NAME="MochiKit.LoggingPane";
+MochiKit.LoggingPane.VERSION="1.3";
+MochiKit.LoggingPane.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
 };
-
-MochiKit.LoggingPane.toString = function () {
-    return this.__repr__();
+MochiKit.LoggingPane.toString=function(){
+return this.__repr__();
 };
-
-MochiKit.LoggingPane.createLoggingPane = function (inline/* = false */) {
-    var m = MochiKit.LoggingPane;
-    inline = !(!inline);
-    if (m._loggingPane && m._loggingPane.inline != inline) {
-        m._loggingPane.closePane();
-        m._loggingPane = null;
-    }
-    if (!m._loggingPane || m._loggingPane.closed) {
-        m._loggingPane = new m.LoggingPane(inline, MochiKit.Logging.logger);
-    }
-    return m._loggingPane;
+MochiKit.LoggingPane.createLoggingPane=function(_408){
+var m=MochiKit.LoggingPane;
+_408=!(!_408);
+if(m._loggingPane&&m._loggingPane.inline!=_408){
+m._loggingPane.closePane();
+m._loggingPane=null;
+}
+if(!m._loggingPane||m._loggingPane.closed){
+m._loggingPane=new m.LoggingPane(_408,MochiKit.Logging.logger);
+}
+return m._loggingPane;
 };
-
-MochiKit.LoggingPane.LoggingPane = function (inline/* = false */, logger/* = MochiKit.Logging.logger */) {
-    /* Use a div if inline, pop up a window if not */
-    /* Create the elements */
-    if (typeof(logger) == "undefined" || logger == null) {
-        logger = MochiKit.Logging.logger;
-    }
-    this.logger = logger;
-    var update = MochiKit.Base.update;
-    var updatetree = MochiKit.Base.updatetree;
-    var bind = MochiKit.Base.bind;
-    var clone = MochiKit.Base.clone;
-    var win = window;
-    var uid = "_MochiKit_LoggingPane";
-    if (typeof(MochiKit.DOM) != "undefined") {
-        win = MochiKit.DOM.currentWindow();
-    }
-    if (!inline) {
-        // name the popup with the base URL for uniqueness
-        var url = win.location.href.split("?")[0].replace(/[:\/.><&]/g, "_");
-        var name = uid + "_" + url;
-        var nwin = win.open("", name, "dependent,resizable,height=200");
-        if (!nwin) {
-            alert("Not able to open debugging window due to pop-up blocking.");
-            return undefined;
-        }
-        nwin.document.write(
-            '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" '
-            + '"http://www.w3.org/TR/html4/loose.dtd">'
-            + '<html><head><title>[MochiKit.LoggingPane]</title></head>'
-            + '<body></body></html>'
-        );
-        nwin.document.close();
-        nwin.document.title += ' ' + win.document.title;
-        win = nwin;
-    }
-    var doc = win.document;
-    this.doc = doc;
-
-    // Connect to the debug pane if it already exists (i.e. in a window orphaned by the page being refreshed)
-    var debugPane = doc.getElementById(uid);
-    var existing_pane = !!debugPane;
-    if (debugPane && typeof(debugPane.loggingPane) != "undefined") {
-        debugPane.loggingPane.logger = this.logger;
-        debugPane.loggingPane.buildAndApplyFilter();
-        return debugPane.loggingPane;
-    }
-
-    if (existing_pane) {
-        // clear any existing contents
-        var child;
-        while ((child = debugPane.firstChild)) {
-            debugPane.removeChild(child);
-        }
-    } else {
-        debugPane = doc.createElement("div");
-        debugPane.id = uid;
-    }
-    debugPane.loggingPane = this;
-    var levelFilterField = doc.createElement("input");
-    var infoFilterField = doc.createElement("input");
-    var filterButton = doc.createElement("button");
-    var loadButton = doc.createElement("button");
-    var clearButton = doc.createElement("button");
-    var closeButton = doc.createElement("button");
-    var logPaneArea = doc.createElement("div");
-    var logPane = doc.createElement("div");
-
-    /* Set up the functions */
-    var listenerId = uid + "_Listener";
-    this.colorTable = clone(this.colorTable);
-    var messages = [];
-    var messageFilter = null;
-
-    var messageLevel = function (msg) {
-        var level = msg.level;
-        if (typeof(level) == "number") {
-            level = MochiKit.Logging.LogLevel[level];
-        }
-        return level;
-    };
-
-    var messageText = function (msg) {
-        return msg.info.join(" ");
-    };
-
-    var addMessageText = bind(function (msg) {
-        var level = messageLevel(msg);
-        var text = messageText(msg);
-        var c = this.colorTable[level];
-        var p = doc.createElement("span");
-        p.className = "MochiKit-LogMessage MochiKit-LogLevel-" + level;
-        p.style.cssText = "margin: 0px; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; white-space: pre-wrap; white-space: pre-line; word-wrap: break-word; wrap-option: emergency; color: " + c;
-        p.appendChild(doc.createTextNode(level + ": " + text));
-        logPane.appendChild(p);
-        logPane.appendChild(doc.createElement("br"));
-        if (logPaneArea.offsetHeight > logPaneArea.scrollHeight) {
-            logPaneArea.scrollTop = 0;
-        } else {
-            logPaneArea.scrollTop = logPaneArea.scrollHeight;
-        }
-    }, this);
-
-    var addMessage = function (msg) {
-        messages[messages.length] = msg;
-        addMessageText(msg);
-    };
-
-    var buildMessageFilter = function () {
-        var levelre, infore;
-        try {
-            /* Catch any exceptions that might arise due to invalid regexes */
-            levelre = new RegExp(levelFilterField.value);
-            infore = new RegExp(infoFilterField.value);
-        } catch(e) {
-            /* If there was an error with the regexes, do no filtering */
-            logDebug("Error in filter regex: " + e.message);
-            return null;
-        }
-
-        return function (msg) {
-            return (
-                levelre.test(messageLevel(msg)) &&
-                infore.test(messageText(msg))
-            );
-        };
-    }
-
-    var clearMessagePane = function () {
-        while (logPane.firstChild) {
-            logPane.removeChild(logPane.firstChild);
-        }
-    };
-
-    var clearMessages = function () {
-        messages = [];
-        clearMessagePane();
-    }
-
-    var closePane = bind(function () {
-        if (this.closed) {
-            return;
-        }
-        this.closed = true;
-        if (MochiKit.LoggingPane._loggingPane == this) {
-            MochiKit.LoggingPane._loggingPane = null;
-        }
-        this.logger.removeListener(listenerId);
-
-        debugPane.loggingPane = null;
-
-        if (inline) {
-            debugPane.parentNode.removeChild(debugPane);
-        } else {
-            this.win.close();
-        }
-    }, this);
-
-    var filterMessages = function () {
-        clearMessagePane();
-
-        for (var i = 0; i < messages.length; i++) {
-            var msg = messages[i];
-            if (messageFilter == null || messageFilter(msg)) {
-                addMessageText(msg);
-            }
-        }
-    };
-
-    this.buildAndApplyFilter = function () {
-        messageFilter = buildMessageFilter();
-
-        filterMessages();
-
-        this.logger.removeListener(listenerId);
-        this.logger.addListener(listenerId, messageFilter, addMessage);
-    };
-
-
-    var loadMessages = bind(function () {
-        messages = this.logger.getMessages();
-        filterMessages();
-    }, this);
-
-    var filterOnEnter = bind(function (event) {
-        event = event || window.event;
-        key = event.which || event.keyCode;
-        if (key == 13) {
-            this.buildAndApplyFilter();
-        }
-    }, this);
-
-    /* Create the debug pane */
-    var style = "display: block; left: 0px; bottom: 0px; position: fixed; width: 100%; background-color: white; font: " + this.logFont;
-    if (inline) {
-        style += "; height: 10em; border-top: 2px solid black";
-    } else {
-        style += "; height: 100%;";
-    }
-    debugPane.style.cssText = style;
-
-    if (!existing_pane) {
-        doc.body.appendChild(debugPane);
-    }
-
-    /* Create the filter fields */
-    style = {"cssText": "width: 33%; display: inline; font: " + this.logFont};
-
-    updatetree(levelFilterField, {
-        "value": "FATAL|ERROR|WARNING|INFO|DEBUG",
-        "onkeypress": filterOnEnter,
-        "style": style
-    });
-    debugPane.appendChild(levelFilterField);
-
-    updatetree(infoFilterField, {
-        "value": ".*",
-        "onkeypress": filterOnEnter,
-        "style": style
-    });
-    debugPane.appendChild(infoFilterField);
-
-    /* Create the buttons */
-    style = "width: 8%; display:inline; font: " + this.logFont;
-
-    filterButton.appendChild(doc.createTextNode("Filter"));
-    filterButton.onclick = bind("buildAndApplyFilter", this);
-    filterButton.style.cssText = style;
-    debugPane.appendChild(filterButton);
-
-    loadButton.appendChild(doc.createTextNode("Load"));
-    loadButton.onclick = loadMessages;
-    loadButton.style.cssText = style;
-    debugPane.appendChild(loadButton);
-
-    clearButton.appendChild(doc.createTextNode("Clear"));
-    clearButton.onclick = clearMessages;
-    clearButton.style.cssText = style;
-    debugPane.appendChild(clearButton);
-
-    closeButton.appendChild(doc.createTextNode("Close"));
-    closeButton.onclick = closePane;
-    closeButton.style.cssText = style;
-    debugPane.appendChild(closeButton);
-
-    /* Create the logging pane */
-    logPaneArea.style.cssText = "overflow: auto; width: 100%";
-    logPane.style.cssText = "width: 100%; height: " + (inline ? "8em" : "100%");
-
-    logPaneArea.appendChild(logPane);
-    debugPane.appendChild(logPaneArea);
-
-    this.buildAndApplyFilter();
-    loadMessages();
-
-    if (inline) {
-        this.win = undefined;
-    } else {
-        this.win = win;
-    }
-    this.inline = inline;
-    this.closePane = closePane;
-    this.closed = false;
-
-    return this;
+MochiKit.LoggingPane.LoggingPane=function(_409,_410){
+if(typeof (_410)=="undefined"||_410==null){
+_410=MochiKit.Logging.logger;
+}
+this.logger=_410;
+var _411=MochiKit.Base.update;
+var _412=MochiKit.Base.updatetree;
+var bind=MochiKit.Base.bind;
+var _413=MochiKit.Base.clone;
+var win=window;
+var uid="_MochiKit_LoggingPane";
+if(typeof (MochiKit.DOM)!="undefined"){
+win=MochiKit.DOM.currentWindow();
+}
+if(!_409){
+var url=win.location.href.split("?")[0].replace(/[:\/.><&]/g,"_");
+var name=uid+"_"+url;
+var nwin=win.open("",name,"dependent,resizable,height=200");
+if(!nwin){
+alert("Not able to open debugging window due to pop-up blocking.");
+return undefined;
+}
+nwin.document.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" "+"\"http://www.w3.org/TR/html4/loose.dtd\">"+"<html><head><title>[MochiKit.LoggingPane]</title></head>"+"<body></body></html>");
+nwin.document.close();
+nwin.document.title+=" "+win.document.title;
+win=nwin;
+}
+var doc=win.document;
+this.doc=doc;
+var _416=doc.getElementById(uid);
+var _417=!!_416;
+if(_416&&typeof (_416.loggingPane)!="undefined"){
+_416.loggingPane.logger=this.logger;
+_416.loggingPane.buildAndApplyFilter();
+return _416.loggingPane;
+}
+if(_417){
+var _418;
+while((_418=_416.firstChild)){
+_416.removeChild(_418);
+}
+}else{
+_416=doc.createElement("div");
+_416.id=uid;
+}
+_416.loggingPane=this;
+var _419=doc.createElement("input");
+var _420=doc.createElement("input");
+var _421=doc.createElement("button");
+var _422=doc.createElement("button");
+var _423=doc.createElement("button");
+var _424=doc.createElement("button");
+var _425=doc.createElement("div");
+var _426=doc.createElement("div");
+var _427=uid+"_Listener";
+this.colorTable=_413(this.colorTable);
+var _428=[];
+var _429=null;
+var _430=function(msg){
+var _431=msg.level;
+if(typeof (_431)=="number"){
+_431=MochiKit.Logging.LogLevel[_431];
+}
+return _431;
 };
-
-MochiKit.LoggingPane.LoggingPane.prototype = {
-    "logFont": "8pt Verdana,sans-serif",
-    "colorTable": {
-        "ERROR": "red",
-        "FATAL": "darkred",
-        "WARNING": "blue",
-        "INFO": "black",
-        "DEBUG": "green"
-    }
+var _432=function(msg){
+return msg.info.join(" ");
 };
-
-
-MochiKit.LoggingPane.EXPORT_OK = [
-    "LoggingPane"
-];
-
-MochiKit.LoggingPane.EXPORT = [
-    "createLoggingPane"
-];
-
-MochiKit.LoggingPane.__new__ = function () {
-    this.EXPORT_TAGS = {
-        ":common": this.EXPORT,
-        ":all": MochiKit.Base.concat(this.EXPORT, this.EXPORT_OK)
-    };
-
-    MochiKit.Base.nameFunctions(this);
-
-    MochiKit.LoggingPane._loggingPane = null;
-
+var _433=bind(function(msg){
+var _434=_430(msg);
+var text=_432(msg);
+var c=this.colorTable[_434];
+var p=doc.createElement("span");
+p.className="MochiKit-LogMessage MochiKit-LogLevel-"+_434;
+p.style.cssText="margin: 0px; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; white-space: pre-wrap; white-space: pre-line; word-wrap: break-word; wrap-option: emergency; color: "+c;
+p.appendChild(doc.createTextNode(_434+": "+text));
+_426.appendChild(p);
+_426.appendChild(doc.createElement("br"));
+if(_425.offsetHeight>_425.scrollHeight){
+_425.scrollTop=0;
+}else{
+_425.scrollTop=_425.scrollHeight;
+}
+},this);
+var _436=function(msg){
+_428[_428.length]=msg;
+_433(msg);
 };
-
+var _437=function(){
+var _438,infore;
+try{
+_438=new RegExp(_419.value);
+infore=new RegExp(_420.value);
+}
+catch(e){
+logDebug("Error in filter regex: "+e.message);
+return null;
+}
+return function(msg){
+return (_438.test(_430(msg))&&infore.test(_432(msg)));
+};
+};
+var _439=function(){
+while(_426.firstChild){
+_426.removeChild(_426.firstChild);
+}
+};
+var _440=function(){
+_428=[];
+_439();
+};
+var _441=bind(function(){
+if(this.closed){
+return;
+}
+this.closed=true;
+if(MochiKit.LoggingPane._loggingPane==this){
+MochiKit.LoggingPane._loggingPane=null;
+}
+this.logger.removeListener(_427);
+_416.loggingPane=null;
+if(_409){
+_416.parentNode.removeChild(_416);
+}else{
+this.win.close();
+}
+},this);
+var _442=function(){
+_439();
+for(var i=0;i<_428.length;i++){
+var msg=_428[i];
+if(_429==null||_429(msg)){
+_433(msg);
+}
+}
+};
+this.buildAndApplyFilter=function(){
+_429=_437();
+_442();
+this.logger.removeListener(_427);
+this.logger.addListener(_427,_429,_436);
+};
+var _443=bind(function(){
+_428=this.logger.getMessages();
+_442();
+},this);
+var _444=bind(function(_445){
+_445=_445||window.event;
+key=_445.which||_445.keyCode;
+if(key==13){
+this.buildAndApplyFilter();
+}
+},this);
+var _446="display: block; left: 0px; bottom: 0px; position: fixed; width: 100%; background-color: white; font: "+this.logFont;
+if(_409){
+_446+="; height: 10em; border-top: 2px solid black";
+}else{
+_446+="; height: 100%;";
+}
+_416.style.cssText=_446;
+if(!_417){
+doc.body.appendChild(_416);
+}
+_446={"cssText":"width: 33%; display: inline; font: "+this.logFont};
+_412(_419,{"value":"FATAL|ERROR|WARNING|INFO|DEBUG","onkeypress":_444,"style":_446});
+_416.appendChild(_419);
+_412(_420,{"value":".*","onkeypress":_444,"style":_446});
+_416.appendChild(_420);
+_446="width: 8%; display:inline; font: "+this.logFont;
+_421.appendChild(doc.createTextNode("Filter"));
+_421.onclick=bind("buildAndApplyFilter",this);
+_421.style.cssText=_446;
+_416.appendChild(_421);
+_422.appendChild(doc.createTextNode("Load"));
+_422.onclick=_443;
+_422.style.cssText=_446;
+_416.appendChild(_422);
+_423.appendChild(doc.createTextNode("Clear"));
+_423.onclick=_440;
+_423.style.cssText=_446;
+_416.appendChild(_423);
+_424.appendChild(doc.createTextNode("Close"));
+_424.onclick=_441;
+_424.style.cssText=_446;
+_416.appendChild(_424);
+_425.style.cssText="overflow: auto; width: 100%";
+_426.style.cssText="width: 100%; height: "+(_409?"8em":"100%");
+_425.appendChild(_426);
+_416.appendChild(_425);
+this.buildAndApplyFilter();
+_443();
+if(_409){
+this.win=undefined;
+}else{
+this.win=win;
+}
+this.inline=_409;
+this.closePane=_441;
+this.closed=false;
+return this;
+};
+MochiKit.LoggingPane.LoggingPane.prototype={"logFont":"8pt Verdana,sans-serif","colorTable":{"ERROR":"red","FATAL":"darkred","WARNING":"blue","INFO":"black","DEBUG":"green"}};
+MochiKit.LoggingPane.EXPORT_OK=["LoggingPane"];
+MochiKit.LoggingPane.EXPORT=["createLoggingPane"];
+MochiKit.LoggingPane.__new__=function(){
+this.EXPORT_TAGS={":common":this.EXPORT,":all":MochiKit.Base.concat(this.EXPORT,this.EXPORT_OK)};
+MochiKit.Base.nameFunctions(this);
+MochiKit.LoggingPane._loggingPane=null;
+};
 MochiKit.LoggingPane.__new__();
-
-MochiKit.Base._exportSymbols(this, MochiKit.LoggingPane);
-
-/***
-
-MochiKit.Color 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito and others.  All rights Reserved.
-
-***/
-
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.Color');
-    dojo.require('MochiKit.Base');
+MochiKit.Base._exportSymbols(this,MochiKit.LoggingPane);
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Color");
+dojo.require("MochiKit.Base");
 }
-
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use("MochiKit.Base", []);
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Base",[]);
 }
-
-try {
-    if (typeof(MochiKit.Base) == 'undefined') {
-        throw "";
-    }
-} catch (e) {
-    throw "MochiKit.Color depends on MochiKit.Base";
+try{
+if(typeof (MochiKit.Base)=="undefined"){
+throw "";
 }
-
-if (typeof(MochiKit.Color) == "undefined") {
-    MochiKit.Color = {};
 }
-
-MochiKit.Color.NAME = "MochiKit.Color";
-MochiKit.Color.VERSION = "1.3";
-
-MochiKit.Color.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+catch(e){
+throw "MochiKit.Color depends on MochiKit.Base";
+}
+if(typeof (MochiKit.Color)=="undefined"){
+MochiKit.Color={};
+}
+MochiKit.Color.NAME="MochiKit.Color";
+MochiKit.Color.VERSION="1.3";
+MochiKit.Color.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
 };
-
-MochiKit.Color.toString = function () {
-    return this.__repr__();
+MochiKit.Color.toString=function(){
+return this.__repr__();
 };
-
-
-MochiKit.Color.Color = function (red, green, blue, alpha) {
-    if (typeof(alpha) == 'undefined' || alpha == null) {
-        alpha = 1.0;
-    }
-    this.rgb = {
-        r: red,
-        g: green,
-        b: blue,
-        a: alpha
-    };
+MochiKit.Color.Color=function(red,_448,blue,_450){
+if(typeof (_450)=="undefined"||_450==null){
+_450=1;
+}
+this.rgb={r:red,g:_448,b:blue,a:_450};
 };
-
-
-// Prototype methods
-MochiKit.Color.Color.prototype = {
-
-    __class__: MochiKit.Color.Color,
-
-    colorWithAlpha: function (alpha) {
-        var rgb = this.rgb;
-        var m = MochiKit.Color;
-        return m.Color.fromRGB(rgb.r, rgb.g, rgb.b, alpha);
-    },
-
-    colorWithHue: function (hue) {
-        // get an HSL model, and set the new hue...
-        var hsl = this.asHSL();
-        hsl.h = hue;
-        var m = MochiKit.Color;
-        // convert back to RGB...
-        return m.Color.fromHSL(hsl);
-    },
-
-    colorWithSaturation: function (saturation) {
-        // get an HSL model, and set the new hue...
-        var hsl = this.asHSL();
-        hsl.s = saturation;
-        var m = MochiKit.Color;
-        // convert back to RGB...
-        return m.Color.fromHSL(hsl);
-    },
-
-    colorWithLightness: function (lightness) {
-        // get an HSL model, and set the new hue...
-        var hsl = this.asHSL();
-        hsl.l = lightness;
-        var m = MochiKit.Color;
-        // convert back to RGB...
-        return m.Color.fromHSL(hsl);
-    },
-
-    darkerColorWithLevel: function (level) {
-        var hsl  = this.asHSL();
-        hsl.l = Math.max(hsl.l - level, 0);
-        var m = MochiKit.Color;
-        return m.Color.fromHSL(hsl);
-    },
-
-    lighterColorWithLevel: function (level) {
-        var hsl  = this.asHSL();
-        hsl.l = Math.min(hsl.l + level, 1);
-        var m = MochiKit.Color;
-        return m.Color.fromHSL(hsl);
-    },
-
-    blendedColor: function (other, /* optional */ fraction) {
-        if (typeof(fraction) == 'undefined' || fraction == null) {
-            fraction = 0.5;
-        }
-        var sf = 1.0 - fraction;
-        var s = this.rgb;
-        var d = other.rgb;
-        var df = fraction;
-        return MochiKit.Color.Color.fromRGB(
-            (s.r * sf) + (d.r * df),
-            (s.g * sf) + (d.g * df),
-            (s.b * sf) + (d.b * df),
-            (s.a * sf) + (d.a * df)
-        );
-    },
-
-    compareRGB: function (other) {
-        var a = this.asRGB();
-        var b = other.asRGB();
-        return MochiKit.Base.compare(
-            [a.r, a.g, a.b, a.a],
-            [b.r, b.g, b.b, b.a]
-        );
-    },
-
-    isLight: function () {
-        return this.asHSL().b > 0.5;
-    },
-
-    isDark: function () {
-        return (!this.isLight());
-    },
-
-    toHSLString: function () {
-        var c = this.asHSL();
-        var ccc = MochiKit.Color.clampColorComponent;
-        var rval = this._hslString;
-        if (!rval) {
-            var mid = (
-                ccc(c.h, 360).toFixed(0)
-                + "," + ccc(c.s, 100).toPrecision(4) + "%"
-                + "," + ccc(c.l, 100).toPrecision(4) + "%"
-            );
-            var a = c.a;
-            if (a >= 1) {
-                a = 1;
-                rval = "hsl(" + mid + ")";
-            } else {
-                if (a <= 0) {
-                    a = 0;
-                }
-                rval = "hsla(" + mid + "," + a + ")";
-            }
-            this._hslString = rval;
-        }
-        return rval;
-    },
-
-    toRGBString: function () {
-        var c = this.rgb;
-        var ccc = MochiKit.Color.clampColorComponent;
-        var rval = this._rgbString;
-        if (!rval) {
-            var mid = (
-                ccc(c.r, 255).toFixed(0)
-                + "," + ccc(c.g, 255).toFixed(0)
-                + "," + ccc(c.b, 255).toFixed(0)
-            );
-            if (c.a != 1) {
-                rval = "rgba(" + mid + "," + c.a + ")";
-            } else {
-                rval = "rgb(" + mid + ")";
-            }
-            this._rgbString = rval;
-        }
-        return rval;
-    },
-
-    asRGB: function () {
-        return MochiKit.Base.clone(this.rgb);
-    },
-
-    toHexString: function () {
-        var m = MochiKit.Color;
-        var c = this.rgb;
-        var ccc = MochiKit.Color.clampColorComponent;
-        var rval = this._hexString;
-        if (!rval) {
-            rval = ("#" +
-                m.toColorPart(ccc(c.r, 255)) +
-                m.toColorPart(ccc(c.g, 255)) +
-                m.toColorPart(ccc(c.b, 255))
-            );
-            this._hexString = rval;
-        }
-        return rval;
-    },
-
-    asHSV: function () {
-        var hsv = this.hsv;
-        var c = this.rgb;
-        if (typeof(hsv) == 'undefined' || hsv == null) {
-            hsv = MochiKit.Color.rgbToHSV(this.rgb);
-            this.hsv = hsv;
-        }
-        return MochiKit.Base.clone(hsv);
-    },
-
-    asHSL: function () {
-        var hsl = this.hsl;
-        var c = this.rgb;
-        if (typeof(hsl) == 'undefined' || hsl == null) {
-            hsl = MochiKit.Color.rgbToHSL(this.rgb);
-            this.hsl = hsl;
-        }
-        return MochiKit.Base.clone(hsl);
-    },
-
-    toString: function () {
-        return this.toRGBString();
-    },
-
-    repr: function () {
-        var c = this.rgb;
-        var col = [c.r, c.g, c.b, c.a];
-        return this.__class__.NAME + "(" + col.join(", ") + ")";
-    }
-
+MochiKit.Color.Color.prototype={__class__:MochiKit.Color.Color,colorWithAlpha:function(_451){
+var rgb=this.rgb;
+var m=MochiKit.Color;
+return m.Color.fromRGB(rgb.r,rgb.g,rgb.b,_451);
+},colorWithHue:function(hue){
+var hsl=this.asHSL();
+hsl.h=hue;
+var m=MochiKit.Color;
+return m.Color.fromHSL(hsl);
+},colorWithSaturation:function(_455){
+var hsl=this.asHSL();
+hsl.s=_455;
+var m=MochiKit.Color;
+return m.Color.fromHSL(hsl);
+},colorWithLightness:function(_456){
+var hsl=this.asHSL();
+hsl.l=_456;
+var m=MochiKit.Color;
+return m.Color.fromHSL(hsl);
+},darkerColorWithLevel:function(_457){
+var hsl=this.asHSL();
+hsl.l=Math.max(hsl.l-_457,0);
+var m=MochiKit.Color;
+return m.Color.fromHSL(hsl);
+},lighterColorWithLevel:function(_458){
+var hsl=this.asHSL();
+hsl.l=Math.min(hsl.l+_458,1);
+var m=MochiKit.Color;
+return m.Color.fromHSL(hsl);
+},blendedColor:function(_459,_460){
+if(typeof (_460)=="undefined"||_460==null){
+_460=0.5;
+}
+var sf=1-_460;
+var s=this.rgb;
+var d=_459.rgb;
+var df=_460;
+return MochiKit.Color.Color.fromRGB((s.r*sf)+(d.r*df),(s.g*sf)+(d.g*df),(s.b*sf)+(d.b*df),(s.a*sf)+(d.a*df));
+},compareRGB:function(_463){
+var a=this.asRGB();
+var b=_463.asRGB();
+return MochiKit.Base.compare([a.r,a.g,a.b,a.a],[b.r,b.g,b.b,b.a]);
+},isLight:function(){
+return this.asHSL().b>0.5;
+},isDark:function(){
+return (!this.isLight());
+},toHSLString:function(){
+var c=this.asHSL();
+var ccc=MochiKit.Color.clampColorComponent;
+var rval=this._hslString;
+if(!rval){
+var mid=(ccc(c.h,360).toFixed(0)+","+ccc(c.s,100).toPrecision(4)+"%"+","+ccc(c.l,100).toPrecision(4)+"%");
+var a=c.a;
+if(a>=1){
+a=1;
+rval="hsl("+mid+")";
+}else{
+if(a<=0){
+a=0;
+}
+rval="hsla("+mid+","+a+")";
+}
+this._hslString=rval;
+}
+return rval;
+},toRGBString:function(){
+var c=this.rgb;
+var ccc=MochiKit.Color.clampColorComponent;
+var rval=this._rgbString;
+if(!rval){
+var mid=(ccc(c.r,255).toFixed(0)+","+ccc(c.g,255).toFixed(0)+","+ccc(c.b,255).toFixed(0));
+if(c.a!=1){
+rval="rgba("+mid+","+c.a+")";
+}else{
+rval="rgb("+mid+")";
+}
+this._rgbString=rval;
+}
+return rval;
+},asRGB:function(){
+return MochiKit.Base.clone(this.rgb);
+},toHexString:function(){
+var m=MochiKit.Color;
+var c=this.rgb;
+var ccc=MochiKit.Color.clampColorComponent;
+var rval=this._hexString;
+if(!rval){
+rval=("#"+m.toColorPart(ccc(c.r,255))+m.toColorPart(ccc(c.g,255))+m.toColorPart(ccc(c.b,255)));
+this._hexString=rval;
+}
+return rval;
+},asHSV:function(){
+var hsv=this.hsv;
+var c=this.rgb;
+if(typeof (hsv)=="undefined"||hsv==null){
+hsv=MochiKit.Color.rgbToHSV(this.rgb);
+this.hsv=hsv;
+}
+return MochiKit.Base.clone(hsv);
+},asHSL:function(){
+var hsl=this.hsl;
+var c=this.rgb;
+if(typeof (hsl)=="undefined"||hsl==null){
+hsl=MochiKit.Color.rgbToHSL(this.rgb);
+this.hsl=hsl;
+}
+return MochiKit.Base.clone(hsl);
+},toString:function(){
+return this.toRGBString();
+},repr:function(){
+var c=this.rgb;
+var col=[c.r,c.g,c.b,c.a];
+return this.__class__.NAME+"("+col.join(", ")+")";
+}};
+MochiKit.Base.update(MochiKit.Color.Color,{fromRGB:function(red,_468,blue,_469){
+var _470=MochiKit.Color.Color;
+if(arguments.length==1){
+var rgb=red;
+red=rgb.r;
+_468=rgb.g;
+blue=rgb.b;
+if(typeof (rgb.a)=="undefined"){
+_469=undefined;
+}else{
+_469=rgb.a;
+}
+}
+return new _470(red,_468,blue,_469);
+},fromHSL:function(hue,_471,_472,_473){
+var m=MochiKit.Color;
+return m.Color.fromRGB(m.hslToRGB.apply(m,arguments));
+},fromHSV:function(hue,_474,_475,_476){
+var m=MochiKit.Color;
+return m.Color.fromRGB(m.hsvToRGB.apply(m,arguments));
+},fromName:function(name){
+var _477=MochiKit.Color.Color;
+var _478=_477._namedColors[name.toLowerCase()];
+if(typeof (_478)=="string"){
+return _477.fromHexString(_478);
+}else{
+if(name=="transparent"){
+return _477.transparentColor();
+}
+}
+return null;
+},fromString:function(_479){
+var self=MochiKit.Color.Color;
+var _480=_479.substr(0,3);
+if(_480=="rgb"){
+return self.fromRGBString(_479);
+}else{
+if(_480=="hsl"){
+return self.fromHSLString(_479);
+}else{
+if(_479.charAt(0)=="#"){
+return self.fromHexString(_479);
+}
+}
+}
+return self.fromName(_479);
+},fromHexString:function(_481){
+if(_481.charAt(0)=="#"){
+_481=_481.substring(1);
+}
+var _482=[];
+var i,hex;
+if(_481.length==3){
+for(i=0;i<3;i++){
+hex=_481.substr(i,1);
+_482.push(parseInt(hex+hex,16)/255);
+}
+}else{
+for(i=0;i<6;i+=2){
+hex=_481.substr(i,2);
+_482.push(parseInt(hex,16)/255);
+}
+}
+var _483=MochiKit.Color.Color;
+return _483.fromRGB.apply(_483,_482);
+},_fromColorString:function(pre,_485,_486,_487){
+if(_487.indexOf(pre)==0){
+_487=_487.substring(_487.indexOf("(",3)+1,_487.length-1);
+}
+var _488=_487.split(/\s*,\s*/);
+var _489=[];
+for(var i=0;i<_488.length;i++){
+var c=_488[i];
+var val;
+var _490=c.substring(c.length-3);
+if(c.charAt(c.length-1)=="%"){
+val=0.01*parseFloat(c.substring(0,c.length-1));
+}else{
+if(_490=="deg"){
+val=parseFloat(c)/360;
+}else{
+if(_490=="rad"){
+val=parseFloat(c)/(Math.PI*2);
+}else{
+val=_486[i]*parseFloat(c);
+}
+}
+}
+_489.push(val);
+}
+return this[_485].apply(this,_489);
+},fromComputedStyle:function(elem,_491,_492){
+var d=MochiKit.DOM;
+var cls=MochiKit.Color.Color;
+for(elem=d.getElement(elem);elem;elem=elem.parentNode){
+var _493=d.computedStyle.apply(d,arguments);
+if(!_493){
+continue;
+}
+var _494=cls.fromString(_493);
+if(!_494){
+break;
+}
+if(_494.asRGB().a>0){
+return _494;
+}
+}
+return null;
+},fromBackground:function(elem){
+var cls=MochiKit.Color.Color;
+return cls.fromComputedStyle(elem,"backgroundColor","background-color")||cls.whiteColor();
+},fromText:function(elem){
+var cls=MochiKit.Color.Color;
+return cls.fromComputedStyle(elem,"color","color")||cls.blackColor();
+},namedColors:function(){
+return MochiKit.Base.clone(MochiKit.Color.Color._namedColors);
+}});
+MochiKit.Base.update(MochiKit.Color,{clampColorComponent:function(v,_495){
+v*=_495;
+if(v<0){
+return 0;
+}else{
+if(v>_495){
+return _495;
+}else{
+return v;
+}
+}
+},_hslValue:function(n1,n2,hue){
+if(hue>6){
+hue-=6;
+}else{
+if(hue<0){
+hue+=6;
+}
+}
+var val;
+if(hue<1){
+val=n1+(n2-n1)*hue;
+}else{
+if(hue<3){
+val=n2;
+}else{
+if(hue<4){
+val=n1+(n2-n1)*(4-hue);
+}else{
+val=n1;
+}
+}
+}
+return val;
+},hsvToRGB:function(hue,_498,_499,_500){
+if(arguments.length==1){
+var hsv=hue;
+hue=hsv.h;
+_498=hsv.s;
+_499=hsv.v;
+_500=hsv.a;
+}
+var red;
+var _501;
+var blue;
+if(_498==0){
+red=0;
+_501=0;
+blue=0;
+}else{
+var i=Math.floor(hue*6);
+var f=(hue*6)-i;
+var p=_499*(1-_498);
+var q=_499*(1-(_498*f));
+var t=_499*(1-(_498*(1-f)));
+switch(i){
+case 1:
+red=q;
+_501=_499;
+blue=p;
+break;
+case 2:
+red=p;
+_501=_499;
+blue=t;
+break;
+case 3:
+red=p;
+_501=q;
+blue=_499;
+break;
+case 4:
+red=t;
+_501=p;
+blue=_499;
+break;
+case 5:
+red=_499;
+_501=p;
+blue=q;
+break;
+case 6:
+case 0:
+red=_499;
+_501=t;
+blue=p;
+break;
+}
+}
+return {r:red,g:_501,b:blue,a:_500};
+},hslToRGB:function(hue,_503,_504,_505){
+if(arguments.length==1){
+var hsl=hue;
+hue=hsl.h;
+_503=hsl.s;
+_504=hsl.l;
+_505=hsl.a;
+}
+var red;
+var _506;
+var blue;
+if(_503==0){
+red=_504;
+_506=_504;
+blue=_504;
+}else{
+var m2;
+if(_504<=0.5){
+m2=_504*(1+_503);
+}else{
+m2=_504+_503-(_504*_503);
+}
+var m1=(2*_504)-m2;
+var f=MochiKit.Color._hslValue;
+var h6=hue*6;
+red=f(m1,m2,h6+2);
+_506=f(m1,m2,h6);
+blue=f(m1,m2,h6-2);
+}
+return {r:red,g:_506,b:blue,a:_505};
+},rgbToHSV:function(red,_510,blue,_511){
+if(arguments.length==1){
+var rgb=red;
+red=rgb.r;
+_510=rgb.g;
+blue=rgb.b;
+_511=rgb.a;
+}
+var max=Math.max(Math.max(red,_510),blue);
+var min=Math.min(Math.min(red,_510),blue);
+var hue;
+var _514;
+var _515=max;
+if(min==max){
+hue=0;
+_514=0;
+}else{
+var _516=(max-min);
+_514=_516/max;
+if(red==max){
+hue=(_510-blue)/_516;
+}else{
+if(_510==max){
+hue=2+((blue-red)/_516);
+}else{
+hue=4+((red-_510)/_516);
+}
+}
+hue/=6;
+if(hue<0){
+hue+=1;
+}
+if(hue>1){
+hue-=1;
+}
+}
+return {h:hue,s:_514,v:_515,a:_511};
+},rgbToHSL:function(red,_517,blue,_518){
+if(arguments.length==1){
+var rgb=red;
+red=rgb.r;
+_517=rgb.g;
+blue=rgb.b;
+_518=rgb.a;
+}
+var max=Math.max(red,Math.max(_517,blue));
+var min=Math.min(red,Math.min(_517,blue));
+var hue;
+var _519;
+var _520=(max+min)/2;
+var _521=max-min;
+if(_521==0){
+hue=0;
+_519=0;
+}else{
+if(_520<=0.5){
+_519=_521/(max+min);
+}else{
+_519=_521/(2-max-min);
+}
+if(red==max){
+hue=(_517-blue)/_521;
+}else{
+if(_517==max){
+hue=2+((blue-red)/_521);
+}else{
+hue=4+((red-_517)/_521);
+}
+}
+hue/=6;
+if(hue<0){
+hue+=1;
+}
+if(hue>1){
+hue-=1;
+}
+}
+return {h:hue,s:_519,l:_520,a:_518};
+},toColorPart:function(num){
+num=Math.round(num);
+var _522=num.toString(16);
+if(num<16){
+return "0"+_522;
+}
+return _522;
+},__new__:function(){
+var m=MochiKit.Base;
+this.Color.fromRGBString=m.bind(this.Color._fromColorString,this.Color,"rgb","fromRGB",[1/255,1/255,1/255,1]);
+this.Color.fromHSLString=m.bind(this.Color._fromColorString,this.Color,"hsl","fromHSL",[1/360,0.01,0.01,1]);
+var _523=1/3;
+var _524={black:[0,0,0],blue:[0,0,1],brown:[0.6,0.4,0.2],cyan:[0,1,1],darkGray:[_523,_523,_523],gray:[0.5,0.5,0.5],green:[0,1,0],lightGray:[2*_523,2*_523,2*_523],magenta:[1,0,1],orange:[1,0.5,0],purple:[0.5,0,0.5],red:[1,0,0],transparent:[0,0,0,0],white:[1,1,1],yellow:[1,1,0]};
+var _525=function(name,r,g,b,a){
+var rval=this.fromRGB(r,g,b,a);
+this[name]=function(){
+return rval;
 };
-
-// Constructor methods
-MochiKit.Base.update(MochiKit.Color.Color, {
-    fromRGB: function (red, green, blue, alpha) {
-        // designated initializer
-        var Color = MochiKit.Color.Color;
-        if (arguments.length == 1) {
-            var rgb = red;
-            red = rgb.r;
-            green = rgb.g;
-            blue = rgb.b;
-            if (typeof(rgb.a) == 'undefined') {
-                alpha = undefined;
-            } else {
-                alpha = rgb.a;
-            }
-        }
-        return new Color(red, green, blue, alpha);
-    },
-
-    fromHSL: function (hue, saturation, lightness, alpha) {
-        var m = MochiKit.Color;
-        return m.Color.fromRGB(m.hslToRGB.apply(m, arguments));
-    },
-
-    fromHSV: function (hue, saturation, value, alpha) {
-        var m = MochiKit.Color;
-        return m.Color.fromRGB(m.hsvToRGB.apply(m, arguments));
-    },
-
-    fromName: function (name) {
-        var Color = MochiKit.Color.Color;
-        var htmlColor = Color._namedColors[name.toLowerCase()];
-        if (typeof(htmlColor) == 'string') {
-            return Color.fromHexString(htmlColor);
-        } else if (name == "transparent") {
-            return Color.transparentColor();
-        }
-        return null;
-    },
-
-    fromString: function (colorString) {
-        var self = MochiKit.Color.Color;
-        var three = colorString.substr(0, 3);
-        if (three == "rgb") {
-            return self.fromRGBString(colorString);
-        } else if (three == "hsl") {
-            return self.fromHSLString(colorString);
-        } else if (colorString.charAt(0) == "#") {
-            return self.fromHexString(colorString);
-        }
-        return self.fromName(colorString);
-    },
-
-
-    fromHexString: function (hexCode) {
-        if (hexCode.charAt(0) == '#') {
-            hexCode = hexCode.substring(1);
-        }
-        var components = [];
-        var i, hex;
-        if (hexCode.length == 3) {
-            for (i = 0; i < 3; i++) {
-                hex = hexCode.substr(i, 1);
-                components.push(parseInt(hex + hex, 16) / 255.0);
-            }
-        } else {
-            for (i = 0; i < 6; i += 2) {
-                hex = hexCode.substr(i, 2);
-                components.push(parseInt(hex, 16) / 255.0);
-            }
-        }
-        var Color = MochiKit.Color.Color;
-        return Color.fromRGB.apply(Color, components);
-    },
-
-
-    _fromColorString: function (pre, method, scales, colorCode) {
-        // parses either HSL or RGB
-        if (colorCode.indexOf(pre) == 0) {
-            colorCode = colorCode.substring(colorCode.indexOf("(", 3) + 1, colorCode.length - 1);
-        }
-        var colorChunks = colorCode.split(/\s*,\s*/);
-        var colorFloats = [];
-        for (var i = 0; i < colorChunks.length; i++) {
-            var c = colorChunks[i];
-            var val;
-            var three = c.substring(c.length - 3);
-            if (c.charAt(c.length - 1) == '%') {
-                val = 0.01 * parseFloat(c.substring(0, c.length - 1));
-            } else if (three == "deg") {
-                val = parseFloat(c) / 360.0;
-            } else if (three == "rad") {
-                val = parseFloat(c) / (Math.PI * 2);
-            } else {
-                val = scales[i] * parseFloat(c);
-            }
-            colorFloats.push(val);
-        }
-        return this[method].apply(this, colorFloats);
-    },
-
-    fromComputedStyle: function (elem, style, mozillaEquivalentCSS) {
-        var d = MochiKit.DOM;
-        var cls = MochiKit.Color.Color;
-        for (elem = d.getElement(elem); elem; elem = elem.parentNode) {
-            var actualColor = d.computedStyle.apply(d, arguments);
-            if (!actualColor) {
-                continue;
-            }
-            var color = cls.fromString(actualColor);
-            if (!color) {
-                break;
-            }
-            if (color.asRGB().a > 0) {
-                return color;
-            }
-        }
-        return null;
-    },
-
-    fromBackground: function (elem) {
-        var cls = MochiKit.Color.Color;
-        return cls.fromComputedStyle(
-            elem, "backgroundColor", "background-color") || cls.whiteColor();
-    },
-
-    fromText: function (elem) {
-        var cls = MochiKit.Color.Color;
-        return cls.fromComputedStyle(
-            elem, "color", "color") || cls.blackColor();
-    },
-
-    namedColors: function () {
-        return MochiKit.Base.clone(MochiKit.Color.Color._namedColors);
-    }
-});
-
-// Module level functions
-MochiKit.Base.update(MochiKit.Color, {
-    clampColorComponent: function (v, scale) {
-        v *= scale;
-        if (v < 0) {
-            return 0;
-        } else if (v > scale) {
-            return scale;
-        } else {
-            return v;
-        }
-    },
-
-    _hslValue: function (n1, n2, hue) {
-        if (hue > 6.0) {
-            hue -= 6.0;
-        } else if (hue < 0.0) {
-            hue += 6.0;
-        }
-        var val;
-        if (hue < 1.0) {
-            val = n1 + (n2 - n1) * hue;
-        } else if (hue < 3.0) {
-            val = n2;
-        } else if (hue < 4.0) {
-            val = n1 + (n2 - n1) * (4.0 - hue);
-        } else {
-            val = n1;
-        }
-        return val;
-    },
-
-    hsvToRGB: function (hue, saturation, value, alpha) {
-        if (arguments.length == 1) {
-            var hsv = hue;
-            hue = hsv.h;
-            saturation = hsv.s;
-            value = hsv.v;
-            alpha = hsv.a;
-        }
-        var red;
-        var green;
-        var blue;
-        if (saturation == 0.0) {
-            red = 0;
-            green = 0;
-            blue = 0;
-        } else {
-            var i = Math.floor(hue * 6);
-            var f = (hue * 6) - i;
-            var p = value * (1 - saturation);
-            var q = value * (1 - (saturation * f));
-            var t = value * (1 - (saturation * (1 - f)));
-            switch (i) {
-                case 1: red = q; green = value; blue = p; break;
-                case 2: red = p; green = value; blue = t; break;
-                case 3: red = p; green = q; blue = value; break;
-                case 4: red = t; green = p; blue = value; break;
-                case 5: red = value; green = p; blue = q; break;
-                case 6: // fall through
-                case 0: red = value; green = t; blue = p; break;
-            }
-        }
-        return {
-            r: red,
-            g: green,
-            b: blue,
-            a: alpha
-        };
-    },
-
-    hslToRGB: function (hue, saturation, lightness, alpha) {
-        if (arguments.length == 1) {
-            var hsl = hue;
-            hue = hsl.h;
-            saturation = hsl.s;
-            lightness = hsl.l;
-            alpha = hsl.a;
-        }
-        var red;
-        var green;
-        var blue;
-        if (saturation == 0) {
-            red = lightness;
-            green = lightness;
-            blue = lightness;
-        } else {
-            var m2;
-            if (lightness <= 0.5) {
-                m2 = lightness * (1.0 + saturation);
-            } else {
-                m2 = lightness + saturation - (lightness * saturation);
-            }
-            var m1 = (2.0 * lightness) - m2;
-            var f = MochiKit.Color._hslValue;
-            var h6 = hue * 6.0;
-            red = f(m1, m2, h6 + 2);
-            green = f(m1, m2, h6);
-            blue = f(m1, m2, h6 - 2);
-        }
-        return {
-            r: red,
-            g: green,
-            b: blue,
-            a: alpha
-        };
-    },
-
-    rgbToHSV: function (red, green, blue, alpha) {
-        if (arguments.length == 1) {
-            var rgb = red;
-            red = rgb.r;
-            green = rgb.g;
-            blue = rgb.b;
-            alpha = rgb.a;
-        }
-        var max = Math.max(Math.max(red, green), blue);
-        var min = Math.min(Math.min(red, green), blue);
-        var hue;
-        var saturation;
-        var value = max;
-        if (min == max) {
-            hue = 0;
-            saturation = 0;
-        } else {
-            var delta = (max - min);
-            saturation = delta / max;
-
-            if (red == max) {
-                hue = (green - blue) / delta;
-            } else if (green == max) {
-                hue = 2 + ((blue - red) / delta);
-            } else {
-                hue = 4 + ((red - green) / delta);
-            }
-            hue /= 6;
-            if (hue < 0) {
-                hue += 1;
-            }
-            if (hue > 1) {
-                hue -= 1;
-            }
-        }
-        return {
-            h: hue,
-            s: saturation,
-            v: value,
-            a: alpha
-        };
-    },
-
-    rgbToHSL: function (red, green, blue, alpha) {
-        if (arguments.length == 1) {
-            var rgb = red;
-            red = rgb.r;
-            green = rgb.g;
-            blue = rgb.b;
-            alpha = rgb.a;
-        }
-        var max = Math.max(red, Math.max(green, blue));
-        var min = Math.min(red, Math.min(green, blue));
-        var hue;
-        var saturation;
-        var lightness = (max + min) / 2.0;
-        var delta = max - min;
-        if (delta == 0) {
-            hue = 0;
-            saturation = 0;
-        } else {
-            if (lightness <= 0.5) {
-                saturation = delta / (max + min);
-            } else {
-                saturation = delta / (2 - max - min);
-            }
-            if (red == max) {
-                hue = (green - blue) / delta;
-            } else if (green == max) {
-                hue = 2 + ((blue - red) / delta);
-            } else {
-                hue = 4 + ((red - green) / delta);
-            }
-            hue /= 6;
-            if (hue < 0) {
-                hue += 1;
-            }
-            if (hue > 1) {
-                hue -= 1;
-            }
-
-        }
-        return {
-            h: hue,
-            s: saturation,
-            l: lightness,
-            a: alpha
-        };
-    },
-
-    toColorPart: function (num) {
-        var digits = Math.round(num).toString(16);
-        if (num < 16) {
-            return '0' + digits;
-        }
-        return digits;
-    },
-
-    __new__: function () {
-        var m = MochiKit.Base;
-        this.Color.fromRGBString = m.bind(
-            this.Color._fromColorString, this.Color, "rgb", "fromRGB",
-            [1.0/255.0, 1.0/255.0, 1.0/255.0, 1]
-        );
-        this.Color.fromHSLString = m.bind(
-            this.Color._fromColorString, this.Color, "hsl", "fromHSL",
-            [1.0/360.0, 0.01, 0.01, 1]
-        );
-
-        var third = 1.0 / 3.0;
-        var colors = {
-            // NSColor colors plus transparent
-            black: [0, 0, 0],
-            blue: [0, 0, 1],
-            brown: [0.6, 0.4, 0.2],
-            cyan: [0, 1, 1],
-            darkGray: [third, third, third],
-            gray: [0.5, 0.5, 0.5],
-            green: [0, 1, 0],
-            lightGray: [2 * third, 2 * third, 2 * third],
-            magenta: [1, 0, 1],
-            orange: [1, 0.5, 0],
-            purple: [0.5, 0, 0.5],
-            red: [1, 0, 0],
-            transparent: [0, 0, 0, 0],
-            white: [1, 1, 1],
-            yellow: [1, 1, 0]
-        };
-
-        var makeColor = function (name, r, g, b, a) {
-            var rval = this.fromRGB(r, g, b, a);
-            this[name] = function () { return rval; };
-            return rval;
-        }
-
-        for (var k in colors) {
-            var name = k + "Color";
-            var bindArgs = m.concat(
-                [makeColor, this.Color, name],
-                colors[k]
-            );
-            this.Color[name] = m.bind.apply(null, bindArgs);
-        }
-
-        var isColor = function () {
-            for (var i = 0; i < arguments.length; i++) {
-                if (!(arguments[i] instanceof Color)) {
-                    return false;
-                }
-            }
-            return true;
-        }
-
-        var compareColor = function (a, b) {
-            return a.compareRGB(b);
-        }
-
-        m.nameFunctions(this);
-
-        m.registerComparator(this.Color.NAME, isColor, compareColor);
-
-        this.EXPORT_TAGS = {
-            ":common": this.EXPORT,
-            ":all": m.concat(this.EXPORT, this.EXPORT_OK)
-        };
-
-    }
-});
-
-MochiKit.Color.EXPORT = [
-    "Color"
-];
-
-MochiKit.Color.EXPORT_OK = [
-    "clampColorComponent",
-    "rgbToHSL",
-    "hslToRGB",
-    "rgbToHSV",
-    "hsvToRGB",
-    "toColorPart"
-];
-
+return rval;
+};
+for(var k in _524){
+var name=k+"Color";
+var _528=m.concat([_525,this.Color,name],_524[k]);
+this.Color[name]=m.bind.apply(null,_528);
+}
+var _529=function(){
+for(var i=0;i<arguments.length;i++){
+if(!(arguments[i] instanceof Color)){
+return false;
+}
+}
+return true;
+};
+var _530=function(a,b){
+return a.compareRGB(b);
+};
+m.nameFunctions(this);
+m.registerComparator(this.Color.NAME,_529,_530);
+this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
+}});
+MochiKit.Color.EXPORT=["Color"];
+MochiKit.Color.EXPORT_OK=["clampColorComponent","rgbToHSL","hslToRGB","rgbToHSV","hsvToRGB","toColorPart"];
 MochiKit.Color.__new__();
-
-MochiKit.Base._exportSymbols(this, MochiKit.Color);
-
-// Full table of css3 X11 colors <http://www.w3.org/TR/css3-color/#X11COLORS>
-
-MochiKit.Color.Color._namedColors = {
-    aliceblue: "#f0f8ff",
-    antiquewhite: "#faebd7",
-    aqua: "#00ffff",
-    aquamarine: "#7fffd4",
-    azure: "#f0ffff",
-    beige: "#f5f5dc",
-    bisque: "#ffe4c4",
-    black: "#000000",
-    blanchedalmond: "#ffebcd",
-    blue: "#0000ff",
-    blueviolet: "#8a2be2",
-    brown: "#a52a2a",
-    burlywood: "#deb887",
-    cadetblue: "#5f9ea0",
-    chartreuse: "#7fff00",
-    chocolate: "#d2691e",
-    coral: "#ff7f50",
-    cornflowerblue: "#6495ed",
-    cornsilk: "#fff8dc",
-    crimson: "#dc143c",
-    cyan: "#00ffff",
-    darkblue: "#00008b",
-    darkcyan: "#008b8b",
-    darkgoldenrod: "#b8860b",
-    darkgray: "#a9a9a9",
-    darkgreen: "#006400",
-    darkgrey: "#a9a9a9",
-    darkkhaki: "#bdb76b",
-    darkmagenta: "#8b008b",
-    darkolivegreen: "#556b2f",
-    darkorange: "#ff8c00",
-    darkorchid: "#9932cc",
-    darkred: "#8b0000",
-    darksalmon: "#e9967a",
-    darkseagreen: "#8fbc8f",
-    darkslateblue: "#483d8b",
-    darkslategray: "#2f4f4f",
-    darkslategrey: "#2f4f4f",
-    darkturquoise: "#00ced1",
-    darkviolet: "#9400d3",
-    deeppink: "#ff1493",
-    deepskyblue: "#00bfff",
-    dimgray: "#696969",
-    dimgrey: "#696969",
-    dodgerblue: "#1e90ff",
-    firebrick: "#b22222",
-    floralwhite: "#fffaf0",
-    forestgreen: "#228b22",
-    fuchsia: "#ff00ff",
-    gainsboro: "#dcdcdc",
-    ghostwhite: "#f8f8ff",
-    gold: "#ffd700",
-    goldenrod: "#daa520",
-    gray: "#808080",
-    green: "#008000",
-    greenyellow: "#adff2f",
-    grey: "#808080",
-    honeydew: "#f0fff0",
-    hotpink: "#ff69b4",
-    indianred: "#cd5c5c",
-    indigo: "#4b0082",
-    ivory: "#fffff0",
-    khaki: "#f0e68c",
-    lavender: "#e6e6fa",
-    lavenderblush: "#fff0f5",
-    lawngreen: "#7cfc00",
-    lemonchiffon: "#fffacd",
-    lightblue: "#add8e6",
-    lightcoral: "#f08080",
-    lightcyan: "#e0ffff",
-    lightgoldenrodyellow: "#fafad2",
-    lightgray: "#d3d3d3",
-    lightgreen: "#90ee90",
-    lightgrey: "#d3d3d3",
-    lightpink: "#ffb6c1",
-    lightsalmon: "#ffa07a",
-    lightseagreen: "#20b2aa",
-    lightskyblue: "#87cefa",
-    lightslategray: "#778899",
-    lightslategrey: "#778899",
-    lightsteelblue: "#b0c4de",
-    lightyellow: "#ffffe0",
-    lime: "#00ff00",
-    limegreen: "#32cd32",
-    linen: "#faf0e6",
-    magenta: "#ff00ff",
-    maroon: "#800000",
-    mediumaquamarine: "#66cdaa",
-    mediumblue: "#0000cd",
-    mediumorchid: "#ba55d3",
-    mediumpurple: "#9370db",
-    mediumseagreen: "#3cb371",
-    mediumslateblue: "#7b68ee",
-    mediumspringgreen: "#00fa9a",
-    mediumturquoise: "#48d1cc",
-    mediumvioletred: "#c71585",
-    midnightblue: "#191970",
-    mintcream: "#f5fffa",
-    mistyrose: "#ffe4e1",
-    moccasin: "#ffe4b5",
-    navajowhite: "#ffdead",
-    navy: "#000080",
-    oldlace: "#fdf5e6",
-    olive: "#808000",
-    olivedrab: "#6b8e23",
-    orange: "#ffa500",
-    orangered: "#ff4500",
-    orchid: "#da70d6",
-    palegoldenrod: "#eee8aa",
-    palegreen: "#98fb98",
-    paleturquoise: "#afeeee",
-    palevioletred: "#db7093",
-    papayawhip: "#ffefd5",
-    peachpuff: "#ffdab9",
-    peru: "#cd853f",
-    pink: "#ffc0cb",
-    plum: "#dda0dd",
-    powderblue: "#b0e0e6",
-    purple: "#800080",
-    red: "#ff0000",
-    rosybrown: "#bc8f8f",
-    royalblue: "#4169e1",
-    saddlebrown: "#8b4513",
-    salmon: "#fa8072",
-    sandybrown: "#f4a460",
-    seagreen: "#2e8b57",
-    seashell: "#fff5ee",
-    sienna: "#a0522d",
-    silver: "#c0c0c0",
-    skyblue: "#87ceeb",
-    slateblue: "#6a5acd",
-    slategray: "#708090",
-    slategrey: "#708090",
-    snow: "#fffafa",
-    springgreen: "#00ff7f",
-    steelblue: "#4682b4",
-    tan: "#d2b48c",
-    teal: "#008080",
-    thistle: "#d8bfd8",
-    tomato: "#ff6347",
-    turquoise: "#40e0d0",
-    violet: "#ee82ee",
-    wheat: "#f5deb3",
-    white: "#ffffff",
-    whitesmoke: "#f5f5f5",
-    yellow: "#ffff00",
-    yellowgreen: "#9acd32"
+MochiKit.Base._exportSymbols(this,MochiKit.Color);
+MochiKit.Color.Color._namedColors={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgree!
 n:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc!
 ",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"!
 #f5fffa"
,mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Signal");
+dojo.require("MochiKit.Base");
+dojo.require("MochiKit.DOM");
+}
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Base",[]);
+JSAN.use("MochiKit.DOM",[]);
+}
+try{
+if(typeof (MochiKit.Base)=="undefined"){
+throw "";
+}
+}
+catch(e){
+throw "MochiKit.Signal depends on MochiKit.Base!";
+}
+try{
+if(typeof (MochiKit.DOM)=="undefined"){
+throw "";
+}
+}
+catch(e){
+throw "MochiKit.Signal depends on MochiKit.DOM!";
+}
+if(typeof (MochiKit.Signal)=="undefined"){
+MochiKit.Signal={};
+}
+MochiKit.Signal.NAME="MochiKit.Signal";
+MochiKit.Signal.VERSION="1.3";
+MochiKit.Signal._observers=[];
+MochiKit.Signal.Event=function(e){
+this._event=e||window.event;
 };
-
-/***
-
-MochiKit.Signal 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2006 Jonathan Gardner, Beau Hartshorne.  All rights Reserved.
-
-***/
-
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.Signal');
-    dojo.require('MochiKit.Base');
-    dojo.require('MochiKit.DOM');
-}
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use('MochiKit.Base', []);
-    JSAN.use('MochiKit.DOM', []);
-}
-
-try {
-    if (typeof(MochiKit.Base) == 'undefined') {
-        throw '';
-    }
-} catch (e) {
-    throw 'MochiKit.Signal depends on MochiKit.Base!';
-}
-
-try {
-    if (typeof(MochiKit.DOM) == 'undefined') {
-        throw '';
-    }
-} catch (e) {
-    throw 'MochiKit.Signal depends on MochiKit.DOM!';
-}
-
-if (typeof(MochiKit.Signal) == 'undefined') {
-    MochiKit.Signal = {};
-}
-
-MochiKit.Signal.NAME = 'MochiKit.Signal';
-MochiKit.Signal.VERSION = '1.3';
-
-MochiKit.Signal._observers = [];
-
-MochiKit.Signal.Event = function (e) {
-    this._event = e || window.event;
-};
-
-MochiKit.Signal.Event.prototype.event = function () {
-    // just to keep the top-level api consistent, i forget to look for
-    // event or event() -- maybe we should just keep this private so
-    // people know they should be filing bugs instead of playing with the
-    // raw event?
-    return this._event;
-};
-
-MochiKit.Signal.Event.prototype.type = function () {
-    return this._event.type || undefined;
-};
-
-MochiKit.Signal.Event.prototype.target = function () {
-    return this._event.target || this._event.srcElement;
-};
-
-MochiKit.Signal.Event.prototype.relatedTarget = function () {
-    if (this.type() == 'mouseover') {
-        return (this._event.relatedTarget ||
-            this._event.fromElement);
-    } else if (this.type() == 'mouseout') {
-        return (this._event.relatedTarget ||
-            this._event.toElement);
-    }
-    // FIXME: throw an exception instead?
-    return undefined;
-};
-
-MochiKit.Signal.Event.prototype.modifier = function () {
-    var m = {};
-    m.alt = this._event.altKey;
-    m.ctrl = this._event.ctrlKey;
-    m.meta = this._event.metaKey || false; // ie and opera punt here
-    m.shift = this._event.shiftKey;
-    return m;
-};
-
-MochiKit.Signal.Event.prototype.key = function () {
-    var k = {};
-    if (this.type() && this.type().indexOf('key') === 0) {
-
-        /*
-
-        // If you're looking for a special key, look for it in keydown or
-        // keyup, but never keypress. If you're looking for a Unicode
-        // chracter, look for it with keypress, but never kd or ku.
-
-        // keyCode will contain the raw key code in a kd/ku event
-        // keyString will contain a human-redable keyCode
-
-        // charCode will contain the raw character code in a kp event
-        // charString will contain the actual character
-
-        Here are some of my notes:
-
-            FF key event behavior:
-            key event   charCode    keyCode
-            DOWN    ku,kd   0           40
-            DOWN    kp      0           40
-            ESC     ku,kd   0           27
-            ESC     kp      0           27
-            a       ku,kd   0           65
-            a       kp      97          0
-            shift+a ku,kd   0           65
-            shift+a kp      65          0
-            1       ku,kd   0           49
-            1       kp      49          0
-            shift+1 ku,kd   0           0
-            shift+1 kp      33          0
-
-            IE key event behavior:
-            key     event   keyCode
-            DOWN    ku,kd   40
-            DOWN    kp      undefined
-            ESC     ku,kd   27
-            ESC     kp      27
-            a       ku,kd   65
-            a       kp      97
-            shift+a ku,kd   65
-            shift+a kp      65
-            1       ku,kd   49
-            1       kp      49
-            shift+1 ku,kd   49
-            shift+1 kp      33
-
-            Safari key event behavior:
-            key     event   charCode    keyCode
-            DOWN    ku,kd   63233       40
-            DOWN    kp      63233       63233
-            ESC     ku,kd   27          27
-            ESC     kp      27          27
-            a       ku,kd   97          65
-            a       kp      97          97
-            shift+a ku,kd   65          65
-            shift+a kp      65          65
-            1       ku,kd   49          49
-            1       kp      49          49
-            shift+1 ku,kd   33          49
-            shift+1 kp      33          33
-
-        */
-
-        // look for special keys here
-        if (this.type() == 'keydown' || this.type() == 'keyup') {
-            k.code = this._event.keyCode;
-            k.string = (MochiKit.Signal._specialKeys[k.code] ||
-                'KEY_UNKNOWN');
-            return k;
-        // look for unicode characters here
-        } else if (this.type() == 'keypress') {
-            k.code = (this._event.charCode || this._event.keyCode);
-            // special keys don't have a character
-            if (MochiKit.Signal._specialKeys[k.code]) {
-                // remind users not to look for special chars in keypress
-                // FIXME: throw an exception instead?
-                return undefined;
-            } else {
-                k.string = String.fromCharCode(k.code);
-            }
-            return k;
-        }
-    }
-    // FIXME: throw an exception instead?
-    return undefined;
-};
-
-MochiKit.Signal.Event.prototype._fixPoint = function (point) {
-    // maybe this should be an inline function?
-    if (typeof(point) == 'undefined' || point < 0) {
-        return 0;
-    }
-    return point;
-};
-
-MochiKit.Signal.Event.prototype.mouse = function () {
-    // mouse events
-    var m = {};
-    if (this.type() && (
-        this.type().indexOf('mouse') === 0 ||
-        this.type().indexOf('click') != -1 ||
-        this.type() == 'contextmenu')) {
-
-        m.client = new MochiKit.DOM.Coordinates(0, 0);
-        if (this._event.clientX || this._event.clientY) {
-            m.client.x = this._fixPoint(this._event.clientX);
-            m.client.y = this._fixPoint(this._event.clientY);
-        }
-
-        m.page = new MochiKit.DOM.Coordinates(0, 0);
-        if (this._event.pageX || this._event.pageY) {
-            m.page.x = this._fixPoint(this._event.pageX);
-            m.page.y = this._fixPoint(this._event.pageY);
-        } else {
-            // IE keeps its document offset in
-            // document.documentElement.clientTop
-
-            // see http://msdn.microsoft.com/workshop/author/dhtml/reference/
-            //     methods/getboundingclientrect.asp
-
-            // the offset is (2,2) in standards mode and (0,0) in quirks mode
-            m.page.x = (this._event.clientX +
-                (document.documentElement.scrollLeft ||
-                document.body.scrollLeft) -
-                document.documentElement.clientLeft);
-            m.page.y = (this._event.clientY +
-                (document.documentElement.scrollTop ||
-                document.body.scrollTop) -
-                document.documentElement.clientTop);
-        }
-        if (this.type() != 'mousemove') {
-            m.button = {};
-            m.button.left = false;
-            m.button.right = false;
-            m.button.middle = false;
-
-            // we could check this._event.button, but which is more consistent
-            if (this._event.which) {
-                m.button.left = (this._event.which == 1);
-                m.button.middle = (this._event.which == 2);
-                m.button.right = (this._event.which == 3);
-
-                // mac browsers and right click:
-                // safari doesn't fire any click events on a right click
-                // firefox fires the event, and sets ctrlKey = true
-                // opera fires the event, and sets metaKey = true
-                // oncontextmenu can detect right clicks between browsers and
-                // across platforms
-
-            } else {
-                m.button.left = !!(this._event.button & 1);
-                m.button.right = !!(this._event.button & 2);
-                m.button.middle = !!(this._event.button & 4);
-            }
-        }
-        return m;
-    }
-    // FIXME: throw an exception instead?
-    return undefined;
-};
-
-MochiKit.Signal.Event.prototype.stop = function () {
-    this.stopPropagation();
-    this.preventDefault();
-};
-
-MochiKit.Signal.Event.prototype.stopPropagation = function () {
-    if (this._event.stopPropagation) {
-        this._event.stopPropagation();
-    } else {
-        this._event.cancelBubble = true;
-    }
-};
-
-MochiKit.Signal.Event.prototype.preventDefault = function () {
-    if (this._event.preventDefault) {
-        this._event.preventDefault();
-    } else {
-        this._event.returnValue = false;
-    }
-};
-
-MochiKit.Signal.Event.prototype.repr = function () {
-    var repr = MochiKit.Base.repr;
-    var str = '{event(): ' + repr(this.event()) +
-        ', type(): ' + repr(this.type()) +
-        ', target(): ' + repr(this.target()) +
-        ', modifier(): ' + '{alt: ' + repr(this.modifier().alt) +
-        ', ctrl: ' + repr(this.modifier().ctrl) +
-        ', meta: ' + repr(this.modifier().meta) +
-        ', shift: ' + repr(this.modifier().shift) + '}';
-
-    if (this.type() && this.type().indexOf('key') === 0) {
-        str += ', key(): {code: ' + repr(this.key().code) +
-            ', string: ' + repr(this.key().string) + '}';
-    }
-
-    if (this.type() && (
-        this.type().indexOf('mouse') === 0 ||
-        this.type().indexOf('click') != -1 ||
-        this.type() == 'contextmenu')) {
-
-        str += ', mouse(): {page: ' + repr(this.mouse().page) +
-            ', client: ' + repr(this.mouse().client);
-
-        if (this.type() != 'mousemove') {
-            str += ', button: {left: ' + repr(this.mouse().button.left) +
-                ', middle: ' + repr(this.mouse().button.middle) +
-                ', right: ' + repr(this.mouse().button.right) + '}}';
-        } else {
-            str += '}';
-        }
-    }
-    if (this.type() == 'mouseover' || this.type() == 'mouseout') {
-        str += ', relatedTarget(): ' + repr(this.relatedTarget());
-    }
-    str += '}';
-    return str;
-};
-
-MochiKit.Base.update(MochiKit.Signal, {
-
-    __repr__: function () {
-        return '[' + this.NAME + ' ' + this.VERSION + ']';
-    },
-
-    toString: function () {
-        return this.__repr__();
-    },
-
-    // this is straight out of Dojo
-    _specialKeys: {
-        8: 'KEY_BACKSPACE',
-        9: 'KEY_TAB',
-        13: 'KEY_ENTER',
-        16: 'KEY_SHIFT',
-        17: 'KEY_CTRL',
-        18: 'KEY_ALT',
-        19: 'KEY_PAUSE',
-        20: 'KEY_CAPS_LOCK',
-        27: 'KEY_ESCAPE',
-        32: 'KEY_SPACE',
-        33: 'KEY_PAGE_UP',
-        34: 'KEY_PAGE_DOWN',
-        35: 'KEY_END',
-        36: 'KEY_HOME',
-        37: 'KEY_LEFT_ARROW',
-        38: 'KEY_UP_ARROW',
-        39: 'KEY_RIGHT_ARROW',
-        40: 'KEY_DOWN_ARROW',
-        45: 'KEY_INSERT',
-        46: 'KEY_DELETE',
-        91: 'KEY_LEFT_WINDOW',
-        92: 'KEY_RIGHT_WINDOW',
-        93: 'KEY_SELECT',
-        112: 'KEY_F1',
-        113: 'KEY_F2',
-        114: 'KEY_F3',
-        115: 'KEY_F4',
-        116: 'KEY_F5',
-        117: 'KEY_F6',
-        118: 'KEY_F7',
-        119: 'KEY_F8',
-        120: 'KEY_F9',
-        121: 'KEY_F10',
-        122: 'KEY_F11',
-        123: 'KEY_F12',
-        144: 'KEY_NUM_LOCK',
-        145: 'KEY_SCROLL_LOCK'
-        // undefined: 'KEY_UNKNOWN'
-    },
-
-    _getSlot: function (slot, func) {
-        if (typeof(func) == 'string' || typeof(func) == 'function') {
-            slot = [slot, func];
-        } else if (!func && typeof(slot) == 'function') {
-            slot = [slot];
-        } else {
-            throw new Error('Invalid slot parameters');
-        }
-
-        return slot;
-    },
-
-    _unloadCache: function () {
-        for (var i = 0; i < MochiKit.Signal._observers.length; i++) {
-            var src = MochiKit.Signal._observers[i][0];
-            var sig = MochiKit.Signal._observers[i][1];
-            var listener = MochiKit.Signal._observers[i][2];
-
-            try {
-                if (src.addEventListener) {
-                    src.removeEventListener(sig.substr(2), listener, false);
-                } else if (src.attachEvent) {
-                    src.detachEvent(sig, listener);
-                } else {
-                    src.__signals[sig] = undefined;
-                }
-
-                src.__listeners[sig] = undefined;
-
-                // delete removes object properties, not variables
-                delete(src.__listeners);
-                delete(src.__signals);
-
-            } catch(e) {
-                // clean IE garbage
-            }
-        }
-
-        MochiKit.Signal._observers = undefined;
-
-        try {
-            window.onload = undefined;
-        } catch(e) {
-            // clean IE garbage
-        }
-
-        try {
-            window.onunload = undefined;
-        } catch(e) {
-            // clean IE garbage
-        }
-    },
-
-    connect: function (src, sig, slot, /* optional */func) {
-        /***
-
-        Connects a signal to a slot.
-
-        'src' is the object that has the signal. You may pass in a string, in
-        which case, it is interpreted as an id for an HTML Element.
-
-        'signal' is a string that represents a signal name. If 'src' is an
-        HTML Element, Window, or the Document, then it can be one of the
-        'on-XYZ' events. Note that you must include the 'on' prefix, and it
-        must be all lower-case. If 'src' is another kind of object, the signal
-        must be previously registered with 'registerSignals()'.
-
-        'dest' and 'func' describe the slot, or the action to take when the
-        signal is triggered.
-
-            -   If 'dest' is an object and 'func' is a string, then
-                'dest[func](...)' will be called when the signal is signalled.
-
-            -   If 'dest' is an object and 'func' is a function, then
-                'func.apply(dest, ...)' will be called when the signal is
-                signalled.
-
-            -   If 'func' is undefined and 'dest' is a function, then
-                'func.apply(src, ...)' will be called when the signal is
-                signalled.
-
-        No other combinations are allowed and should raise and exception.
-
-        You may call 'connect()' multiple times with the same connection
-        paramters. However, only a single connection will be made.
-
-        ***/
-        if (typeof(src) == 'string') {
-            src = MochiKit.DOM.getElement(src);
-        }
-
-        if (typeof(sig) != 'string') {
-            throw new Error("'sig' must be a string");
-        }
-
-        slot = MochiKit.Signal._getSlot(slot, func);
-
-        // Find the signal, attach the slot.
-
-        // DOM object
-        if (src.addEventListener || src.attachEvent || src[sig]) {
-            // Create the __listeners object. This will help us remember which
-            // events we are watching.
-            if (!src.__listeners) {
-                src.__listeners = {};
-            }
-
-            // Add the signal connector if it hasn't been done already.
-            if (!src.__listeners[sig]) {
-                var listener = function (nativeEvent) {
-                    var eventObject = new MochiKit.Signal.Event(nativeEvent);
-                    MochiKit.Signal.signal(src, sig, eventObject);
-                    return true;
-                };
-                MochiKit.Signal._observers.push([src, sig, listener]);
-
-                if (src.addEventListener) {
-                    src.addEventListener(sig.substr(2), listener, false);
-                } else if (src.attachEvent) {
-                    src.attachEvent(sig, listener);
-                } else {
-                    src[sig] = listener;
-                }
-
-                src.__listeners[sig] = listener;
-            }
-
-            if (!src.__signals) {
-                src.__signals = {};
-            }
-            if (!src.__signals[sig]) {
-                src.__signals[sig] = [];
-            }
-        } else {
-            if (!src.__signals || !src.__signals[sig]) {
-                throw new Error("No such signal '" + sig + "' registered.");
-            }
-        }
-
-        // Actually add the slot... if it isn't there already.
-        var signals = src.__signals[sig];
-        for (var i = 0; i < signals.length; i++) {
-            var s = signals[i];
-            if (slot[0] === s[0] && slot[1] === s[1] && slot[2] === s[2]) {
-                return;
-            }
-        }
-        signals.push(slot);
-    },
-
-    disconnect: function (src, sig, slot, /* optional */func) {
-        /***
-
-        When 'disconnect()' is called, it will disconnect whatever connection
-        was made given the same parameters to 'connect()'. Note that if you
-        want to pass a closure to 'connect()', you'll have to remember it if
-        you want to later 'disconnect()' it.
-
-        ***/
-        if (typeof(src) == 'string') {
-            src = MochiKit.DOM.getElement(src);
-        }
-
-        if (typeof(sig) != 'string') {
-            throw new Error("'signal' must be a string");
-        }
-
-        slot = MochiKit.Signal._getSlot(slot, func);
-
-        if (src.__signals && src.__signals[sig]) {
-            var signals = src.__signals[sig];
-            var origlen = signals.length;
-            for (var i = 0; i < signals.length; i++) {
-                var s = signals[i];
-                if (s[0] === slot[0] && s[1] === slot[1] && s[2] === slot[2]) {
-                    signals.splice(i, 1);
-                    break;
-                }
-            }
-        }
-
-        if (src.addEventListener || src.attachEvent || src.__signals[sig]) {
-            // DOM object
-
-            // Stop listening if there are no connected slots.
-            if (src.__listeners && src.__listeners[sig] &&
-                src.__signals[sig].length === 0) {
-
-                var listener = src.__listeners[sig];
-
-                if (src.addEventListener) {
-                    src.removeEventListener(sig.substr(2), listener, false);
-                } else if (src.attachEvent) {
-                    src.detachEvent(sig, listener);
-                } else {
-                    src.__signals[sig] = undefined;
-                }
-
-                var observers = MochiKit.Signal._observers;
-                for (var i = 0; i < observers.length; i++) {
-                    var o = observers[i];
-                    if (o[0] === src && o[1] === sig && o[2] === listener) {
-                        observers.splice(i, 1);
-                        break;
-                    }
-                }
-                src.__listeners[sig] = undefined;
-            }
-        }
-    },
-
-    signal: function (src, sig) {
-        /***
-
-        This will signal a signal, passing whatever additional parameters
-        on to the connected slots. 'src' and 'signal' are the same as for
-        'connect()'.
-
-        ***/
-        if (typeof(src) == 'string') {
-            src = MochiKit.DOM.getElement(src);
-        }
-
-        if (typeof(sig) != 'string') {
-            throw new Error("'signal' must be a string");
-        }
-
-        if (!src.__signals || !src.__signals[sig]) {
-            if (src.addEventListener || src.attachEvent || src[sig]) {
-                // Ignored.
-                return;
-            } else {
-                throw new Error("No such signal '" + sig + "'");
-            }
-        }
-        var slots = src.__signals[sig];
-
-        var args = MochiKit.Base.extend(null, arguments, 2);
-
-        var slot;
-        var errors = [];
-        for (var i = 0; i < slots.length; i++) {
-            slot = slots[i];
-            try {
-                if (slot.length == 1) {
-                    slot[0].apply(src, args);
-                } else {
-                    if (typeof(slot[1]) == 'string') {
-                        slot[0][slot[1]].apply(slot[0], args);
-                    } else {
-                        slot[1].apply(slot[0], args);
-                    }
-                }
-            } catch (e) {
-                errors.push(e);
-            }
-        }
-        if (errors.length) {
-            var e = new Error("There were errors in handling signal 'sig'.");
-            e.errors = errors;
-            throw e;
-        }
-    },
-
-    registerSignals: function (src, signals) {
-        /***
-
-        This will register signals for the object 'src'. (Note that a string
-        here is not allowed--you don't need to register signals for DOM
-        objects.) 'signals' is an array of strings.
-
-        You may register the same signals multiple times; subsequent register
-        calls with the same signal names will have no effect, and the existing
-        connections, if any, will not be lost.
-
-        ***/
-        if (!src.__signals) {
-            src.__signals = {
-                /*
-                __repr__: function () {
-                    var m = MochiKit.Base;
-                    var signals = m.items(this);
-                    signals = m.filter(
-                        function (a) { return a[0] != "__repr__"; },
-                        signals
-                    );
-                    signals.sort(m.compare);
-                    return (
-                        '{\n    ' + m.map(
-                            function (a) {
-                                return m.map(m.repr, a).join(": ")
-                            },
-                            signals
-                        ).join(",\n    ") + "\n}"
-                    );
-                }
-                */
-            };
-        }
-
-        for (var i = 0; i < signals.length; i++) {
-            var sig = signals[i];
-            if (!src.__signals[sig]) {
-                src.__signals[sig] = [];
-            }
-        }
-    }
-});
-
-MochiKit.Signal.EXPORT_OK = [];
-
-MochiKit.Signal.EXPORT = [
-    'connect',
-    'disconnect',
-    'signal',
-    'registerSignals'
-];
-
-MochiKit.Signal.__new__ = function (win) {
-    var m = MochiKit.Base;
-    this._document = document;
-    this._window = win;
-
-    try {
-        this.connect(window, 'onunload', this._unloadCache);
-    } catch (e) {
-        // pass: might not be a browser
-    }
-
-    this.EXPORT_TAGS = {
-        ':common': this.EXPORT,
-        ':all': m.concat(this.EXPORT, this.EXPORT_OK)
-    };
-
-    m.nameFunctions(this);
-
-};
-
-MochiKit.Signal.__new__(this);
-
-MochiKit.Base._exportSymbols(this, MochiKit.Signal);
-
-/***
-
-MochiKit.Visual 1.3
-
-See <http://mochikit.com/> for documentation, downloads, license, etc.
-
-(c) 2005 Bob Ippolito and others.  All rights Reserved.
-
-***/
-
-if (typeof(dojo) != 'undefined') {
-    dojo.provide('MochiKit.Visual');
-    dojo.require('MochiKit.Base');
-    dojo.require('MochiKit.DOM');
-    dojo.require('MochiKit.Color');
+MochiKit.Signal.Event.prototype.event=function(){
+return this._event;
+};
+MochiKit.Signal.Event.prototype.type=function(){
+return this._event.type||undefined;
+};
+MochiKit.Signal.Event.prototype.target=function(){
+return this._event.target||this._event.srcElement;
+};
+MochiKit.Signal.Event.prototype.relatedTarget=function(){
+if(this.type()=="mouseover"){
+return (this._event.relatedTarget||this._event.fromElement);
+}else{
+if(this.type()=="mouseout"){
+return (this._event.relatedTarget||this._event.toElement);
 }
-
-if (typeof(JSAN) != 'undefined') {
-    JSAN.use("MochiKit.Base", []);
-    JSAN.use("MochiKit.DOM", []);
-    JSAN.use("MochiKit.Color", []);
 }
-
-try {
-    if (typeof(MochiKit.Base) == 'undefined' ||
-        typeof(MochiKit.DOM) == 'undefined' ||
-        typeof(MochiKit.Color) == 'undefined') {
-        throw "";
-    }
-} catch (e) {
-    throw "MochiKit.Visual depends on MochiKit.Base, MochiKit.DOM and MochiKit.Color!";
+throw new Error("No related target");
+};
+MochiKit.Signal.Event.prototype.modifier=function(){
+var m={};
+m.alt=this._event.altKey;
+m.ctrl=this._event.ctrlKey;
+m.meta=this._event.metaKey||false;
+m.shift=this._event.shiftKey;
+return m;
+};
+MochiKit.Signal.Event.prototype.key=function(){
+var k={};
+if(this.type()&&this.type().indexOf("key")===0){
+if(this.type()=="keydown"||this.type()=="keyup"){
+k.code=this._event.keyCode;
+k.string=(MochiKit.Signal._specialKeys[k.code]||"KEY_UNKNOWN");
+return k;
+}else{
+if(this.type()=="keypress"){
+k.code=(this._event.charCode||this._event.keyCode);
+k.string=String.fromCharCode(k.code);
+return k;
 }
-
-if (typeof(MochiKit.Visual) == "undefined") {
-    MochiKit.Visual = {};
 }
-
-MochiKit.Visual.NAME = "MochiKit.Visual";
-MochiKit.Visual.VERSION = "1.3";
-
-MochiKit.Visual.__repr__ = function () {
-    return "[" + this.NAME + " " + this.VERSION + "]";
+}
+throw new Error("This is not a key event");
 };
-
-MochiKit.Visual.toString = function () {
-    return this.__repr__();
+MochiKit.Signal.Event.prototype._fixPoint=function(_531){
+if(typeof (_531)=="undefined"||_531<0){
+return 0;
+}
+return _531;
 };
-
-
-MochiKit.Visual._RoundCorners = function (e, options) {
-    e = MochiKit.DOM.getElement(e);
-    this._setOptions(options);
-    if (this.options.__unstable__wrapElement) {
-        e = this._doWrap(e);
-    }
-
-    var color = this.options.color;
-    var C = MochiKit.Color.Color;
-    if (this.options.color == "fromElement") {
-        color = C.fromBackground(e);
-    } else if (!(color instanceof C)) {
-        color = C.fromString(color);
-    }
-    this.isTransparent = (color.asRGB().a <= 0);
-
-    var bgColor = this.options.bgColor;
-    if (this.options.bgColor == "fromParent") {
-        bgColor = C.fromBackground(e.offsetParent);
-    } else if (!(bgColor instanceof C)) {
-        bgColor = C.fromString(bgColor);
-    }
-
-    this._roundCornersImpl(e, color, bgColor);
+MochiKit.Signal.Event.prototype.mouse=function(){
+var m={};
+if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
+m.client=new MochiKit.DOM.Coordinates(0,0);
+if(this._event.clientX||this._event.clientY){
+m.client.x=this._fixPoint(this._event.clientX);
+m.client.y=this._fixPoint(this._event.clientY);
+}
+m.page=new MochiKit.DOM.Coordinates(0,0);
+if(this._event.pageX||this._event.pageY){
+m.page.x=this._fixPoint(this._event.pageX);
+m.page.y=this._fixPoint(this._event.pageY);
+}else{
+m.page.x=(this._event.clientX+(document.documentElement.scrollLeft||document.body.scrollLeft)-document.documentElement.clientLeft);
+m.page.y=(this._event.clientY+(document.documentElement.scrollTop||document.body.scrollTop)-document.documentElement.clientTop);
+}
+if(this.type()!="mousemove"){
+m.button={};
+m.button.left=false;
+m.button.right=false;
+m.button.middle=false;
+if(this._event.which){
+m.button.left=(this._event.which==1);
+m.button.middle=(this._event.which==2);
+m.button.right=(this._event.which==3);
+}else{
+m.button.left=!!(this._event.button&1);
+m.button.right=!!(this._event.button&2);
+m.button.middle=!!(this._event.button&4);
+}
+}
+return m;
+}
+throw new Error("This is not a mouse event");
 };
-
-MochiKit.Visual._RoundCorners.prototype = {
-    _doWrap: function (e) {
-        var parent = e.parentNode;
-        var doc = MochiKit.DOM.currentDocument();
-        if (typeof(doc.defaultView) == "undefined"
-            || doc.defaultView == null) {
-            return e;
-        }
-        var style = doc.defaultView.getComputedStyle(e, null);
-        if (typeof(style) == "undefined" || style == null) {
-            return e;
-        }
-        var wrapper = MochiKit.DOM.DIV({"style": {
-            display: "block",
-            // convert padding to margin
-            marginTop: style.getPropertyValue("padding-top"),
-            marginRight: style.getPropertyValue("padding-right"),
-            marginBottom: style.getPropertyValue("padding-bottom"),
-            marginLeft: style.getPropertyValue("padding-left"),
-            // remove padding so the rounding looks right
-            padding: "0px"
-            /*
-            paddingRight: "0px",
-            paddingLeft: "0px"
-            */
-        }});
-        wrapper.innerHTML = e.innerHTML;
-        e.innerHTML = "";
-        e.appendChild(wrapper);
-        return e;
-    },
-
-    _roundCornersImpl: function (e, color, bgColor) {
-        if (this.options.border) {
-            this._renderBorder(e, bgColor);
-        }
-        if (this._isTopRounded()) {
-            this._roundTopCorners(e, color, bgColor);
-        }
-        if (this._isBottomRounded()) {
-            this._roundBottomCorners(e, color, bgColor);
-        }
-    },
-
-    _renderBorder: function (el, bgColor) {
-        var borderValue = "1px solid " + this._borderColor(bgColor);
-        var borderL = "border-left: "  + borderValue;
-        var borderR = "border-right: " + borderValue;
-        var style   = "style='" + borderL + ";" + borderR +  "'";
-        el.innerHTML = "<div " + style + ">" + el.innerHTML + "</div>";
-    },
-
-    _roundTopCorners: function (el, color, bgColor) {
-        var corner = this._createCorner(bgColor);
-        for (var i = 0; i < this.options.numSlices; i++) {
-            corner.appendChild(
-                this._createCornerSlice(color, bgColor, i, "top")
-            );
-        }
-        el.style.paddingTop = 0;
-        el.insertBefore(corner, el.firstChild);
-    },
-
-    _roundBottomCorners: function (el, color, bgColor) {
-        var corner = this._createCorner(bgColor);
-        for (var i = (this.options.numSlices - 1); i >= 0; i--) {
-            corner.appendChild(
-                this._createCornerSlice(color, bgColor, i, "bottom")
-            );
-        }
-        el.style.paddingBottom = 0;
-        el.appendChild(corner);
-    },
-
-    _createCorner: function (bgColor) {
-        var dom = MochiKit.DOM;
-        return dom.DIV({style: {backgroundColor: bgColor.toString()}});
-    },
-
-    _createCornerSlice: function (color, bgColor, n, position) {
-        var slice = MochiKit.DOM.SPAN();
-
-        var inStyle = slice.style;
-        inStyle.backgroundColor = color.toString();
-        inStyle.display = "block";
-        inStyle.height = "1px";
-        inStyle.overflow = "hidden";
-        inStyle.fontSize = "1px";
-
-        var borderColor = this._borderColor(color, bgColor);
-        if (this.options.border && n == 0) {
-            inStyle.borderTopStyle = "solid";
-            inStyle.borderTopWidth = "1px";
-            inStyle.borderLeftWidth = "0px";
-            inStyle.borderRightWidth = "0px";
-            inStyle.borderBottomWidth = "0px";
-            // assumes css compliant box model
-            inStyle.height = "0px";
-            inStyle.borderColor = borderColor.toString();
-        } else if (borderColor) {
-            inStyle.borderColor = borderColor.toString();
-            inStyle.borderStyle = "solid";
-            inStyle.borderWidth = "0px 1px";
-        }
-
-        if (!this.options.compact && (n == (this.options.numSlices - 1))) {
-            inStyle.height = "2px";
-        }
-
-        this._setMargin(slice, n, position);
-        this._setBorder(slice, n, position);
-
-        return slice;
-    },
-
-    _setOptions: function (options) {
-        this.options = {
-            corners: "all",
-            color: "fromElement",
-            bgColor: "fromParent",
-            blend: true,
-            border: false,
-            compact: false,
-            __unstable__wrapElement: false
-        };
-        MochiKit.Base.update(this.options, options);
-
-        this.options.numSlices = (this.options.compact ? 2 : 4);
-    },
-
-    _whichSideTop: function () {
-        var corners = this.options.corners;
-        if (this._hasString(corners, "all", "top")) {
-            return "";
-        }
-
-        var has_tl = (corners.indexOf("tl") != -1);
-        var has_tr = (corners.indexOf("tr") != -1);
-        if (has_tl && has_tr) {
-            return "";
-        }
-        if (has_tl) {
-            return "left";
-        }
-        if (has_tr) {
-            return "right";
-        }
-        return "";
-    },
-
-    _whichSideBottom: function () {
-        var corners = this.options.corners;
-        if (this._hasString(corners, "all", "bottom")) {
-            return "";
-        }
-
-        var has_bl = (corners.indexOf('bl') != -1);
-        var has_br = (corners.indexOf('br') != -1);
-        if (has_bl && has_br) {
-            return "";
-        }
-        if (has_bl) {
-            return "left";
-        }
-        if (has_br) {
-            return "right";
-        }
-        return "";
-    },
-
-    _borderColor: function (color, bgColor) {
-        if (color == "transparent") {
-            return bgColor;
-        } else if (this.options.border) {
-            return this.options.border;
-        } else if (this.options.blend) {
-            return bgColor.blendedColor(color);
-        }
-        return "";
-    },
-
-
-    _setMargin: function (el, n, corners) {
-        var marginSize = this._marginSize(n) + "px";
-        var whichSide = (
-            corners == "top" ? this._whichSideTop() : this._whichSideBottom()
-        );
-        var style = el.style;
-
-        if (whichSide == "left") {
-            style.marginLeft = marginSize;
-            style.marginRight = "0px";
-        } else if (whichSide == "right") {
-            style.marginRight = marginSize;
-            style.marginLeft  = "0px";
-        } else {
-            style.marginLeft = marginSize;
-            style.marginRight = marginSize;
-        }
-    },
-
-    _setBorder: function (el, n, corners) {
-        var borderSize = this._borderSize(n) + "px";
-        var whichSide = (
-            corners == "top" ? this._whichSideTop() : this._whichSideBottom()
-        );
-
-        var style = el.style;
-        if (whichSide == "left") {
-            style.borderLeftWidth = borderSize;
-            style.borderRightWidth = "0px";
-        } else if (whichSide == "right") {
-            style.borderRightWidth = borderSize;
-            style.borderLeftWidth  = "0px";
-        } else {
-            style.borderLeftWidth = borderSize;
-            style.borderRightWidth = borderSize;
-        }
-    },
-
-    _marginSize: function (n) {
-        if (this.isTransparent) {
-            return 0;
-        }
-
-        var o = this.options;
-        if (o.compact && o.blend) {
-            var smBlendedMarginSizes = [1, 0];
-            return smBlendedMarginSizes[n];
-        } else if (o.compact) {
-            var compactMarginSizes = [2, 1];
-            return compactMarginSizes[n];
-        } else if (o.blend) {
-            var blendedMarginSizes = [3, 2, 1, 0];
-            return blendedMarginSizes[n];
-        } else {
-            var marginSizes = [5, 3, 2, 1];
-            return marginSizes[n];
-        }
-    },
-
-    _borderSize: function (n) {
-        var o = this.options;
-        var borderSizes;
-        if (o.compact && (o.blend || this.isTransparent)) {
-            return 1;
-        } else if (o.compact) {
-            borderSizes = [1, 0];
-        } else if (o.blend) {
-            borderSizes = [2, 1, 1, 1];
-        } else if (o.border) {
-            borderSizes = [0, 2, 0, 0];
-        } else if (this.isTransparent) {
-            borderSizes = [5, 3, 2, 1];
-        } else {
-            return 0;
-        }
-        return borderSizes[n];
-    },
-
-    _hasString: function (str) {
-        for (var i = 1; i< arguments.length; i++) {
-            if (str.indexOf(arguments[i]) != -1) {
-                return true;
-            }
-        }
-        return false;
-    },
-
-    _isTopRounded: function () {
-        return this._hasString(this.options.corners,
-            "all", "top", "tl", "tr"
-        );
-    },
-
-    _isBottomRounded: function () {
-        return this._hasString(this.options.corners,
-            "all", "bottom", "bl", "br"
-        );
-    },
-
-    _hasSingleTextChild: function (el) {
-        return (el.childNodes.length == 1 && el.childNodes[0].nodeType == 3);
-    }
+MochiKit.Signal.Event.prototype.stop=function(){
+this.stopPropagation();
+this.preventDefault();
 };
-
-MochiKit.Visual.roundElement = function (e, options) {
-    new MochiKit.Visual._RoundCorners(e, options);
+MochiKit.Signal.Event.prototype.stopPropagation=function(){
+if(this._event.stopPropagation){
+this._event.stopPropagation();
+}else{
+this._event.cancelBubble=true;
+}
 };
-
-MochiKit.Visual.roundClass = function (tagName, className, options) {
-    var elements = MochiKit.DOM.getElementsByTagAndClassName(
-        tagName, className
-    );
-    for (var i = 0; i < elements.length; i++) {
-        MochiKit.Visual.roundElement(elements[i], options);
-    }
+MochiKit.Signal.Event.prototype.preventDefault=function(){
+if(this._event.preventDefault){
+this._event.preventDefault();
+}else{
+this._event.returnValue=false;
+}
 };
-
-// Compatibility with MochiKit 1.0
-MochiKit.Visual.Color = MochiKit.Color.Color;
-MochiKit.Visual.getElementsComputedStyle = MochiKit.DOM.computedStyle;
-
-/* end of Rico adaptation */
-
-MochiKit.Visual.__new__  = function () {
-    var m = MochiKit.Base;
-
-    m.nameFunctions(this);
-
-    this.EXPORT_TAGS = {
-        ":common": this.EXPORT,
-        ":all": m.concat(this.EXPORT, this.EXPORT_OK)
-    };
-
+MochiKit.Signal.Event.prototype.__repr__=function(){
+var repr=MochiKit.Base.repr;
+var str="{event(): "+repr(this.event())+", type(): "+repr(this.type())+", target(): "+repr(this.target())+", modifier(): "+"{alt: "+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", meta: "+repr(this.modifier().meta)+", shift: "+repr(this.modifier().shift)+"}";
+if(this.type()&&this.type().indexOf("key")===0){
+str+=", key(): {code: "+repr(this.key().code)+", string: "+repr(this.key().string)+"}";
+}
+if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
+str+=", mouse(): {page: "+repr(this.mouse().page)+", client: "+repr(this.mouse().client);
+if(this.type()!="mousemove"){
+str+=", button: {left: "+repr(this.mouse().button.left)+", middle: "+repr(this.mouse().button.middle)+", right: "+repr(this.mouse().button.right)+"}}";
+}else{
+str+="}";
+}
+}
+if(this.type()=="mouseover"||this.type()=="mouseout"){
+str+=", relatedTarget(): "+repr(this.relatedTarget());
+}
+str+="}";
+return str;
 };
-
-MochiKit.Visual.EXPORT = [
-    "roundElement",
-    "roundClass"
-];
-
-MochiKit.Visual.EXPORT_OK = [];
-
+MochiKit.Signal.Event.prototype.toString=function(){
+return this.__repr__();
+};
+MochiKit.Base.update(MochiKit.Signal,{__repr__:function(){
+return "["+this.NAME+" "+this.VERSION+"]";
+},toString:function(){
+return this.__repr__();
+},_specialKeys:{8:"KEY_BACKSPACE",9:"KEY_TAB",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACE",33:"KEY_PAGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_LEFT_ARROW",38:"KEY_UP_ARROW",39:"KEY_RIGHT_ARROW",40:"KEY_DOWN_ARROW",45:"KEY_INSERT",46:"KEY_DELETE",91:"KEY_LEFT_WINDOW",92:"KEY_RIGHT_WINDOW",93:"KEY_SELECT",112:"KEY_F1",113:"KEY_F2",114:"KEY_F3",115:"KEY_F4",116:"KEY_F5",117:"KEY_F6",118:"KEY_F7",119:"KEY_F8",120:"KEY_F9",121:"KEY_F10",122:"KEY_F11",123:"KEY_F12",144:"KEY_NUM_LOCK",145:"KEY_SCROLL_LOCK"},_getSlot:function(slot,func){
+if(typeof (func)=="string"||typeof (func)=="function"){
+if(typeof (func)=="string"&&typeof (slot[func])=="undefined"){
+throw new Error("Invalid function slot");
+}
+slot=[slot,func];
+}else{
+if(!func&&typeof (slot)=="function"){
+slot=[slot];
+}else{
+throw new Error("Invalid slot parameters");
+}
+}
+return slot;
+},_unloadCache:function(){
+for(var i=0;i<MochiKit.Signal._observers.length;i++){
+var src=MochiKit.Signal._observers[i][0];
+var sig=MochiKit.Signal._observers[i][1];
+var _534=MochiKit.Signal._observers[i][2];
+try{
+if(src.addEventListener){
+src.removeEventListener(sig.substr(2),_534,false);
+}else{
+if(src.attachEvent){
+src.detachEvent(sig,_534);
+}else{
+src._signals[sig]=undefined;
+}
+}
+src._listeners[sig]=undefined;
+delete (src._listeners);
+delete (src._signals);
+}
+catch(e){
+}
+}
+MochiKit.Signal._observers=undefined;
+try{
+window.onload=undefined;
+}
+catch(e){
+}
+try{
+window.onunload=undefined;
+}
+catch(e){
+}
+},connect:function(src,sig,slot,func){
+if(typeof (src)=="string"){
+src=MochiKit.DOM.getElement(src);
+}
+if(typeof (sig)!="string"){
+throw new Error("'sig' must be a string");
+}
+slot=MochiKit.Signal._getSlot(slot,func);
+if(src.addEventListener||src.attachEvent||src[sig]){
+if(!src._listeners){
+src._listeners={};
+}
+if(!src._listeners[sig]){
+var _535=function(_536){
+var _537=new MochiKit.Signal.Event(_536);
+MochiKit.Signal.signal(src,sig,_537);
+return true;
+};
+MochiKit.Signal._observers.push([src,sig,_535]);
+if(src.addEventListener){
+src.addEventListener(sig.substr(2),_535,false);
+}else{
+if(src.attachEvent){
+src.attachEvent(sig,_535);
+}else{
+src[sig]=_535;
+}
+}
+src._listeners[sig]=_535;
+}
+if(!src._signals){
+src._signals={};
+}
+if(!src._signals[sig]){
+src._signals[sig]=[];
+}
+}else{
+if(!src._signals||!src._signals[sig]){
+throw new Error("No such signal '"+sig+"' registered.");
+}
+}
+var _538=src._signals[sig];
+for(var i=0;i<_538.length;i++){
+var s=_538[i];
+if(slot[0]===s[0]&&slot[1]===s[1]&&slot[2]===s[2]){
+return;
+}
+}
+_538.push(slot);
+},disconnect:function(src,sig,slot,func){
+if(typeof (src)=="string"){
+src=MochiKit.DOM.getElement(src);
+}
+if(typeof (sig)!="string"){
+throw new Error("'signal' must be a string");
+}
+slot=MochiKit.Signal._getSlot(slot,func);
+if(src._signals&&src._signals[sig]){
+var _539=src._signals[sig];
+var _540=_539.length;
+for(var i=0;i<_539.length;i++){
+var s=_539[i];
+if(s[0]===slot[0]&&s[1]===slot[1]&&s[2]===slot[2]){
+_539.splice(i,1);
+break;
+}
+}
+}else{
+throw new Error("Invalid signal to disconnect");
+}
+if(src.addEventListener||src.attachEvent||src._signals[sig]){
+if(src._listeners&&src._listeners[sig]&&src._signals[sig].length===0){
+var _541=src._listeners[sig];
+if(src.addEventListener){
+src.removeEventListener(sig.substr(2),_541,false);
+}else{
+if(src.attachEvent){
+src.detachEvent(sig,_541);
+}else{
+src._signals[sig]=undefined;
+}
+}
+var _542=MochiKit.Signal._observers;
+for(var i=0;i<_542.length;i++){
+var o=_542[i];
+if(o[0]===src&&o[1]===sig&&o[2]===_541){
+_542.splice(i,1);
+break;
+}
+}
+src._listeners[sig]=undefined;
+}
+}
+},signal:function(src,sig){
+if(typeof (src)=="string"){
+src=MochiKit.DOM.getElement(src);
+}
+if(typeof (sig)!="string"){
+throw new Error("'signal' must be a string");
+}
+if(!src._signals||!src._signals[sig]){
+if(src.addEventListener||src.attachEvent||src[sig]){
+return;
+}else{
+throw new Error("No such signal '"+sig+"'");
+}
+}
+var _543=src._signals[sig];
+var args=MochiKit.Base.extend(null,arguments,2);
+var slot;
+var _544=[];
+for(var i=0;i<_543.length;i++){
+slot=_543[i];
+try{
+if(slot.length==1){
+slot[0].apply(src,args);
+}else{
+if(typeof (slot[1])=="string"){
+slot[0][slot[1]].apply(slot[0],args);
+}else{
+slot[1].apply(slot[0],args);
+}
+}
+}
+catch(e){
+_544.push(e);
+}
+}
+if(_544.length==1){
+throw _544[0];
+}else{
+if(_544.length){
+var e=new Error("There were errors in handling signal 'sig'.");
+e.errors=_544;
+throw e;
+}
+}
+},registerSignals:function(src,_545){
+if(!src._signals){
+src._signals={};
+}
+for(var i=0;i<_545.length;i++){
+var sig=_545[i];
+if(!src._signals[sig]){
+src._signals[sig]=[];
+}
+}
+}});
+MochiKit.Signal.EXPORT_OK=[];
+MochiKit.Signal.EXPORT=["connect","disconnect","signal","registerSignals"];
+MochiKit.Signal.__new__=function(win){
+var m=MochiKit.Base;
+this._document=document;
+this._window=win;
+try{
+this.connect(window,"onunload",this._unloadCache);
+}
+catch(e){
+}
+this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
+m.nameFunctions(this);
+};
+MochiKit.Signal.__new__(this);
+MochiKit.Base._exportSymbols(this,MochiKit.Signal);
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.Visual");
+dojo.require("MochiKit.Base");
+dojo.require("MochiKit.DOM");
+dojo.require("MochiKit.Color");
+}
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Base",[]);
+JSAN.use("MochiKit.DOM",[]);
+JSAN.use("MochiKit.Color",[]);
+}
+try{
+if(typeof (MochiKit.Base)=="undefined"||typeof (MochiKit.DOM)=="undefined"||typeof (MochiKit.Color)=="undefined"){
+throw "";
+}
+}
+catch(e){
+throw "MochiKit.Visual depends on MochiKit.Base, MochiKit.DOM and MochiKit.Color!";
+}
+if(typeof (MochiKit.Visual)=="undefined"){
+MochiKit.Visual={};
+}
+MochiKit.Visual.NAME="MochiKit.Visual";
+MochiKit.Visual.VERSION="1.3";
+MochiKit.Visual.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
+};
+MochiKit.Visual.toString=function(){
+return this.__repr__();
+};
+MochiKit.Visual._RoundCorners=function(e,_546){
+e=MochiKit.DOM.getElement(e);
+this._setOptions(_546);
+if(this.options.__unstable__wrapElement){
+e=this._doWrap(e);
+}
+var _547=this.options.color;
+var C=MochiKit.Color.Color;
+if(this.options.color=="fromElement"){
+_547=C.fromBackground(e);
+}else{
+if(!(_547 instanceof C)){
+_547=C.fromString(_547);
+}
+}
+this.isTransparent=(_547.asRGB().a<=0);
+var _549=this.options.bgColor;
+if(this.options.bgColor=="fromParent"){
+_549=C.fromBackground(e.offsetParent);
+}else{
+if(!(_549 instanceof C)){
+_549=C.fromString(_549);
+}
+}
+this._roundCornersImpl(e,_547,_549);
+};
+MochiKit.Visual._RoundCorners.prototype={_doWrap:function(e){
+var _550=e.parentNode;
+var doc=MochiKit.DOM.currentDocument();
+if(typeof (doc.defaultView)=="undefined"||doc.defaultView==null){
+return e;
+}
+var _551=doc.defaultView.getComputedStyle(e,null);
+if(typeof (_551)=="undefined"||_551==null){
+return e;
+}
+var _552=MochiKit.DOM.DIV({"style":{display:"block",marginTop:_551.getPropertyValue("padding-top"),marginRight:_551.getPropertyValue("padding-right"),marginBottom:_551.getPropertyValue("padding-bottom"),marginLeft:_551.getPropertyValue("padding-left"),padding:"0px"}});
+_552.innerHTML=e.innerHTML;
+e.innerHTML="";
+e.appendChild(_552);
+return e;
+},_roundCornersImpl:function(e,_553,_554){
+if(this.options.border){
+this._renderBorder(e,_554);
+}
+if(this._isTopRounded()){
+this._roundTopCorners(e,_553,_554);
+}
+if(this._isBottomRounded()){
+this._roundBottomCorners(e,_553,_554);
+}
+},_renderBorder:function(el,_555){
+var _556="1px solid "+this._borderColor(_555);
+var _557="border-left: "+_556;
+var _558="border-right: "+_556;
+var _559="style='"+_557+";"+_558+"'";
+el.innerHTML="<div "+_559+">"+el.innerHTML+"</div>";
+},_roundTopCorners:function(el,_560,_561){
+var _562=this._createCorner(_561);
+for(var i=0;i<this.options.numSlices;i++){
+_562.appendChild(this._createCornerSlice(_560,_561,i,"top"));
+}
+el.style.paddingTop=0;
+el.insertBefore(_562,el.firstChild);
+},_roundBottomCorners:function(el,_563,_564){
+var _565=this._createCorner(_564);
+for(var i=(this.options.numSlices-1);i>=0;i--){
+_565.appendChild(this._createCornerSlice(_563,_564,i,"bottom"));
+}
+el.style.paddingBottom=0;
+el.appendChild(_565);
+},_createCorner:function(_566){
+var dom=MochiKit.DOM;
+return dom.DIV({style:{backgroundColor:_566.toString()}});
+},_createCornerSlice:function(_567,_568,n,_569){
+var _570=MochiKit.DOM.SPAN();
+var _571=_570.style;
+_571.backgroundColor=_567.toString();
+_571.display="block";
+_571.height="1px";
+_571.overflow="hidden";
+_571.fontSize="1px";
+var _572=this._borderColor(_567,_568);
+if(this.options.border&&n==0){
+_571.borderTopStyle="solid";
+_571.borderTopWidth="1px";
+_571.borderLeftWidth="0px";
+_571.borderRightWidth="0px";
+_571.borderBottomWidth="0px";
+_571.height="0px";
+_571.borderColor=_572.toString();
+}else{
+if(_572){
+_571.borderColor=_572.toString();
+_571.borderStyle="solid";
+_571.borderWidth="0px 1px";
+}
+}
+if(!this.options.compact&&(n==(this.options.numSlices-1))){
+_571.height="2px";
+}
+this._setMargin(_570,n,_569);
+this._setBorder(_570,n,_569);
+return _570;
+},_setOptions:function(_573){
+this.options={corners:"all",color:"fromElement",bgColor:"fromParent",blend:true,border:false,compact:false,__unstable__wrapElement:false};
+MochiKit.Base.update(this.options,_573);
+this.options.numSlices=(this.options.compact?2:4);
+},_whichSideTop:function(){
+var _574=this.options.corners;
+if(this._hasString(_574,"all","top")){
+return "";
+}
+var _575=(_574.indexOf("tl")!=-1);
+var _576=(_574.indexOf("tr")!=-1);
+if(_575&&_576){
+return "";
+}
+if(_575){
+return "left";
+}
+if(_576){
+return "right";
+}
+return "";
+},_whichSideBottom:function(){
+var _577=this.options.corners;
+if(this._hasString(_577,"all","bottom")){
+return "";
+}
+var _578=(_577.indexOf("bl")!=-1);
+var _579=(_577.indexOf("br")!=-1);
+if(_578&&_579){
+return "";
+}
+if(_578){
+return "left";
+}
+if(_579){
+return "right";
+}
+return "";
+},_borderColor:function(_580,_581){
+if(_580=="transparent"){
+return _581;
+}else{
+if(this.options.border){
+return this.options.border;
+}else{
+if(this.options.blend){
+return _581.blendedColor(_580);
+}
+}
+}
+return "";
+},_setMargin:function(el,n,_582){
+var _583=this._marginSize(n)+"px";
+var _584=(_582=="top"?this._whichSideTop():this._whichSideBottom());
+var _585=el.style;
+if(_584=="left"){
+_585.marginLeft=_583;
+_585.marginRight="0px";
+}else{
+if(_584=="right"){
+_585.marginRight=_583;
+_585.marginLeft="0px";
+}else{
+_585.marginLeft=_583;
+_585.marginRight=_583;
+}
+}
+},_setBorder:function(el,n,_586){
+var _587=this._borderSize(n)+"px";
+var _588=(_586=="top"?this._whichSideTop():this._whichSideBottom());
+var _589=el.style;
+if(_588=="left"){
+_589.borderLeftWidth=_587;
+_589.borderRightWidth="0px";
+}else{
+if(_588=="right"){
+_589.borderRightWidth=_587;
+_589.borderLeftWidth="0px";
+}else{
+_589.borderLeftWidth=_587;
+_589.borderRightWidth=_587;
+}
+}
+},_marginSize:function(n){
+if(this.isTransparent){
+return 0;
+}
+var o=this.options;
+if(o.compact&&o.blend){
+var _590=[1,0];
+return _590[n];
+}else{
+if(o.compact){
+var _591=[2,1];
+return _591[n];
+}else{
+if(o.blend){
+var _592=[3,2,1,0];
+return _592[n];
+}else{
+var _593=[5,3,2,1];
+return _593[n];
+}
+}
+}
+},_borderSize:function(n){
+var o=this.options;
+var _594;
+if(o.compact&&(o.blend||this.isTransparent)){
+return 1;
+}else{
+if(o.compact){
+_594=[1,0];
+}else{
+if(o.blend){
+_594=[2,1,1,1];
+}else{
+if(o.border){
+_594=[0,2,0,0];
+}else{
+if(this.isTransparent){
+_594=[5,3,2,1];
+}else{
+return 0;
+}
+}
+}
+}
+}
+return _594[n];
+},_hasString:function(str){
+for(var i=1;i<arguments.length;i++){
+if(str.indexOf(arguments[i])!=-1){
+return true;
+}
+}
+return false;
+},_isTopRounded:function(){
+return this._hasString(this.options.corners,"all","top","tl","tr");
+},_isBottomRounded:function(){
+return this._hasString(this.options.corners,"all","bottom","bl","br");
+},_hasSingleTextChild:function(el){
+return (el.childNodes.length==1&&el.childNodes[0].nodeType==3);
+}};
+MochiKit.Visual.roundElement=function(e,_595){
+new MochiKit.Visual._RoundCorners(e,_595);
+};
+MochiKit.Visual.roundClass=function(_596,_597,_598){
+var _599=MochiKit.DOM.getElementsByTagAndClassName(_596,_597);
+for(var i=0;i<_599.length;i++){
+MochiKit.Visual.roundElement(_599[i],_598);
+}
+};
+MochiKit.Visual.Color=MochiKit.Color.Color;
+MochiKit.Visual.getElementsComputedStyle=MochiKit.DOM.computedStyle;
+MochiKit.Visual.__new__=function(){
+var m=MochiKit.Base;
+m.nameFunctions(this);
+this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
+};
+MochiKit.Visual.EXPORT=["roundElement","roundClass"];
+MochiKit.Visual.EXPORT_OK=[];
 MochiKit.Visual.__new__();
+MochiKit.Base._exportSymbols(this,MochiKit.Visual);
+if(typeof (MochiKit)=="undefined"){
+MochiKit={};
+}
+if(typeof (MochiKit.MochiKit)=="undefined"){
+MochiKit.MochiKit={};
+}
+MochiKit.MochiKit.NAME="MochiKit.MochiKit";
+MochiKit.MochiKit.VERSION="1.3";
+MochiKit.MochiKit.__repr__=function(){
+return "["+this.NAME+" "+this.VERSION+"]";
+};
+MochiKit.MochiKit.toString=function(){
+return this.__repr__();
+};
+MochiKit.MochiKit.SUBMODULES=["Base","Iter","Logging","DateTime","Format","Async","DOM","LoggingPane","Color","Signal","Visual"];
+if(typeof (JSAN)!="undefined"||typeof (dojo)!="undefined"){
+if(typeof (dojo)!="undefined"){
+dojo.provide("MochiKit.MochiKit");
+dojo.require("MochiKit.*");
+}
+if(typeof (JSAN)!="undefined"){
+JSAN.use("MochiKit.Base",[]);
+JSAN.use("MochiKit.Iter",[]);
+JSAN.use("MochiKit.Logging",[]);
+JSAN.use("MochiKit.DateTime",[]);
+JSAN.use("MochiKit.Format",[]);
+JSAN.use("MochiKit.Async",[]);
+JSAN.use("MochiKit.DOM",[]);
+JSAN.use("MochiKit.LoggingPane",[]);
+JSAN.use("MochiKit.Color",[]);
+JSAN.use("MochiKit.Signal",[]);
+JSAN.use("MochiKit.Visual",[]);
+}
+(function(){
+var _600=MochiKit.Base.extend;
+var self=MochiKit.MochiKit;
+var _601=self.SUBMODULES;
+var _602=[];
+var _603=[];
+var _604={};
+var i,k,m,all;
+for(i=0;i<_601.length;i++){
+m=MochiKit[_601[i]];
+_600(_602,m.EXPORT);
+_600(_603,m.EXPORT_OK);
+for(k in m.EXPORT_TAGS){
+_604[k]=_600(_604[k],m.EXPORT_TAGS[k]);
+}
+all=m.EXPORT_TAGS[":all"];
+if(!all){
+all=_600(null,m.EXPORT,m.EXPORT_OK);
+}
+var j;
+for(j=0;j<all.length;j++){
+k=all[j];
+self[k]=m[k];
+}
+}
+self.EXPORT=_602;
+self.EXPORT_OK=_603;
+self.EXPORT_TAGS=_604;
+}());
+}else{
+if(typeof (MochiKit.__compat__)=="undefined"){
+MochiKit.__compat__=true;
+}
+(function(){
+var _605=document.getElementsByTagName("script");
+var _606="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+var base=null;
+var _607=null;
+var _608={};
+var i;
+for(i=0;i<_605.length;i++){
+var src=_605[i].getAttribute("src");
+if(!src){
+continue;
+}
+_608[src]=true;
+if(src.match(/MochiKit.js$/)){
+base=src.substring(0,src.lastIndexOf("MochiKit.js"));
+_607=_605[i];
+}
+}
+if(base==null){
+return;
+}
+var _609=MochiKit.MochiKit.SUBMODULES;
+for(var i=0;i<_609.length;i++){
+if(MochiKit[_609[i]]){
+continue;
+}
+var uri=base+_609[i]+".js";
+if(uri in _608){
+continue;
+}
+if(document.documentElement&&document.documentElement.namespaceURI==_606){
+var s=document.createElementNS(_606,"script");
+s.setAttribute("id","MochiKit_"+base+_609[i]);
+s.setAttribute("src",uri);
+s.setAttribute("type","application/x-javascript");
+_607.parentNode.appendChild(s);
+}else{
+document.write("<script src=\""+uri+"\" type=\"text/javascript\"></script>");
+}
+}
+})();
+}
 
-MochiKit.Base._exportSymbols(this, MochiKit.Visual);
+

Modified: trunk/tests/test_View.js
===================================================================
--- trunk/tests/test_View.js	2006-03-12 15:56:31 UTC (rev 9)
+++ trunk/tests/test_View.js	2006-03-19 01:41:45 UTC (rev 10)
@@ -4,6 +4,8 @@
 
 tests.test_View = function (t) {
 	Freja.AssetManager.HTTP_REQUEST_TYPE = "sync";
+	Freja.AssetManager.XSLT_SERVICE_URL = "../external/srvc-xslt.php";
+	Freja.AssetManager.XSLT_SERVICE_URL = "../external/srvc-xslt.php?path=tests/";
 	var view = Freja.AssetManager.getView("data/view.xsl");
 	t.ok(view instanceof Freja.View);
 	t.is(view.ready, true, "state should be ready (loaded)");
@@ -13,10 +15,10 @@
 	var out = document.createElement("DIV");
 	view.placeholder = out;
 	view.render(model);
-	t.ok(out.firstChild.nodeName.toLowerCase() == "div");
-	t.ok(out.firstChild.firstChild.nodeName.toLowerCase() == "h3");
-	t.is(out.firstChild.firstChild.firstChild.nodeValue, model.get("item/name"), "Rendered view should contain the models value");
 
+	t.is(out.getElementsByTagName("H3").length, 1);
+	t.is(out.getElementsByTagName("H3").item(0).firstChild.nodeValue, model.get("item/name"), "Rendered view should contain the models value");
+
 	// test of form
 	var formView = Freja.AssetManager.getView("data/form-view.xsl");
 	var testofsubmit = false;



From troelskn at berlios.de  Tue Mar 21 16:45:23 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Tue, 21 Mar 2006 16:45:23 +0100
Subject: [Freja-svn] r13 - trunk/lib
Message-ID: <200603211545.k2LFjNpX029300@sheep.berlios.de>

Author: troelskn
Date: 2006-03-21 16:45:22 +0100 (Tue, 21 Mar 2006)
New Revision: 13

Modified:
   trunk/lib/Freja.js
Log:
Changes to Class.extend
renamed superClass to superstructor
introduced supertype

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-19 14:27:03 UTC (rev 12)
+++ trunk/lib/Freja.js	2006-03-21 15:45:22 UTC (rev 13)
@@ -55,14 +55,20 @@
 /**
   * Single-hierarchy inheritance (class emulation)
   * @see    http://www.itsalleasy.com/2006/02/05/prototype-chain/
+  *
+  * Extends one prototype by another.
+  * The subtype will have two specialpurpose properties:
+  *     superstructor    The parent prototype's constructor
+  *     supertype        The parent prototype
   */
 Freja.Class = {};
-Freja.Class.extend = function(subClass, superClass) {
+Freja.Class.extend = function(subClass, superstructor) {
 	var inlineSuper = function(){};
-	inlineSuper.prototype = superClass.prototype;
+	inlineSuper.prototype = superstructor.prototype;
 	subClass.prototype = new inlineSuper();
 	subClass.prototype.constructor = subClass;
-	subClass.prototype.superClass = superClass;
+	subClass.prototype.superstructor = superstructor;
+	subClass.prototype.supertype = superstructor.prototype;
 }
 /**
   * This code was written by Tyler Akins and has been placed in the



From troelskn at berlios.de  Wed Mar 22 21:45:42 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Wed, 22 Mar 2006 21:45:42 +0100
Subject: [Freja-svn] r14 - trunk/lib
Message-ID: <200603222045.k2MKjgTH004118@sheep.berlios.de>

Author: troelskn
Date: 2006-03-22 21:45:39 +0100 (Wed, 22 Mar 2006)
New Revision: 14

Modified:
   trunk/lib/Freja.js
Log:
Cleaned up http-requests

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-21 15:45:22 UTC (rev 13)
+++ trunk/lib/Freja.js	2006-03-22 20:45:39 UTC (rev 14)
@@ -71,43 +71,6 @@
 	subClass.prototype.supertype = superstructor.prototype;
 }
 /**
-  * This code was written by Tyler Akins and has been placed in the
-  * public domain.  It would be nice if you left this header intact.
-  * Base64 code from Tyler Akins -- http://rumkin.com
-  */
-Freja.Base64 = {};
-Freja.Base64.keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
-Freja.Base64.encode = function(input) {
-	var output = "";
-	var chr1, chr2, chr3;
-	var enc1, enc2, enc3, enc4;
-	var i = 0;
-	var keyStr = this.keyStr;
-
-	do {
-		chr1 = input.charCodeAt(i++);
-		chr2 = input.charCodeAt(i++);
-		chr3 = input.charCodeAt(i++);
-
-		enc1 = chr1 >> 2;
-		enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
-		enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
-		enc4 = chr3 & 63;
-
-		if (isNaN(chr2)) {
-			enc3 = enc4 = 64;
-		} else if (isNaN(chr3)) {
-			enc4 = 64;
-		}
-
-		output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +
-		keyStr.charAt(enc3) + keyStr.charAt(enc4);
-	} while (i < input.length);
-
-	return output;
-}
-
-/**
   * The baseclass for queryengines
   * @abstract
   */
@@ -246,13 +209,7 @@
 	// since the serialization may fail, we create a deferred for the
 	// purpose, rather than just returning the sendXMLHttpRequest directly.
 	var d = new MochiKit.Async.Deferred();
-
-	var req = new XMLHttpRequest();
-	req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
-	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
-		req.setRequestHeader("Authorization", auth);
-	}
+	var req = Freja.AssetManager.openXMLHttpRequest("POST", url);
 	try {
 		// for some obscure reason exceptions aren't thrown back if I call the
 		// shorthand version of sendXMLHttpRequest in IE6.
@@ -272,18 +229,7 @@
 	if (match) {
 		url = match[1] + url; // local
 	}
-	var req = new XMLHttpRequest();
-	if (Freja.AssetManager.HTTP_METHOD_TUNNEL) {
-		req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
-		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "DELETE");
-		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
-	} else {
-		req.open("DELETE", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
-	}
-	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
-		req.setRequestHeader("Authorization", auth);
-	}
+	var req = Freja.AssetManager.openXMLHttpRequest("DELETE", url);
 	return MochiKit.Async.sendXMLHttpRequest(req);
 }
 /**
@@ -324,19 +270,7 @@
 	if (match) {
 		url = match[1] + url; // local
 	}
-	var req = new XMLHttpRequest();
-	if (Freja.AssetManager.HTTP_METHOD_TUNNEL) {
-		req.open("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
-		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "PUT");
-		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
-	} else {
-		req.open("PUT", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async");
-	}
-	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
-		req.setRequestHeader("Authorization", auth);
-	}
-
+	var req = Freja.AssetManager.openXMLHttpRequest("PUT", url);
 	var payload = {};
 	for (var i = 0, len = values[0].length; i < len; ++i) {
 		payload[values[0][i]] = values[1][i];
@@ -525,7 +459,7 @@
 //	if (xslParams)
 //		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParams.toString());
 	// send request to the server-side XSL transformation service
-	var req = new XMLHttpRequest();
+	var req = Freja.AssetManager.openXMLHttpRequest("POST", Freja.AssetManager.XSLT_SERVICE_URL);
 	req.onreadystatechange = function() {
 		if (req.readyState == 4) {
 			if (req.status == 200) {
@@ -535,13 +469,6 @@
 			}
 		}
 	}
-	var async = Freja.AssetManager.HTTP_REQUEST_TYPE == "async";
-	req.open("POST", Freja.AssetManager.XSLT_SERVICE_URL, async);
-	req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
-	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-		var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
-		req.setRequestHeader("Authorization", auth);
-	}
 	req.send(postedData);
 	return d;
 }
@@ -651,6 +578,30 @@
 	return v;
 }
 /**
+  * Creates and opens a http-request, tunneling exotic methods if needed.
+  */
+Freja.AssetManager.openXMLHttpRequest = function(method, url) {
+	var req = new XMLHttpRequest();
+	var async = Freja.AssetManager.HTTP_REQUEST_TYPE == "async";
+	var tunnel = null;
+	if (Freja.AssetManager.HTTP_METHOD_TUNNEL && method != "GET" && method != "POST") {
+		tunnel = method;
+		method = "POST";
+	}
+	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+		req.open(method, url, async, Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
+	} else {
+		req.open(method, url, async);
+	}
+	if (tunnel) {
+		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, tunnel);
+	}
+	if (method == "POST" || method == "PUT") {
+		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+	}
+	return req;
+}
+/**
   * @returns MochiKit.Async.Deferred
   */
 Freja.AssetManager.loadAsset = function(url, preventCaching) {
@@ -680,16 +631,21 @@
 		var req = new XMLHttpRequest();
 		var async = Freja.AssetManager.HTTP_REQUEST_TYPE == "async";
 		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
-			req.open("POST", url, async);
+			if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+				req.open("POST", url, async, Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
+			} else {
+				req.open("POST", url, async);
+			}
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 		} else {
-			req.open("GET", url, async);
+			if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
+				req.open("GET", url, async, Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
+			} else {
+				req.open("GET", url, async);
+			}
 		}
-		if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-			var auth = "Basic " + Freja.Base64.encode(Freja.AssetManager.USERNAME + ":" + Freja.AssetManager.PASSWORD);
-			req.setRequestHeader("Authorization", auth);
-		}
+
 		// This shouldn't be nescesary, but alas it is - firefox chokes
 		// It's probably due to an error in MochiKit, so the problem
 		// should be fixed there.
@@ -697,7 +653,7 @@
 		if (async) {
 			comm.addCallbacks(handler, bind(d.errback, d));
 		} else {
-			if (req.status == 200 || req.status == 304) {
+			if (req.status == 0 || req.status == 200 || req.status == 304) {
 				handler(req);
 			} else {
 				d.errback(new Error("Request failed:" + req.status));



From troelskn at berlios.de  Tue Mar 28 02:55:20 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Tue, 28 Mar 2006 02:55:20 +0200
Subject: [Freja-svn] r15 - trunk/lib
Message-ID: <200603280055.k2S0tKXO010923@sheep.berlios.de>

Author: troelskn
Date: 2006-03-28 02:53:41 +0200 (Tue, 28 Mar 2006)
New Revision: 15

Modified:
   trunk/lib/Freja.js
Log:
Isolated all dependencies on external libraries in Freja.External

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-22 20:45:39 UTC (rev 14)
+++ trunk/lib/Freja.js	2006-03-28 00:53:41 UTC (rev 15)
@@ -11,6 +11,29 @@
   */
 if (typeof(dojo) != "undefined") {
 	dojo.provide("Freja");
+}
+if (typeof(Freja) == "undefined") {
+	Freja = {};
+}
+Freja.NAME = "Freja";
+Freja.VERSION = "2.0.alpha";
+Freja.__repr__ = function () {
+	return "[" + this.NAME + " " + this.VERSION + "]";
+};
+Freja.toString = function () {
+	return this.__repr__();
+};
+/**
+  * Package : end
+  */
+/**
+  * Freja.External
+  * wrapper for external functionality (frameworks).
+  * You shouldn't rely onthis functionality - it's merely a hook for Freja towards
+  * external dependencies. This is the only part of the application you'll need to
+  * adjust, to make Freja play ball with your favourite framework.
+  */
+if (typeof(dojo) != "undefined") {
 	dojo.require("MochiKit.Base");
 	dojo.require("MochiKit.Signal");
 	dojo.require("MochiKit.Async");
@@ -38,37 +61,70 @@
 } catch (e) {
 	throw new Error("Freja depends on MochiKit.Base, MochiKit.Signal, MochiKit.Async and Sarissa!");
 }
-if (typeof(Freja) == "undefined") {
-	Freja = {};
-}
-Freja.NAME = "Freja";
-Freja.VERSION = "2.0.alpha";
-Freja.__repr__ = function () {
-	return "[" + this.NAME + " " + this.VERSION + "]";
+Freja.External = {};
+/** bind(func, self[, arg, ...]) : function */
+Freja.External.bind = MochiKit.Base.bind;
+
+/** registerSignals(src, signals) : void */
+Freja.External.registerSignals = MochiKit.Signal.registerSignals;
+/** connect(src, signal, dest[, func]) : void */
+Freja.External.connect = MochiKit.Signal.connect;
+/** signal(src, signal, ...) : void */
+Freja.External.signal = MochiKit.Signal.signal;
+/** createDeferred() : Deferred */
+Freja.External.createDeferred = function() {
+	return new MochiKit.Async.Deferred();
 };
-Freja.toString = function () {
-	return this.__repr__();
+/** openXMLHttpRequest(method, url, async, user, pass) : XMLHttpRequest */
+Freja.External.openXMLHttpRequest = function(method, url, async, user, pass) {
+	var req = new XMLHttpRequest();
+	if (user && pass) {
+		req.open(method, url, async, user, pass);
+	} else {
+		req.open(method, url, async);
+	}
+	if (method == "POST" || method == "PUT") {
+		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+	}
+	return req;
 };
+/** sendXMLHttpRequest(req, sendContent) : Deferred */
+Freja.External.sendXMLHttpRequest = MochiKit.Async.sendXMLHttpRequest;
+/** xmlize(anyObject, objectName) : string */
+Freja.External.xmlize = Sarissa.xmlize;
+/** serializeXML(node) : string */
+Freja.External.serializeXML = Sarissa.serialize;
+/** loadXML(string) : XMLDocument */
+Freja.External.loadXML = function(text) {
+	return (new DOMParser()).parseFromString(text, "text/xml");
+};
+/** transformXSL(XMLDocument, XSLDocument) : string */
+Freja.External.transformXSL = function(xml, xsl) {
+	var processor = new XSLTProcessor();
+	processor.importStylesheet(xsl);
+	return Freja.External.serializeXML(processor.transformToDocument(xml));
+
+};
+/** hasSupportForXSLT() : boolean */
+Freja.External.hasSupportForXSLT = (typeof(XSLTProcessor) != "undefined");
 /**
-  * Package : end
-  */
-/**
   * Single-hierarchy inheritance (class emulation)
   * @see    http://www.itsalleasy.com/2006/02/05/prototype-chain/
+  *         http://www.itsalleasy.com/2006/02/24/classjs-third-time-is-the-charm/
   *
   * Extends one prototype by another.
   * The subtype will have two specialpurpose properties:
-  *     superstructor    The parent prototype's constructor
+  *     superconstructor    The parent prototype's constructor
   *     supertype        The parent prototype
   */
 Freja.Class = {};
-Freja.Class.extend = function(subClass, superstructor) {
+Freja.Class.extend = function(subClass, superconstructor) {
 	var inlineSuper = function(){};
-	inlineSuper.prototype = superstructor.prototype;
+	inlineSuper.prototype = superconstructor.prototype;
 	subClass.prototype = new inlineSuper();
 	subClass.prototype.constructor = subClass;
-	subClass.prototype.superstructor = superstructor;
-	subClass.prototype.supertype = superstructor.prototype;
+	subClass.prototype.superconstructor = superconstructor;
+	subClass.prototype.supertype = superconstructor.prototype;
 }
 /**
   * The baseclass for queryengines
@@ -158,7 +214,7 @@
 	this.ready = false;
 	this.document = null;
 	this.query = query;
-	registerSignals(this, ["onload"]);
+	Freja.External.registerSignals(this, ["onload"]);
 }
 /**
   * Returns a single value
@@ -208,12 +264,12 @@
 	}
 	// since the serialization may fail, we create a deferred for the
 	// purpose, rather than just returning the sendXMLHttpRequest directly.
-	var d = new MochiKit.Async.Deferred();
+	var d = Freja.External.createDeferred();
 	var req = Freja.AssetManager.openXMLHttpRequest("POST", url);
 	try {
 		// for some obscure reason exceptions aren't thrown back if I call the
 		// shorthand version of sendXMLHttpRequest in IE6.
-		MochiKit.Async.sendXMLHttpRequest(req, Sarissa.serialize(this.document)).addCallbacks(bind(d.callback, d), bind(d.errback, d));
+		Freja.External.sendXMLHttpRequest(req, Freja.External.serializeXML(this.document)).addCallbacks(Freja.External.bind(d.callback, d), Freja.External.bind(d.errback, d));
 	} catch (ex) {
 		d.errback(ex);
 	}
@@ -230,17 +286,17 @@
 		url = match[1] + url; // local
 	}
 	var req = Freja.AssetManager.openXMLHttpRequest("DELETE", url);
-	return MochiKit.Async.sendXMLHttpRequest(req);
+	return Freja.External.sendXMLHttpRequest(req);
 }
 /**
   * @returns MochiKit.Async.Deferred
   */
 Freja.Model.prototype.reload = function() {
 	this.ready = false;
-	var onload = bind(function(document) {
+	var onload = Freja.External.bind(function(document) {
 		this.document = document;
 		this.ready = true;
-		MochiKit.Signal.signal(this, "onload");
+		Freja.External.signal(this, "onload");
 	}, this);
 	var d = Freja.AssetManager.loadAsset(this.url, true);
 	d.addCallbacks(onload, Freja.AssetManager.onerror);
@@ -275,7 +331,7 @@
 	for (var i = 0, len = values[0].length; i < len; ++i) {
 		payload[values[0][i]] = values[1][i];
 	}
-	return MochiKit.Async.sendXMLHttpRequest(req, Sarissa.xmlize(payload, 'record'));
+	return Freja.External.sendXMLHttpRequest(req, Freja.External.xmlize(payload, 'record'));
 }
 
 /**
@@ -290,8 +346,8 @@
 	this.handlers = [];
 	this.placeholder = null;
 	this.destination = null;
-	registerSignals(this, ["onload","onrendercomplete"]);
-	connect(this, "onrendercomplete", bind(this.connectBehaviour, this));
+	Freja.External.registerSignals(this, ["onload","onrendercomplete"]);
+	Freja.External.connect(this, "onrendercomplete", Freja.External.bind(this.connectBehaviour, this));
 }
 /**
   * @param    model            Freja.Model
@@ -310,22 +366,22 @@
 	Handler.prototype.trigger = function() {
 		try {
 			if (!this.view.ready) {
-				connect(this.view, "onload", bind(this.trigger, this));
+				Freja.External.connect(this.view, "onload", Freja.External.bind(this.trigger, this));
 				return;
 			}
 			if (this.model && !this.model.ready) {
-				connect(this.model, "onload", bind(this.trigger, this));
+				Freja.External.connect(this.model, "onload", Freja.External.bind(this.trigger, this));
 				return;
 			}
 			if (!model) {
-				model = { document : (new DOMParser()).parseFromString("<?xml version='1.0' ?><dummy/>", "text/xml")};
+				model = { document : Freja.External.loadXML("<?xml version='1.0' ?><dummy/>")};
 			}
 			var trans = this.view.renderer.transform(model, this.view);
-			trans.addCallback(bind(function(html) {
+			trans.addCallback(Freja.External.bind(function(html) {
 				this.destination.innerHTML = html;
 			}, this.view));
-			trans.addCallback(bind(function() {
-				MochiKit.Signal.signal(this, "onrendercomplete", this.destination)
+			trans.addCallback(Freja.External.bind(function() {
+				Freja.External.signal(this, "onrendercomplete", this.destination)
 			}, this.view));
 			trans.addCallback(this.deferred.callback);
 			trans.addErrback(this.deferred.errback);
@@ -334,7 +390,7 @@
 		}
 	}
 
-	var d = new MochiKit.Async.Deferred();
+	var d = Freja.External.createDeferred();
 	try {
 		var id = (typeof(placeholder) == "undefined") ? this.placeholder : placeholder;
 		this.destination = $(id);
@@ -358,7 +414,7 @@
 Freja.View.prototype.connectBehaviour = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
-			connect(node, eventType, bind(
+			Freja.External.connect(node, eventType, Freja.External.bind(
 				function(e) {
 					var allow = false;
 					try {
@@ -419,12 +475,9 @@
   * @returns MochiKit.Async.Deferred
   */
 Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view) {
-        var d = new MochiKit.Async.Deferred();
+        var d = Freja.External.createDeferred();
         try {
-		var processor = new XSLTProcessor();
-		processor.importStylesheet(view.document);
-		var result = processor.transformToDocument(model.document);
-		var html = Sarissa.serialize(result);
+		var html = Freja.External.transformXSL(model.document, view.document);
 		if (!html) {
 			d.errback(new Error("XSL Transformation error."));
 		} else {
@@ -451,11 +504,11 @@
   * @returns MochiKit.Async.Deferred
   */
 Freja.View.Renderer.RemoteXSLTransformer.prototype.transform = function(model, view) {
-        var d = new MochiKit.Async.Deferred();
+        var d = Freja.External.createDeferred();
 
 	// prepare posted data  (no need to send the XSL document, just its url)
 	var xslUrl = view.url;
-	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Sarissa.serialize(model.document));
+	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja.External.serializeXML(model.document));
 //	if (xslParams)
 //		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParams.toString());
 	// send request to the server-side XSL transformation service
@@ -523,7 +576,7 @@
   */
 Freja.AssetManager.createRenderer = function() {
 //	return new Freja.View.Renderer.RemoteXSLTransformer(this.XSLT_SERVICE_URL);
-	if (typeof(XSLTProcessor) != "undefined") {
+	if (Freja.External.hasSupportForXSLT) {
 		return new Freja.View.Renderer.XSLTransformer();
 	} else {
 		return new Freja.View.Renderer.RemoteXSLTransformer(this.XSLT_SERVICE_URL);
@@ -548,10 +601,10 @@
 		}
 	}
 	var m = new Freja.Model(url, this.createQueryEngine());
-	var onload = bind(function(document) {
+	var onload = Freja.External.bind(function(document) {
 		this.document = document;
 		this.ready = true;
-		MochiKit.Signal.signal(this, "onload");
+		Freja.External.signal(this, "onload");
 	}, m);
 	this.loadAsset(url, true).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.models.push(m);
@@ -568,10 +621,10 @@
 		}
 	}
 	var v = new Freja.View(url, this.createRenderer());
-	var onload = bind(function(document) {
+	var onload = Freja.External.bind(function(document) {
 		this.document = document;
 		this.ready = true;
-		MochiKit.Signal.signal(this, "onload");
+		Freja.External.signal(this, "onload");
 	}, v);
 	this.loadAsset(url, false).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.views.push(v);
@@ -581,24 +634,15 @@
   * Creates and opens a http-request, tunneling exotic methods if needed.
   */
 Freja.AssetManager.openXMLHttpRequest = function(method, url) {
-	var req = new XMLHttpRequest();
-	var async = Freja.AssetManager.HTTP_REQUEST_TYPE == "async";
 	var tunnel = null;
 	if (Freja.AssetManager.HTTP_METHOD_TUNNEL && method != "GET" && method != "POST") {
 		tunnel = method;
 		method = "POST";
 	}
-	if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-		req.open(method, url, async, Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
-	} else {
-		req.open(method, url, async);
-	}
+	var req = Freja.External.openXMLHttpRequest(method, url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
 	if (tunnel) {
 		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, tunnel);
 	}
-	if (method == "POST" || method == "PUT") {
-		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
-	}
 	return req;
 }
 /**
@@ -609,7 +653,7 @@
 	if (match) {
 		url = match[1] + url; // local
 	}
-	var d = new MochiKit.Async.Deferred();
+	var d = Freja.External.createDeferred();
 	var handler = function(transport) {
 		try {
 			if (transport.responseText == "") {
@@ -618,7 +662,7 @@
 			if (transport.responseXML.xml == "") {
 				// The server doesn't reply with Content-Type: text/xml
 				// this will happen if the file is loaded locally (through file://)
-				var document = (new DOMParser()).parseFromString(transport.responseText, "text/xml");
+				var document = Freja.External.loadXML(transport.responseText);
 			} else {
 				var document = transport.responseXML;
 			}
@@ -628,30 +672,20 @@
 		d.callback(document);
 	}
 	try {
-		var req = new XMLHttpRequest();
-		var async = Freja.AssetManager.HTTP_REQUEST_TYPE == "async";
 		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
-			if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-				req.open("POST", url, async, Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
-			} else {
-				req.open("POST", url, async);
-			}
+			var req = Freja.External.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 		} else {
-			if (Freja.AssetManager.USERNAME && Freja.AssetManager.PASSWORD) {
-				req.open("GET", url, async, Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
-			} else {
-				req.open("GET", url, async);
-			}
+			var req = Freja.External.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
 		}
 
 		// This shouldn't be nescesary, but alas it is - firefox chokes
 		// It's probably due to an error in MochiKit, so the problem
 		// should be fixed there.
-		var comm = MochiKit.Async.sendXMLHttpRequest(req);
-		if (async) {
-			comm.addCallbacks(handler, bind(d.errback, d));
+		var comm = Freja.External.sendXMLHttpRequest(req);
+		if (Freja.AssetManager.HTTP_REQUEST_TYPE == "async") {
+			comm.addCallbacks(handler, Freja.External.bind(d.errback, d));
 		} else {
 			if (req.status == 0 || req.status == 200 || req.status == 304) {
 				handler(req);
@@ -664,11 +698,18 @@
 	}
 	return d;
 }
+/**
+  * This is a default error-handler. You should provide your own.
+  * The handler is called if an asynchronous error happens, since
+  * this could not be caught with the usual try ... catch
+  *
+  * It ought to be replaced completely with Deferred
+  */
 Freja.AssetManager.onerror = function(ex) {
 	alert("Freja.AssetManager.onerror\n" + ex.message);
 }
 /**
   * Global exports
   */
-window.getModel = bind("getModel", Freja.AssetManager);
-window.getView = bind("getView", Freja.AssetManager);
\ No newline at end of file
+window.getModel = Freja.External.bind("getModel", Freja.AssetManager);
+window.getView = Freja.External.bind("getView", Freja.AssetManager);
\ No newline at end of file



From troelskn at berlios.de  Wed Mar 29 02:26:36 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Wed, 29 Mar 2006 02:26:36 +0200
Subject: [Freja-svn] r16 - in trunk: lib tests
Message-ID: <200603290026.k2T0Qaq6022772@sheep.berlios.de>

Author: troelskn
Date: 2006-03-29 02:25:54 +0200 (Wed, 29 Mar 2006)
New Revision: 16

Added:
   trunk/tests/test_Freja-History.html
   trunk/tests/test_History.js
Modified:
   trunk/lib/Freja.js
   trunk/tests/index.html
Log:
Added UndoHistory from Freja 1.1

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-28 00:53:41 UTC (rev 15)
+++ trunk/lib/Freja.js	2006-03-29 00:25:54 UTC (rev 16)
@@ -105,8 +105,49 @@
 	return Freja.External.serializeXML(processor.transformToDocument(xml));
 
 };
+/** cloneXMLDocument(document) : XMLDocument */
+Freja.External.cloneXMLDocument = function(xmlDoc) {
+	var clone = null;
+	try {
+		clone = xmlDoc.cloneNode(true);
+	} catch(e) { /* squelch */ }
+
+	// Can't clone a DocumentNode in Safari & Opera. Let's try something else.
+	// @note Wouldn't it be easier to serialize the document to string and the parse it to a new document ?
+	if (!clone) {
+		if (document.implementation && document.implementation.createDocument) {
+			clone = document.implementation.createDocument("", xmlDoc.documentElement.nodeName, null);
+			// importNode is not safe in Safari ! the source document is altered. used cloneNode to fix the prblm
+			var data = clone.importNode(xmlDoc.documentElement.cloneNode(true), true);
+			try {
+				clone.appendChild(data);
+			} catch(e) {
+				// Opera has already created a documentElement and can't append another root node
+				var rootNode = clone.documentElement;
+				for (var i = data.childNodes.length; i >= 0; i--) {
+					rootNode.insertBefore(data.childNodes[i], rootNode.firstChild);
+				}
+				// need to copy root node attributes
+				for (var i = 0; i < xmlDoc.documentElement.attributes.length; i++) {
+					var name  = xmlDoc.documentElement.attributes.item(i).name;
+					var value = xmlDoc.documentElement.attributes.item(i).value;
+					clone.documentElement.setAttribute(name, value);
+				}
+			}
+		}
+	}
+	return clone;
+};
 /** hasSupportForXSLT() : boolean */
 Freja.External.hasSupportForXSLT = (typeof(XSLTProcessor) != "undefined");
+/** createQueryEngine() : Freja.QueryEngine */
+Freja.External.createQueryEngine = function() {
+	if (Sarissa.IS_ENABLED_SELECT_NODES) {
+		return new Freja.QueryEngine.XPath();
+	} else {
+		return new Freja.QueryEngine.SimplePath();
+	}
+};
 /**
   * Single-hierarchy inheritance (class emulation)
   * @see    http://www.itsalleasy.com/2006/02/05/prototype-chain/
@@ -526,13 +567,98 @@
 	return d;
 }
 /**
+  * This is largely s copied with minor stylistic adjustments from Freja 1.1
+  * I renamed it from Controller.history to distinguish between window.history
+  */
+Freja.UndoHistory = function() {
+	this.cache = [];
+	this.maxLength = 5;
+	this._position = 0;
+	this._undoSteps = 0;
+};
+/**
+  * Creates a snapshot of the model and stores it.
+  */
+Freja.UndoHistory.prototype.add = function(model) {
+	var historyIndex = this._position % this.maxLength;
+
+	var modelDoc = model.document;
+	this.cache[historyIndex] = {};
+	this.cache[historyIndex].model = model;
+	this.cache[historyIndex].document = Freja.External.cloneXMLDocument(modelDoc);
+
+	if (!this.cache[historyIndex].document) {
+		throw new Error("Couldn't add to history.");
+	} else {
+		this._position++;
+		// clear rest of the history if undo was used.
+		var clearHistoryIndex = historyIndex;
+		while (this._undoSteps > 0) {
+			clearHistoryIndex = (clearHistoryIndex + 1) % this.maxLength;
+			this.cache[clearHistoryIndex] = {};
+			this._undoSteps--;
+		}
+		return historyIndex; // what would anybody need this for ?
+	}
+};
+/**
+  * Rolls the state back one step.
+  */
+Freja.UndoHistory.prototype.undo = function(steps) {
+	if (this._undoSteps < this.cache.length) {
+		this._undoSteps++;
+		this._position--;
+		if (this._position < 0) {
+			this._position = this.maxLength - 1;
+		}
+
+		var model = this.cache[this._position].model;
+		if (this.cache[this._position].document) {
+			model.document = this.cache[this._position].document;
+		} else {
+			throw new Error("The model's DOMDocument wasn't properly copied into the history");
+		}
+		if (typeof(steps) != "undefined" && steps > 1) {
+			this.undo(steps - 1);
+		}
+	} else {
+		throw new Error("Nothing to undo");
+	}
+};
+/**
+  * Reverts the effects of undo.
+  */
+Freja.UndoHistory.prototype.redo = function() {
+	if (this._undoSteps > 0) {
+		this._undoSteps--;
+		this._position = (this._position + 1) % this.maxLength;
+
+		var model = this.cache[this._position].model;
+		model.document = this.cache[this._position].document;
+	} else {
+		throw new Error("Nothing to redo");
+	}
+};
+
+/**
+  * Removes the last entry in the cache
+  */
+Freja.UndoHistory.prototype.removeLast = function() {
+	this._position--;
+
+	if (this._position < 0) {
+		this._position = this.maxLength - 1;
+	}
+	this.cache[this._position] = {};
+	this._undoSteps = 0;
+};
+/**
   * main repository
   * @static
   */
 Freja.AssetManager = {
 	models : [],
-	views : [],
-	undoHistory : []	// this isn't used atm
+	views : []
 }
 /**
   * Set to sync to make all requests synchroneous. You shouldn't use
@@ -562,16 +688,6 @@
 Freja.AssetManager.USERNAME = null;
 Freja.AssetManager.PASSWORD = null;
 /**
-  * returns an instance of the queryengine to use
-  */
-Freja.AssetManager.createQueryEngine = function() {
-	if (Sarissa.IS_ENABLED_SELECT_NODES) {
-		return new Freja.QueryEngine.XPath();
-	} else {
-		return new Freja.QueryEngine.SimplePath();
-	}
-}
-/**
   * returns an instance of the renderengine to use
   */
 Freja.AssetManager.createRenderer = function() {
@@ -600,7 +716,7 @@
 			return this.models[i];
 		}
 	}
-	var m = new Freja.Model(url, this.createQueryEngine());
+	var m = new Freja.Model(url, Freja.External.createQueryEngine());
 	var onload = Freja.External.bind(function(document) {
 		this.document = document;
 		this.ready = true;

Modified: trunk/tests/index.html
===================================================================
--- trunk/tests/index.html	2006-03-28 00:53:41 UTC (rev 15)
+++ trunk/tests/index.html	2006-03-29 00:25:54 UTC (rev 16)
@@ -8,6 +8,7 @@
 <script type="text/javascript">
 TestRunner.runTests(
     'test_Freja-Model.html',
+    'test_Freja-History.html',
     'test_Freja-View.html'
 );
 </script>

Added: trunk/tests/test_Freja-History.html
===================================================================
--- trunk/tests/test_Freja-History.html	2006-03-28 00:53:41 UTC (rev 15)
+++ trunk/tests/test_Freja-History.html	2006-03-29 00:25:54 UTC (rev 16)
@@ -0,0 +1,38 @@
+<html>
+<head>
+    <!-- MochiKit is needed by SimpleTest -->
+    <script type="text/javascript" src="../lib/MochiKit.js"></script>
+    <script type="text/javascript" src="SimpleTest/SimpleTest.js"></script>
+    <script type="text/javascript" src="../lib/Sarissa.js"></script>
+    <script type="text/javascript" src="../lib/Freja.js"></script>
+    <link rel="stylesheet" type="text/css" href="SimpleTest/test.css">
+</head>
+<body>
+
+<pre id="test">
+<script type="text/javascript" src="test_History.js"></script>
+<script type="text/javascript">
+try {
+
+    tests.test_History({ok:ok, is:is});
+    ok( true, "test suite finished!");
+
+} catch (err) {
+
+    var s = "test suite failure!\n";
+    var o = {};
+    var k = null;
+    for (k in err) {
+        // ensure unique keys?!
+        if (!o[k]) {
+            s +=  k + ": " + err[k] + "\n";
+            o[k] = err[k];
+        }
+    }
+    ok ( false, s );
+
+}
+</script>
+</pre>
+</body>
+</html>
\ No newline at end of file

Added: trunk/tests/test_History.js
===================================================================
--- trunk/tests/test_History.js	2006-03-28 00:53:41 UTC (rev 15)
+++ trunk/tests/test_History.js	2006-03-29 00:25:54 UTC (rev 16)
@@ -0,0 +1,40 @@
+if (typeof(dojo) != 'undefined') { dojo.require('Freja'); }
+if (typeof(JSAN) != 'undefined') { JSAN.use('Freja'); }
+if (typeof(tests) == 'undefined') { tests = {}; }
+
+tests.test_History = function (t) {
+	Freja.AssetManager.HTTP_REQUEST_TYPE = "sync";
+
+	var model = Freja.AssetManager.getModel("data/model.xml");
+	var model2 = Freja.AssetManager.getModel("data/model2.xml");
+
+	var state = new Freja.UndoHistory();
+
+	var exc = false;
+	try {
+		state.undo();
+	} catch (ex) {
+		exc = ex;
+	}
+	t.ok(exc, "Undo should throw error when nothing has been registered");
+	var exc = false;
+	try {
+		state.redo();
+	} catch (ex) {
+		exc = ex;
+	}
+	t.ok(exc, "Redo should throw error when nothing has been registered");
+
+	model.set("item/name", "Yoda");
+	state.add(model); // snapshot initial state
+
+	model.set("item/name", "Han-Solo");
+	t.is(model.get("item/name"), "Han-Solo");
+	state.add(model); // snapshot second state
+
+	state.undo(2); // rollback to initial state
+	t.is(model.get("item/name"), "Yoda");
+
+	state.redo(); // re-revert to second state
+	t.is(model.get("item/name"), "Han-Solo");
+};
\ No newline at end of file



From troelskn at berlios.de  Wed Mar 29 02:44:32 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Wed, 29 Mar 2006 02:44:32 +0200
Subject: [Freja-svn] r17 - trunk/lib
Message-ID: <200603290044.k2T0iWSl026417@sheep.berlios.de>

Author: troelskn
Date: 2006-03-29 02:43:50 +0200 (Wed, 29 Mar 2006)
New Revision: 17

Modified:
   trunk/lib/Freja.js
Log:
Sprinkled the source with semi-colons.

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-29 00:25:54 UTC (rev 16)
+++ trunk/lib/Freja.js	2006-03-29 00:43:50 UTC (rev 17)
@@ -166,12 +166,12 @@
 	subClass.prototype.constructor = subClass;
 	subClass.prototype.superconstructor = superconstructor;
 	subClass.prototype.supertype = superconstructor.prototype;
-}
+};
 /**
   * The baseclass for queryengines
   * @abstract
   */
-Freja.QueryEngine = function() {}
+Freja.QueryEngine = function() {};
 Freja.QueryEngine.prototype.getElementById = function(document, id) {
 	// getElementById doesn't work on XML document without xml:id
 	var allElements = document.getElementsByTagName("*");
@@ -180,17 +180,17 @@
 			return allElements[i];
 		}
 	}
-}
+};
 Freja.QueryEngine.prototype.get = function(document, expression) {
 	return this._find(document, expression).nodeValue;
-}
+};
 Freja.QueryEngine.prototype.set = function(document, expression, value) {
 	this._find(document, expression).nodeValue = value;
-}
+};
 /**
   * XPath query engine.
   */
-Freja.QueryEngine.XPath = function() {}
+Freja.QueryEngine.XPath = function() {};
 Freja.Class.extend(Freja.QueryEngine.XPath, Freja.QueryEngine);
 Freja.QueryEngine.XPath.prototype._find = function(document, expression) {
 	var node = document.selectSingleNode(expression);
@@ -202,7 +202,7 @@
 		return node.firstChild;
 	}
 	throw new Error("Can't evaluate expression " + expression);
-}
+};
 /**
   * SimplePath
   */
@@ -245,7 +245,7 @@
 		throw new Error("Can't evaluate expression " + expression);
 	}
 	return node;
-}
+};
 /**
   * Standard model component
   */
@@ -256,7 +256,7 @@
 	this.document = null;
 	this.query = query;
 	Freja.External.registerSignals(this, ["onload"]);
-}
+};
 /**
   * Returns a single value
   */
@@ -265,7 +265,7 @@
 		return this.query.getElementById(this.document, id);
 	}
 	return null;
-}
+};
 /**
   * Returns a single value
   */
@@ -274,7 +274,7 @@
 		return this.query.get(this.document, expression);
 	}
 	return null;
-}
+};
 /**
   * Updates a value
   */
@@ -283,7 +283,7 @@
 		return this.query.set(this.document, expression, value);
 	}
 	return null;
-}
+};
 /**
   * Updates the model from a view
   */
@@ -292,7 +292,7 @@
 	for (var i = 0; i < values[0].length; ++i) {
 		this.set(values[0][i], values[1][i]);
 	}
-}
+};
 /**
   * Writes the model back to the remote service
   * @returns MochiKit.Async.Deferred
@@ -315,7 +315,7 @@
 		d.errback(ex);
 	}
 	return d;
-}
+};
 /**
   * Deletes the model from the remote service
   * @returns MochiKit.Async.Deferred
@@ -328,7 +328,7 @@
 	}
 	var req = Freja.AssetManager.openXMLHttpRequest("DELETE", url);
 	return Freja.External.sendXMLHttpRequest(req);
-}
+};
 /**
   * @returns MochiKit.Async.Deferred
   */
@@ -342,15 +342,14 @@
 	var d = Freja.AssetManager.loadAsset(this.url, true);
 	d.addCallbacks(onload, Freja.AssetManager.onerror);
 	return d;
-}
-
+};
 /**
   * DataSource provides a gateway-type interface to a REST service.
   */
 Freja.Model.DataSource = function(createURL, indexURL) {
 	this.createURL = createURL;
 	this.indexURL = indexURL;
-}
+};
 /**
   * Returns a list of primary-keys to records in the datasource
   */
@@ -373,8 +372,7 @@
 		payload[values[0][i]] = values[1][i];
 	}
 	return Freja.External.sendXMLHttpRequest(req, Freja.External.xmlize(payload, 'record'));
-}
-
+};
 /**
   * Standard view component
   */
@@ -389,7 +387,7 @@
 	this.destination = null;
 	Freja.External.registerSignals(this, ["onload","onrendercomplete"]);
 	Freja.External.connect(this, "onrendercomplete", Freja.External.bind(this.connectBehaviour, this));
-}
+};
 /**
   * @param    model            Freja.Model
   * @param    placeholder      string    If supplied, this will be used instead of the
@@ -402,7 +400,7 @@
 		this.model = model;
 		this.view = view;
 		this.deferred = deferred;
-	}
+	};
 
 	Handler.prototype.trigger = function() {
 		try {
@@ -429,7 +427,7 @@
 		} catch (ex) {
 			this.deferred.errback(ex);
 		}
-	}
+	};
 
 	var d = Freja.External.createDeferred();
 	try {
@@ -445,8 +443,7 @@
 		d.errback(ex);
 	}
 	return d;
-}
-
+};
 /**
   * Decorates the output of the primary renderer, to inject behaviour.
   * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
@@ -469,7 +466,7 @@
 					}
 				}, node)
 			);
-		}
+		};
 		var applyHandlers = function(node, handlers) {
 			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
 				var child = c[i];
@@ -490,27 +487,26 @@
 					applyHandlers(child, handlers);
 				}
 			}
-		}
+		};
 		applyHandlers(destination, this.handlers);
 	} catch (ex) {
 		alert(ex.message);
 	}
-}
+};
 /**
   * Returns the values of a formview
   */
 Freja.View.prototype.getValues = function() {
 	return formContents(this.destination);
-}
-
+};
 /**
   * Base object for viewrenderers
   */
-Freja.View.Renderer = function() {}
+Freja.View.Renderer = function() {};
 /**
   * XSLT based render-engine
   */
-Freja.View.Renderer.XSLTransformer = function() {}
+Freja.View.Renderer.XSLTransformer = function() {};
 Freja.Class.extend(Freja.View.Renderer.XSLTransformer, Freja.View.Renderer);
 /**
   * @returns MochiKit.Async.Deferred
@@ -532,14 +528,14 @@
 		d.errback(ex);
 	}
 	return d;
-}
+};
 /**
   * XSLT on a remote service for browser which have no native support.
   * @param    url    URL of the transform service
   */
 Freja.View.Renderer.RemoteXSLTransformer = function(url) {
 	this.url = url;
-}
+};
 Freja.Class.extend(Freja.View.Renderer.RemoteXSLTransformer, Freja.View.Renderer);
 /**
   * @returns MochiKit.Async.Deferred
@@ -565,7 +561,7 @@
 	}
 	req.send(postedData);
 	return d;
-}
+};
 /**
   * This is largely s copied with minor stylistic adjustments from Freja 1.1
   * I renamed it from Controller.history to distinguish between window.history
@@ -639,7 +635,6 @@
 		throw new Error("Nothing to redo");
 	}
 };
-
 /**
   * Removes the last entry in the cache
   */
@@ -658,8 +653,10 @@
   */
 Freja.AssetManager = {
 	models : [],
-	views : []
-}
+	views : [],
+	_username : null,
+	_password : null
+};
 /**
   * Set to sync to make all requests synchroneous. You shouldn't use
   * this setting for anything but testing/debugging.
@@ -667,9 +664,12 @@
   */
 Freja.AssetManager.HTTP_REQUEST_TYPE = "async";
 /**
-  * If this is set to NULL, real PUT and DELETE http-requests will be made,
+  * If this is set to null, real PUT and DELETE http-requests will be made,
   * otherwise a header will be set instead, and the request tunneled through
-  * POST. For compatibility, you should use tunneling.
+  * POST.
+  *
+  * Both IE6 and FF1.5 are known to support the required HTTP methods, so
+  * if theese are your target platform, you can disable tunneling.
   */
 // Freja.AssetManager.HTTP_METHOD_TUNNEL = null;
 Freja.AssetManager.HTTP_METHOD_TUNNEL = "Http-Method-Equivalent";
@@ -683,11 +683,6 @@
   */
 Freja.AssetManager.THROBBER_HTML = "<span style='color:white;background:firebrick'>Loading ...</span>";
 /**
-  * Set USERNAME + PASSWORD to authenticate with basic HTTP-Authorization.
-  */
-Freja.AssetManager.USERNAME = null;
-Freja.AssetManager.PASSWORD = null;
-/**
   * returns an instance of the renderengine to use
   */
 Freja.AssetManager.createRenderer = function() {
@@ -697,7 +692,7 @@
 	} else {
 		return new Freja.View.Renderer.RemoteXSLTransformer(this.XSLT_SERVICE_URL);
 	}
-}
+};
 /**
   * Wipes all caches. This isn't something you will normally use during production,
   * but it's very helpful for debugging/testing
@@ -705,7 +700,7 @@
 Freja.AssetManager.clearCache = function() {
 	this.models = [];
 	this.views = [];
-}
+};
 /**
   * Load a model-component
   * @param    url      string
@@ -725,7 +720,7 @@
 	this.loadAsset(url, true).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.models.push(m);
 	return m;
-}
+};
 /**
   * Load a view-component
   * @param    url      string
@@ -745,7 +740,7 @@
 	this.loadAsset(url, false).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.views.push(v);
 	return v;
-}
+};
 /**
   * Creates and opens a http-request, tunneling exotic methods if needed.
   */
@@ -755,13 +750,20 @@
 		tunnel = method;
 		method = "POST";
 	}
-	var req = Freja.External.openXMLHttpRequest(method, url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
+	var req = Freja.External.openXMLHttpRequest(method, url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 	if (tunnel) {
 		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, tunnel);
 	}
 	return req;
-}
+};
 /**
+  * Sets username + password for Http-Authentication
+  */
+Freja.AssetManager.setCredentials = function(username, password) {
+	this._username = username;
+	this._password = password;
+};
+/**
   * @returns MochiKit.Async.Deferred
   */
 Freja.AssetManager.loadAsset = function(url, preventCaching) {
@@ -786,14 +788,14 @@
 			d.errback(ex);
 		}
 		d.callback(document);
-	}
+	};
 	try {
 		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
-			var req = Freja.External.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
+			var req = Freja.External.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 		} else {
-			var req = Freja.External.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager.USERNAME, Freja.AssetManager.PASSWORD);
+			var req = Freja.External.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 		}
 
 		// This shouldn't be nescesary, but alas it is - firefox chokes
@@ -813,7 +815,7 @@
 		d.errback(ex);
 	}
 	return d;
-}
+};
 /**
   * This is a default error-handler. You should provide your own.
   * The handler is called if an asynchronous error happens, since
@@ -823,7 +825,7 @@
   */
 Freja.AssetManager.onerror = function(ex) {
 	alert("Freja.AssetManager.onerror\n" + ex.message);
-}
+};
 /**
   * Global exports
   */



From troelskn at berlios.de  Thu Mar 30 05:09:15 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Thu, 30 Mar 2006 05:09:15 +0200
Subject: [Freja-svn] r18 - in trunk: lib tests
Message-ID: <200603300309.k2U39F5f001656@sheep.berlios.de>

Author: troelskn
Date: 2006-03-30 05:09:04 +0200 (Thu, 30 Mar 2006)
New Revision: 18

Modified:
   trunk/lib/Freja.js
   trunk/tests/test_View.js
Log:
Added support for pojo models.

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-29 00:43:50 UTC (rev 17)
+++ trunk/lib/Freja.js	2006-03-30 03:09:04 UTC (rev 18)
@@ -408,12 +408,19 @@
 				Freja.External.connect(this.view, "onload", Freja.External.bind(this.trigger, this));
 				return;
 			}
-			if (this.model && !this.model.ready) {
+			if (typeof(this.model) == "object" && this.model instanceof Freja.Model && !this.model.ready) {
 				Freja.External.connect(this.model, "onload", Freja.External.bind(this.trigger, this));
 				return;
 			}
-			if (!model) {
+			var model;
+			if (typeof(this.model) == "undefined") {
+				// supply dummy
 				model = { document : Freja.External.loadXML("<?xml version='1.0' ?><dummy/>")};
+			} else if (this.model instanceof Freja.Model) {
+				model = this.model;
+			} else {
+				// wrap pojo's in
+				model = { document : Freja.External.loadXML("<?xml version='1.0' ?>\n" + Freja.External.xmlize(this.model, "item")) };
 			}
 			var trans = this.view.renderer.transform(model, this.view);
 			trans.addCallback(Freja.External.bind(function(html) {

Modified: trunk/tests/test_View.js
===================================================================
--- trunk/tests/test_View.js	2006-03-29 00:43:50 UTC (rev 17)
+++ trunk/tests/test_View.js	2006-03-30 03:09:04 UTC (rev 18)
@@ -19,6 +19,21 @@
 	t.is(out.getElementsByTagName("H3").length, 1);
 	t.is(out.getElementsByTagName("H3").item(0).firstChild.nodeValue, model.get("item/name"), "Rendered view should contain the models value");
 
+	// test of pojo model
+	Freja.AssetManager.clearCache();
+	var view = Freja.AssetManager.getView("data/view.xsl");
+	var out = document.createElement("DIV");
+	view.placeholder = out;
+
+	var pojo = {
+		name : "pojo",
+		description : "Plain Old Javascript Object",
+		price : "Priceless"
+	};
+	view.render(pojo);
+
+	t.ok(out.innerHTML.toLowerCase().match("<p>plain old javascript object</p>"));
+
 	// test of form
 	var formView = Freja.AssetManager.getView("data/form-view.xsl");
 	var testofsubmit = false;
@@ -33,6 +48,9 @@
 
 	t.ok(testofsubmit, "The form has been intercepted by our handler");
 
+	//////////////////////////////////////////////////////////////////////
+	// async tests below
+
 	// we can't test asynch function properly, but we can fire them and assert that
 	// they don't throw any exceptions at least
 	Freja.AssetManager.clearCache();
@@ -50,4 +68,5 @@
 		exc = ex;
 	}
 	t.ok(exc == false, "The render should be postproned until loading have completed");
+
 };
\ No newline at end of file



From troelskn at berlios.de  Fri Mar 31 07:58:55 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Fri, 31 Mar 2006 07:58:55 +0200
Subject: [Freja-svn] r19 - in trunk: lib tests
Message-ID: <200603310558.k2V5wtim024162@sheep.berlios.de>

Author: troelskn
Date: 2006-03-31 07:58:46 +0200 (Fri, 31 Mar 2006)
New Revision: 19

Modified:
   trunk/lib/Freja.js
   trunk/tests/test_View.js
Log:
Renamed Freja.External to Freja._aux
Moved formContents and getElemnt to _aux
Removed deprecated 'options' from Freja.View

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-30 03:09:04 UTC (rev 18)
+++ trunk/lib/Freja.js	2006-03-31 05:58:46 UTC (rev 19)
@@ -27,9 +27,9 @@
   * Package : end
   */
 /**
-  * Freja.External
+  * Freja._aux
   * wrapper for external functionality (frameworks).
-  * You shouldn't rely onthis functionality - it's merely a hook for Freja towards
+  * You shouldn't rely on this functionality - it's merely a hook for Freja towards
   * external dependencies. This is the only part of the application you'll need to
   * adjust, to make Freja play ball with your favourite framework.
   */
@@ -61,22 +61,26 @@
 } catch (e) {
 	throw new Error("Freja depends on MochiKit.Base, MochiKit.Signal, MochiKit.Async and Sarissa!");
 }
-Freja.External = {};
+Freja._aux = {};
 /** bind(func, self[, arg, ...]) : function */
-Freja.External.bind = MochiKit.Base.bind;
+Freja._aux.bind = MochiKit.Base.bind;
+/** formContents(elem) : Array */
+Freja._aux.formContents = MochiKit.DOM.formContents;
+/** getElement() : HTMLElement */
+Freja._aux.getElement = MochiKit.DOM.getElement;
 
 /** registerSignals(src, signals) : void */
-Freja.External.registerSignals = MochiKit.Signal.registerSignals;
+Freja._aux.registerSignals = MochiKit.Signal.registerSignals;
 /** connect(src, signal, dest[, func]) : void */
-Freja.External.connect = MochiKit.Signal.connect;
+Freja._aux.connect = MochiKit.Signal.connect;
 /** signal(src, signal, ...) : void */
-Freja.External.signal = MochiKit.Signal.signal;
+Freja._aux.signal = MochiKit.Signal.signal;
 /** createDeferred() : Deferred */
-Freja.External.createDeferred = function() {
+Freja._aux.createDeferred = function() {
 	return new MochiKit.Async.Deferred();
 };
 /** openXMLHttpRequest(method, url, async, user, pass) : XMLHttpRequest */
-Freja.External.openXMLHttpRequest = function(method, url, async, user, pass) {
+Freja._aux.openXMLHttpRequest = function(method, url, async, user, pass) {
 	var req = new XMLHttpRequest();
 	if (user && pass) {
 		req.open(method, url, async, user, pass);
@@ -89,24 +93,24 @@
 	return req;
 };
 /** sendXMLHttpRequest(req, sendContent) : Deferred */
-Freja.External.sendXMLHttpRequest = MochiKit.Async.sendXMLHttpRequest;
+Freja._aux.sendXMLHttpRequest = MochiKit.Async.sendXMLHttpRequest;
 /** xmlize(anyObject, objectName) : string */
-Freja.External.xmlize = Sarissa.xmlize;
+Freja._aux.xmlize = Sarissa.xmlize;
 /** serializeXML(node) : string */
-Freja.External.serializeXML = Sarissa.serialize;
+Freja._aux.serializeXML = Sarissa.serialize;
 /** loadXML(string) : XMLDocument */
-Freja.External.loadXML = function(text) {
+Freja._aux.loadXML = function(text) {
 	return (new DOMParser()).parseFromString(text, "text/xml");
 };
 /** transformXSL(XMLDocument, XSLDocument) : string */
-Freja.External.transformXSL = function(xml, xsl) {
+Freja._aux.transformXSL = function(xml, xsl) {
 	var processor = new XSLTProcessor();
 	processor.importStylesheet(xsl);
-	return Freja.External.serializeXML(processor.transformToDocument(xml));
+	return Freja._aux.serializeXML(processor.transformToDocument(xml));
 
 };
 /** cloneXMLDocument(document) : XMLDocument */
-Freja.External.cloneXMLDocument = function(xmlDoc) {
+Freja._aux.cloneXMLDocument = function(xmlDoc) {
 	var clone = null;
 	try {
 		clone = xmlDoc.cloneNode(true);
@@ -139,9 +143,9 @@
 	return clone;
 };
 /** hasSupportForXSLT() : boolean */
-Freja.External.hasSupportForXSLT = (typeof(XSLTProcessor) != "undefined");
+Freja._aux.hasSupportForXSLT = function() { return (typeof(XSLTProcessor) != "undefined"); };
 /** createQueryEngine() : Freja.QueryEngine */
-Freja.External.createQueryEngine = function() {
+Freja._aux.createQueryEngine = function() {
 	if (Sarissa.IS_ENABLED_SELECT_NODES) {
 		return new Freja.QueryEngine.XPath();
 	} else {
@@ -251,18 +255,17 @@
   */
 Freja.Model = function(url, query) {
 	this.url = url;
-	this.type = "model";
 	this.ready = false;
 	this.document = null;
-	this.query = query;
-	Freja.External.registerSignals(this, ["onload"]);
+	this._query = query;
+	Freja._aux.registerSignals(this, ["onload"]);
 };
 /**
   * Returns a single value
   */
 Freja.Model.prototype.getElementById = function(id) {
 	if (this.document) {
-		return this.query.getElementById(this.document, id);
+		return this._query.getElementById(this.document, id);
 	}
 	return null;
 };
@@ -271,7 +274,7 @@
   */
 Freja.Model.prototype.get = function(expression) {
 	if (this.document) {
-		return this.query.get(this.document, expression);
+		return this._query.get(this.document, expression);
 	}
 	return null;
 };
@@ -280,7 +283,7 @@
   */
 Freja.Model.prototype.set = function(expression, value) {
 	if (this.document) {
-		return this.query.set(this.document, expression, value);
+		return this._query.set(this.document, expression, value);
 	}
 	return null;
 };
@@ -305,12 +308,12 @@
 	}
 	// since the serialization may fail, we create a deferred for the
 	// purpose, rather than just returning the sendXMLHttpRequest directly.
-	var d = Freja.External.createDeferred();
+	var d = Freja._aux.createDeferred();
 	var req = Freja.AssetManager.openXMLHttpRequest("POST", url);
 	try {
 		// for some obscure reason exceptions aren't thrown back if I call the
 		// shorthand version of sendXMLHttpRequest in IE6.
-		Freja.External.sendXMLHttpRequest(req, Freja.External.serializeXML(this.document)).addCallbacks(Freja.External.bind(d.callback, d), Freja.External.bind(d.errback, d));
+		Freja._aux.sendXMLHttpRequest(req, Freja._aux.serializeXML(this.document)).addCallbacks(Freja._aux.bind(d.callback, d), Freja._aux.bind(d.errback, d));
 	} catch (ex) {
 		d.errback(ex);
 	}
@@ -327,17 +330,17 @@
 		url = match[1] + url; // local
 	}
 	var req = Freja.AssetManager.openXMLHttpRequest("DELETE", url);
-	return Freja.External.sendXMLHttpRequest(req);
+	return Freja._aux.sendXMLHttpRequest(req);
 };
 /**
   * @returns MochiKit.Async.Deferred
   */
 Freja.Model.prototype.reload = function() {
 	this.ready = false;
-	var onload = Freja.External.bind(function(document) {
+	var onload = Freja._aux.bind(function(document) {
 		this.document = document;
 		this.ready = true;
-		Freja.External.signal(this, "onload");
+		Freja._aux.signal(this, "onload");
 	}, this);
 	var d = Freja.AssetManager.loadAsset(this.url, true);
 	d.addCallbacks(onload, Freja.AssetManager.onerror);
@@ -371,22 +374,20 @@
 	for (var i = 0, len = values[0].length; i < len; ++i) {
 		payload[values[0][i]] = values[1][i];
 	}
-	return Freja.External.sendXMLHttpRequest(req, Freja.External.xmlize(payload, 'record'));
+	return Freja._aux.sendXMLHttpRequest(req, Freja._aux.xmlize(payload, 'record'));
 };
 /**
   * Standard view component
   */
 Freja.View = function(url, renderer) {
 	this.url = url;
-	this.type = "view";
 	this.ready = false;
 	this.document = null;
-	this.renderer = renderer;
+	this._renderer = renderer;
 	this.handlers = [];
-	this.placeholder = null;
-	this.destination = null;
-	Freja.External.registerSignals(this, ["onload","onrendercomplete"]);
-	Freja.External.connect(this, "onrendercomplete", Freja.External.bind(this.connectBehaviour, this));
+	this._destination = null;
+	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
+	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehaviour, this));
 };
 /**
   * @param    model            Freja.Model
@@ -394,7 +395,7 @@
   *                                      default placeholder.
   * @returns MochiKit.Async.Deferred
   */
-Freja.View.prototype.render = function(model, placeholder /* optional */ ) {
+Freja.View.prototype.render = function(model, placeholder) {
 
 	var Handler = function(model, view, deferred) {
 		this.model = model;
@@ -405,29 +406,29 @@
 	Handler.prototype.trigger = function() {
 		try {
 			if (!this.view.ready) {
-				Freja.External.connect(this.view, "onload", Freja.External.bind(this.trigger, this));
+				Freja._aux.connect(this.view, "onload", Freja._aux.bind(this.trigger, this));
 				return;
 			}
 			if (typeof(this.model) == "object" && this.model instanceof Freja.Model && !this.model.ready) {
-				Freja.External.connect(this.model, "onload", Freja.External.bind(this.trigger, this));
+				Freja._aux.connect(this.model, "onload", Freja._aux.bind(this.trigger, this));
 				return;
 			}
 			var model;
 			if (typeof(this.model) == "undefined") {
 				// supply dummy
-				model = { document : Freja.External.loadXML("<?xml version='1.0' ?><dummy/>")};
+				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?><dummy/>")};
 			} else if (this.model instanceof Freja.Model) {
 				model = this.model;
 			} else {
 				// wrap pojo's in
-				model = { document : Freja.External.loadXML("<?xml version='1.0' ?>\n" + Freja.External.xmlize(this.model, "item")) };
+				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
 			}
-			var trans = this.view.renderer.transform(model, this.view);
-			trans.addCallback(Freja.External.bind(function(html) {
-				this.destination.innerHTML = html;
+			var trans = this.view._renderer.transform(model, this.view);
+			trans.addCallback(Freja._aux.bind(function(html) {
+				this._destination.innerHTML = html;
 			}, this.view));
-			trans.addCallback(Freja.External.bind(function() {
-				Freja.External.signal(this, "onrendercomplete", this.destination)
+			trans.addCallback(Freja._aux.bind(function() {
+				Freja._aux.signal(this, "onrendercomplete", this._destination)
 			}, this.view));
 			trans.addCallback(this.deferred.callback);
 			trans.addErrback(this.deferred.errback);
@@ -436,13 +437,12 @@
 		}
 	};
 
-	var d = Freja.External.createDeferred();
+	var d = Freja._aux.createDeferred();
 	try {
-		var id = (typeof(placeholder) == "undefined") ? this.placeholder : placeholder;
-		this.destination = $(id);
+		this._destination = Freja._aux.getElement(placeholder);
 		// @todo    Is this a good idea ?
 		// Perhaps we should leave it to the programmer to do this.
-		this.destination.innerHTML = Freja.AssetManager.THROBBER_HTML;
+		this._destination.innerHTML = Freja.AssetManager.THROBBER_HTML;
 
 		var h = new Handler(model, this, d);
 		h.trigger();
@@ -456,10 +456,10 @@
   * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
   *       to identify targets for behaviour, rather than just the id-attribute.
   */
-Freja.View.prototype.connectBehaviour = function(destination) {
+Freja.View.prototype._connectBehaviour = function(destination) {
 	try {
 		var connectCallback = function(node, eventType, callback) {
-			Freja.External.connect(node, eventType, Freja.External.bind(
+			Freja._aux.connect(node, eventType, Freja._aux.bind(
 				function(e) {
 					var allow = false;
 					try {
@@ -504,7 +504,7 @@
   * Returns the values of a formview
   */
 Freja.View.prototype.getValues = function() {
-	return formContents(this.destination);
+	return formContents(this._destination);
 };
 /**
   * Base object for viewrenderers
@@ -519,9 +519,9 @@
   * @returns MochiKit.Async.Deferred
   */
 Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view) {
-        var d = Freja.External.createDeferred();
+        var d = Freja._aux.createDeferred();
         try {
-		var html = Freja.External.transformXSL(model.document, view.document);
+		var html = Freja._aux.transformXSL(model.document, view.document);
 		if (!html) {
 			d.errback(new Error("XSL Transformation error."));
 		} else {
@@ -548,11 +548,11 @@
   * @returns MochiKit.Async.Deferred
   */
 Freja.View.Renderer.RemoteXSLTransformer.prototype.transform = function(model, view) {
-        var d = Freja.External.createDeferred();
+        var d = Freja._aux.createDeferred();
 
 	// prepare posted data  (no need to send the XSL document, just its url)
 	var xslUrl = view.url;
-	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja.External.serializeXML(model.document));
+	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja._aux.serializeXML(model.document));
 //	if (xslParams)
 //		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParams.toString());
 	// send request to the server-side XSL transformation service
@@ -588,7 +588,7 @@
 	var modelDoc = model.document;
 	this.cache[historyIndex] = {};
 	this.cache[historyIndex].model = model;
-	this.cache[historyIndex].document = Freja.External.cloneXMLDocument(modelDoc);
+	this.cache[historyIndex].document = Freja._aux.cloneXMLDocument(modelDoc);
 
 	if (!this.cache[historyIndex].document) {
 		throw new Error("Couldn't add to history.");
@@ -694,7 +694,7 @@
   */
 Freja.AssetManager.createRenderer = function() {
 //	return new Freja.View.Renderer.RemoteXSLTransformer(this.XSLT_SERVICE_URL);
-	if (Freja.External.hasSupportForXSLT) {
+	if (Freja._aux.hasSupportForXSLT()) {
 		return new Freja.View.Renderer.XSLTransformer();
 	} else {
 		return new Freja.View.Renderer.RemoteXSLTransformer(this.XSLT_SERVICE_URL);
@@ -718,11 +718,11 @@
 			return this.models[i];
 		}
 	}
-	var m = new Freja.Model(url, Freja.External.createQueryEngine());
-	var onload = Freja.External.bind(function(document) {
+	var m = new Freja.Model(url, Freja._aux.createQueryEngine());
+	var onload = Freja._aux.bind(function(document) {
 		this.document = document;
 		this.ready = true;
-		Freja.External.signal(this, "onload");
+		Freja._aux.signal(this, "onload");
 	}, m);
 	this.loadAsset(url, true).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.models.push(m);
@@ -739,10 +739,10 @@
 		}
 	}
 	var v = new Freja.View(url, this.createRenderer());
-	var onload = Freja.External.bind(function(document) {
+	var onload = Freja._aux.bind(function(document) {
 		this.document = document;
 		this.ready = true;
-		Freja.External.signal(this, "onload");
+		Freja._aux.signal(this, "onload");
 	}, v);
 	this.loadAsset(url, false).addCallbacks(onload, Freja.AssetManager.onerror);
 	this.views.push(v);
@@ -757,7 +757,7 @@
 		tunnel = method;
 		method = "POST";
 	}
-	var req = Freja.External.openXMLHttpRequest(method, url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
+	var req = Freja._aux.openXMLHttpRequest(method, url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 	if (tunnel) {
 		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, tunnel);
 	}
@@ -778,7 +778,7 @@
 	if (match) {
 		url = match[1] + url; // local
 	}
-	var d = Freja.External.createDeferred();
+	var d = Freja._aux.createDeferred();
 	var handler = function(transport) {
 		try {
 			if (transport.responseText == "") {
@@ -787,7 +787,7 @@
 			if (transport.responseXML.xml == "") {
 				// The server doesn't reply with Content-Type: text/xml
 				// this will happen if the file is loaded locally (through file://)
-				var document = Freja.External.loadXML(transport.responseText);
+				var document = Freja._aux.loadXML(transport.responseText);
 			} else {
 				var document = transport.responseXML;
 			}
@@ -798,19 +798,19 @@
 	};
 	try {
 		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
-			var req = Freja.External.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
+			var req = Freja._aux.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
 			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
 		} else {
-			var req = Freja.External.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
+			var req = Freja._aux.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
 		}
 
 		// This shouldn't be nescesary, but alas it is - firefox chokes
 		// It's probably due to an error in MochiKit, so the problem
 		// should be fixed there.
-		var comm = Freja.External.sendXMLHttpRequest(req);
+		var comm = Freja._aux.sendXMLHttpRequest(req);
 		if (Freja.AssetManager.HTTP_REQUEST_TYPE == "async") {
-			comm.addCallbacks(handler, Freja.External.bind(d.errback, d));
+			comm.addCallbacks(handler, Freja._aux.bind(d.errback, d));
 		} else {
 			if (req.status == 0 || req.status == 200 || req.status == 304) {
 				handler(req);
@@ -836,5 +836,5 @@
 /**
   * Global exports
   */
-window.getModel = Freja.External.bind("getModel", Freja.AssetManager);
-window.getView = Freja.External.bind("getView", Freja.AssetManager);
\ No newline at end of file
+window.getModel = Freja._aux.bind("getModel", Freja.AssetManager);
+window.getView = Freja._aux.bind("getView", Freja.AssetManager);
\ No newline at end of file

Modified: trunk/tests/test_View.js
===================================================================
--- trunk/tests/test_View.js	2006-03-30 03:09:04 UTC (rev 18)
+++ trunk/tests/test_View.js	2006-03-31 05:58:46 UTC (rev 19)
@@ -13,8 +13,7 @@
 
 	var model = Freja.AssetManager.getModel("data/model.xml");
 	var out = document.createElement("DIV");
-	view.placeholder = out;
-	view.render(model);
+	view.render(model, out);
 
 	t.is(out.getElementsByTagName("H3").length, 1);
 	t.is(out.getElementsByTagName("H3").item(0).firstChild.nodeValue, model.get("item/name"), "Rendered view should contain the models value");
@@ -23,14 +22,13 @@
 	Freja.AssetManager.clearCache();
 	var view = Freja.AssetManager.getView("data/view.xsl");
 	var out = document.createElement("DIV");
-	view.placeholder = out;
 
 	var pojo = {
 		name : "pojo",
 		description : "Plain Old Javascript Object",
 		price : "Priceless"
 	};
-	view.render(pojo);
+	view.render(pojo, out);
 
 	t.ok(out.innerHTML.toLowerCase().match("<p>plain old javascript object</p>"));
 
@@ -40,8 +38,7 @@
 	formView.handlers["form"] = {
 		onsubmit : function() { testofsubmit = true; }
 	};
-	formView.placeholder = out;
-	formView.render(model);
+	formView.render(model, out);
 	$("out").appendChild(out);
 	$("form-submit").click();
 	out.parentNode.removeChild(out);
@@ -56,14 +53,13 @@
 	Freja.AssetManager.clearCache();
 	var view = Freja.AssetManager.getView("data/view.xsl");
 	var out = document.createElement("DIV");
-	view.placeholder = out;
 	// you may uncomment the following line to manually verify that the view gets rendered
 //	$("out").appendChild(out);
 	Freja.AssetManager.HTTP_REQUEST_TYPE = "async";
 	var model = Freja.AssetManager.getModel("data/model.xml");
 	var exc = false;
 	try {
-		view.render(model);
+		view.render(model, out);
 	} catch (ex) {
 		exc = ex;
 	}



From troelskn at berlios.de  Fri Mar 31 09:14:34 2006
From: troelskn at berlios.de (troelskn at BerliOS)
Date: Fri, 31 Mar 2006 09:14:34 +0200
Subject: [Freja-svn] r20 - in trunk: . lib src src/auxiliary
Message-ID: <200603310714.k2V7EY3O027654@sheep.berlios.de>

Author: troelskn
Date: 2006-03-31 09:14:29 +0200 (Fri, 31 Mar 2006)
New Revision: 20

Added:
   trunk/build.wsf
   trunk/src/
   trunk/src/AssetManager.js
   trunk/src/Freja.js
   trunk/src/Model.js
   trunk/src/QueryEngine.js
   trunk/src/UndoHistory.js
   trunk/src/View.js
   trunk/src/auxiliary/
   trunk/src/auxiliary/default.js
Modified:
   trunk/lib/Freja.js
Log:
Splitted the source out and made a build-script (windows script).

Added: trunk/build.wsf
===================================================================
--- trunk/build.wsf	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/build.wsf	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,59 @@
+<?xml version="1.0" encoding="ISO-8859-1" ?>
+<job id="Freja.Build">
+	<script language="JScript">
+	<![CDATA[
+	var Shell = WScript.CreateObject("WScript.Shell");
+	var FileSystem = WScript.CreateObject("Scripting.FileSystemObject");
+	var cwd = FileSystem.GetParentFolderName(WScript.ScriptFullName);
+	var srcDir = cwd + "/src";
+	var outfile = cwd + "/lib/Freja.js";
+	try {
+		FileSystem.deleteFile(outfile);
+	} catch (ex) {}
+
+	var file = FileSystem.openTextFile(srcDir + "/Freja.js", 1, -2);
+	var source = file.readAll();
+	var VERSION = source.match(/Freja.VERSION \= \"(.*)\"/)[1];
+	file.close();
+	source = null;
+	
+	var TARGET = "default";
+	var SUBMODULES = [
+		"Freja",
+		"auxiliary/" + TARGET,
+		"QueryEngine",
+		"Model",
+		"View",
+		"UndoHistory",
+		"AssetManager"
+	];
+
+	var buildID = (new Date()).toUTCString();
+
+	var header = "/" + "***\n" +
+		"\n    Freja " + VERSION +
+		"\n" +
+		"\n    Build $" + buildID + "$" +
+		"\n" +
+		"\n    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please" +
+		"\n    diff against the source tree, not this file." +
+		"\n" +
+		"\n    Copyright (c) 2006 C?dric Savarese <pro at 4213miles.com>, Troels Knak-Nielsen <troelskn at gmail.com>" +
+		"\n    This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>" +
+		"\n" +
+		"\n***" + "/" +
+		"\n";
+
+	var source = "";
+	for (var i=0; i < SUBMODULES.length; ++i) {
+		var filename = srcDir + "/" + SUBMODULES[i] + ".js";
+		var file = FileSystem.openTextFile(filename, 1, -2);
+		source += "\n" + file.readAll();
+		file.close();
+	}
+	var out = FileSystem.openTextFile(outfile, 2, -2);
+	out.write(header + source);
+	out.close();
+	]]>
+	</script>
+</job>
\ No newline at end of file

Modified: trunk/lib/Freja.js
===================================================================
--- trunk/lib/Freja.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/lib/Freja.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -1,14 +1,17 @@
-/**
-  * Freja - a javascript Model-View-Controller Framework geared toward Zero-Latency Web Applications
-  *
-  * Copyright (c) 2006 C?dric Savarese <pro at 4213miles.com>, Troels Knak-Nielsen <troelskn at gmail.com>
-  * This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>
-  *
-  * Documentation : http://www.csscripting.com/freja/
-  */
-/**
-  * Package : begin
-  */
+/***
+
+    Freja 2.0.alpha
+
+    Build $Fri, 31 Mar 2006 07:12:48 UTC$
+
+    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
+    diff against the source tree, not this file.
+
+    Copyright (c) 2006 C?dric Savarese <pro at 4213miles.com>, Troels Knak-Nielsen <troelskn at gmail.com>
+    This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>
+
+***/
+
 if (typeof(dojo) != "undefined") {
 	dojo.provide("Freja");
 }
@@ -24,11 +27,30 @@
 	return this.__repr__();
 };
 /**
-  * Package : end
+  * Single-hierarchy inheritance (class emulation)
+  * @see    http://www.itsalleasy.com/2006/02/05/prototype-chain/
+  *         http://www.itsalleasy.com/2006/02/24/classjs-third-time-is-the-charm/
+  *
+  * Extends one prototype by another.
+  * The subtype will have two specialpurpose properties:
+  *     superconstructor    The parent prototype's constructor
+  *     supertype        The parent prototype
   */
+Freja.Class = {};
+Freja.Class.extend = function(subClass, superconstructor) {
+	var inlineSuper = function(){};
+	inlineSuper.prototype = superconstructor.prototype;
+	subClass.prototype = new inlineSuper();
+	subClass.prototype.constructor = subClass;
+	subClass.prototype.superconstructor = superconstructor;
+	subClass.prototype.supertype = superconstructor.prototype;
+};
 /**
   * Freja._aux
-  * wrapper for external functionality (frameworks).
+  * wrapper for external dependencies (frameworks).
+  *
+  * This is the default auxiliary adapter. It bridges Freja to MochiKit + Sarissa
+  *
   * You shouldn't rely on this functionality - it's merely a hook for Freja towards
   * external dependencies. This is the only part of the application you'll need to
   * adjust, to make Freja play ball with your favourite framework.
@@ -61,6 +83,9 @@
 } catch (e) {
 	throw new Error("Freja depends on MochiKit.Base, MochiKit.Signal, MochiKit.Async and Sarissa!");
 }
+if (typeof(Freja) == "undefined") {
+	Freja = {};
+}
 Freja._aux = {};
 /** bind(func, self[, arg, ...]) : function */
 Freja._aux.bind = MochiKit.Base.bind;
@@ -152,26 +177,8 @@
 		return new Freja.QueryEngine.SimplePath();
 	}
 };
+
 /**
-  * Single-hierarchy inheritance (class emulation)
-  * @see    http://www.itsalleasy.com/2006/02/05/prototype-chain/
-  *         http://www.itsalleasy.com/2006/02/24/classjs-third-time-is-the-charm/
-  *
-  * Extends one prototype by another.
-  * The subtype will have two specialpurpose properties:
-  *     superconstructor    The parent prototype's constructor
-  *     supertype        The parent prototype
-  */
-Freja.Class = {};
-Freja.Class.extend = function(subClass, superconstructor) {
-	var inlineSuper = function(){};
-	inlineSuper.prototype = superconstructor.prototype;
-	subClass.prototype = new inlineSuper();
-	subClass.prototype.constructor = subClass;
-	subClass.prototype.superconstructor = superconstructor;
-	subClass.prototype.supertype = superconstructor.prototype;
-};
-/**
   * The baseclass for queryengines
   * @abstract
   */
@@ -249,7 +256,7 @@
 		throw new Error("Can't evaluate expression " + expression);
 	}
 	return node;
-};
+};
 /**
   * Standard model component
   */
@@ -376,6 +383,7 @@
 	}
 	return Freja._aux.sendXMLHttpRequest(req, Freja._aux.xmlize(payload, 'record'));
 };
+
 /**
   * Standard view component
   */
@@ -384,8 +392,9 @@
 	this.ready = false;
 	this.document = null;
 	this._renderer = renderer;
+	this._destination = null;
 	this.handlers = [];
-	this._destination = null;
+	this.placeholder = null;
 	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
 	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehaviour, this));
 };
@@ -396,6 +405,7 @@
   * @returns MochiKit.Async.Deferred
   */
 Freja.View.prototype.render = function(model, placeholder) {
+	if (typeof(placeholder) == "undefined") placeholder = this.placeholder;
 
 	var Handler = function(model, view, deferred) {
 		this.model = model;
@@ -568,7 +578,7 @@
 	}
 	req.send(postedData);
 	return d;
-};
+};
 /**
   * This is largely s copied with minor stylistic adjustments from Freja 1.1
   * I renamed it from Controller.history to distinguish between window.history
@@ -654,6 +664,7 @@
 	this.cache[this._position] = {};
 	this._undoSteps = 0;
 };
+
 /**
   * main repository
   * @static

Added: trunk/src/AssetManager.js
===================================================================
--- trunk/src/AssetManager.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/src/AssetManager.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,184 @@
+/**
+  * main repository
+  * @static
+  */
+Freja.AssetManager = {
+	models : [],
+	views : [],
+	_username : null,
+	_password : null
+};
+/**
+  * Set to sync to make all requests synchroneous. You shouldn't use
+  * this setting for anything but testing/debugging.
+  * "async" | "sync"
+  */
+Freja.AssetManager.HTTP_REQUEST_TYPE = "async";
+/**
+  * If this is set to null, real PUT and DELETE http-requests will be made,
+  * otherwise a header will be set instead, and the request tunneled through
+  * POST.
+  *
+  * Both IE6 and FF1.5 are known to support the required HTTP methods, so
+  * if theese are your target platform, you can disable tunneling.
+  */
+// Freja.AssetManager.HTTP_METHOD_TUNNEL = null;
+Freja.AssetManager.HTTP_METHOD_TUNNEL = "Http-Method-Equivalent";
+/**
+  * Set this url to provide remote xslt-transformation for browsers that
+  * doesn't support it natively.
+  */
+Freja.AssetManager.XSLT_SERVICE_URL = "srvc-xslt.php";
+/**
+  * HTML displayed while waiting for stuff to happen
+  */
+Freja.AssetManager.THROBBER_HTML = "<span style='color:white;background:firebrick'>Loading ...</span>";
+/**
+  * returns an instance of the renderengine to use
+  */
+Freja.AssetManager.createRenderer = function() {
+//	return new Freja.View.Renderer.RemoteXSLTransformer(this.XSLT_SERVICE_URL);
+	if (Freja._aux.hasSupportForXSLT()) {
+		return new Freja.View.Renderer.XSLTransformer();
+	} else {
+		return new Freja.View.Renderer.RemoteXSLTransformer(this.XSLT_SERVICE_URL);
+	}
+};
+/**
+  * Wipes all caches. This isn't something you will normally use during production,
+  * but it's very helpful for debugging/testing
+  */
+Freja.AssetManager.clearCache = function() {
+	this.models = [];
+	this.views = [];
+};
+/**
+  * Load a model-component
+  * @param    url      string
+  */
+Freja.AssetManager.getModel = function(url) {
+	for (var i=0; i < this.models.length; i++) {
+		if (this.models[i].url == url) {
+			return this.models[i];
+		}
+	}
+	var m = new Freja.Model(url, Freja._aux.createQueryEngine());
+	var onload = Freja._aux.bind(function(document) {
+		this.document = document;
+		this.ready = true;
+		Freja._aux.signal(this, "onload");
+	}, m);
+	this.loadAsset(url, true).addCallbacks(onload, Freja.AssetManager.onerror);
+	this.models.push(m);
+	return m;
+};
+/**
+  * Load a view-component
+  * @param    url      string
+  */
+Freja.AssetManager.getView = function(url) {
+	for (var i=0; i < this.views.length; i++) {
+		if (this.views[i].url == url) {
+			return this.views[i];
+		}
+	}
+	var v = new Freja.View(url, this.createRenderer());
+	var onload = Freja._aux.bind(function(document) {
+		this.document = document;
+		this.ready = true;
+		Freja._aux.signal(this, "onload");
+	}, v);
+	this.loadAsset(url, false).addCallbacks(onload, Freja.AssetManager.onerror);
+	this.views.push(v);
+	return v;
+};
+/**
+  * Creates and opens a http-request, tunneling exotic methods if needed.
+  */
+Freja.AssetManager.openXMLHttpRequest = function(method, url) {
+	var tunnel = null;
+	if (Freja.AssetManager.HTTP_METHOD_TUNNEL && method != "GET" && method != "POST") {
+		tunnel = method;
+		method = "POST";
+	}
+	var req = Freja._aux.openXMLHttpRequest(method, url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
+	if (tunnel) {
+		req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, tunnel);
+	}
+	return req;
+};
+/**
+  * Sets username + password for Http-Authentication
+  */
+Freja.AssetManager.setCredentials = function(username, password) {
+	this._username = username;
+	this._password = password;
+};
+/**
+  * @returns MochiKit.Async.Deferred
+  */
+Freja.AssetManager.loadAsset = function(url, preventCaching) {
+	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	if (match) {
+		url = match[1] + url; // local
+	}
+	var d = Freja._aux.createDeferred();
+	var handler = function(transport) {
+		try {
+			if (transport.responseText == "") {
+				throw new Error("Empty response.");
+			}
+			if (transport.responseXML.xml == "") {
+				// The server doesn't reply with Content-Type: text/xml
+				// this will happen if the file is loaded locally (through file://)
+				var document = Freja._aux.loadXML(transport.responseText);
+			} else {
+				var document = transport.responseXML;
+			}
+		} catch (ex) {
+			d.errback(ex);
+		}
+		d.callback(document);
+	};
+	try {
+		if (preventCaching && Freja.AssetManager.HTTP_METHOD_TUNNEL) {
+			var req = Freja._aux.openXMLHttpRequest("POST", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
+			req.setRequestHeader(Freja.AssetManager.HTTP_METHOD_TUNNEL, "GET");
+			req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+		} else {
+			var req = Freja._aux.openXMLHttpRequest("GET", url, Freja.AssetManager.HTTP_REQUEST_TYPE == "async", Freja.AssetManager._username, Freja.AssetManager._password);
+		}
+
+		// This shouldn't be nescesary, but alas it is - firefox chokes
+		// It's probably due to an error in MochiKit, so the problem
+		// should be fixed there.
+		var comm = Freja._aux.sendXMLHttpRequest(req);
+		if (Freja.AssetManager.HTTP_REQUEST_TYPE == "async") {
+			comm.addCallbacks(handler, Freja._aux.bind(d.errback, d));
+		} else {
+			if (req.status == 0 || req.status == 200 || req.status == 304) {
+				handler(req);
+			} else {
+				d.errback(new Error("Request failed:" + req.status));
+			}
+		}
+	} catch (ex) {
+		d.errback(ex);
+	}
+	return d;
+};
+/**
+  * This is a default error-handler. You should provide your own.
+  * The handler is called if an asynchronous error happens, since
+  * this could not be caught with the usual try ... catch
+  *
+  * It ought to be replaced completely with Deferred
+  */
+Freja.AssetManager.onerror = function(ex) {
+	alert("Freja.AssetManager.onerror\n" + ex.message);
+};
+/**
+  * Global exports
+  */
+window.getModel = Freja._aux.bind("getModel", Freja.AssetManager);
+window.getView = Freja._aux.bind("getView", Freja.AssetManager);
\ No newline at end of file

Added: trunk/src/Freja.js
===================================================================
--- trunk/src/Freja.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/src/Freja.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,33 @@
+if (typeof(dojo) != "undefined") {
+	dojo.provide("Freja");
+}
+if (typeof(Freja) == "undefined") {
+	Freja = {};
+}
+Freja.NAME = "Freja";
+Freja.VERSION = "2.0.alpha";
+Freja.__repr__ = function () {
+	return "[" + this.NAME + " " + this.VERSION + "]";
+};
+Freja.toString = function () {
+	return this.__repr__();
+};
+/**
+  * Single-hierarchy inheritance (class emulation)
+  * @see    http://www.itsalleasy.com/2006/02/05/prototype-chain/
+  *         http://www.itsalleasy.com/2006/02/24/classjs-third-time-is-the-charm/
+  *
+  * Extends one prototype by another.
+  * The subtype will have two specialpurpose properties:
+  *     superconstructor    The parent prototype's constructor
+  *     supertype        The parent prototype
+  */
+Freja.Class = {};
+Freja.Class.extend = function(subClass, superconstructor) {
+	var inlineSuper = function(){};
+	inlineSuper.prototype = superconstructor.prototype;
+	subClass.prototype = new inlineSuper();
+	subClass.prototype.constructor = subClass;
+	subClass.prototype.superconstructor = superconstructor;
+	subClass.prototype.supertype = superconstructor.prototype;
+};
\ No newline at end of file

Added: trunk/src/Model.js
===================================================================
--- trunk/src/Model.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/src/Model.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,126 @@
+/**
+  * Standard model component
+  */
+Freja.Model = function(url, query) {
+	this.url = url;
+	this.ready = false;
+	this.document = null;
+	this._query = query;
+	Freja._aux.registerSignals(this, ["onload"]);
+};
+/**
+  * Returns a single value
+  */
+Freja.Model.prototype.getElementById = function(id) {
+	if (this.document) {
+		return this._query.getElementById(this.document, id);
+	}
+	return null;
+};
+/**
+  * Returns a single value
+  */
+Freja.Model.prototype.get = function(expression) {
+	if (this.document) {
+		return this._query.get(this.document, expression);
+	}
+	return null;
+};
+/**
+  * Updates a value
+  */
+Freja.Model.prototype.set = function(expression, value) {
+	if (this.document) {
+		return this._query.set(this.document, expression, value);
+	}
+	return null;
+};
+/**
+  * Updates the model from a view
+  */
+Freja.Model.prototype.updateFrom = function(view) {
+	var values = view.getValues();
+	for (var i = 0; i < values[0].length; ++i) {
+		this.set(values[0][i], values[1][i]);
+	}
+};
+/**
+  * Writes the model back to the remote service
+  * @returns MochiKit.Async.Deferred
+  */
+Freja.Model.prototype.save = function() {
+	var url = this.url;
+	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	if (match) {
+		url = match[1] + url; // local
+	}
+	// since the serialization may fail, we create a deferred for the
+	// purpose, rather than just returning the sendXMLHttpRequest directly.
+	var d = Freja._aux.createDeferred();
+	var req = Freja.AssetManager.openXMLHttpRequest("POST", url);
+	try {
+		// for some obscure reason exceptions aren't thrown back if I call the
+		// shorthand version of sendXMLHttpRequest in IE6.
+		Freja._aux.sendXMLHttpRequest(req, Freja._aux.serializeXML(this.document)).addCallbacks(Freja._aux.bind(d.callback, d), Freja._aux.bind(d.errback, d));
+	} catch (ex) {
+		d.errback(ex);
+	}
+	return d;
+};
+/**
+  * Deletes the model from the remote service
+  * @returns MochiKit.Async.Deferred
+  */
+Freja.Model.prototype.remove = function() {
+	var url = this.url;
+	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	if (match) {
+		url = match[1] + url; // local
+	}
+	var req = Freja.AssetManager.openXMLHttpRequest("DELETE", url);
+	return Freja._aux.sendXMLHttpRequest(req);
+};
+/**
+  * @returns MochiKit.Async.Deferred
+  */
+Freja.Model.prototype.reload = function() {
+	this.ready = false;
+	var onload = Freja._aux.bind(function(document) {
+		this.document = document;
+		this.ready = true;
+		Freja._aux.signal(this, "onload");
+	}, this);
+	var d = Freja.AssetManager.loadAsset(this.url, true);
+	d.addCallbacks(onload, Freja.AssetManager.onerror);
+	return d;
+};
+/**
+  * DataSource provides a gateway-type interface to a REST service.
+  */
+Freja.Model.DataSource = function(createURL, indexURL) {
+	this.createURL = createURL;
+	this.indexURL = indexURL;
+};
+/**
+  * Returns a list of primary-keys to records in the datasource
+  */
+Freja.Model.DataSource.prototype.select = function() {
+	return getModel(this.indexURL);
+};
+/**
+  * Creates a new instance of a record
+  * @todo errback to the deferred on errors
+  */
+Freja.Model.DataSource.prototype.create = function(values) {
+	var url = this.createURL;
+	var match = /^(file:\/\/.*\/)([^/]*)$/.exec(window.location.href);
+	if (match) {
+		url = match[1] + url; // local
+	}
+	var req = Freja.AssetManager.openXMLHttpRequest("PUT", url);
+	var payload = {};
+	for (var i = 0, len = values[0].length; i < len; ++i) {
+		payload[values[0][i]] = values[1][i];
+	}
+	return Freja._aux.sendXMLHttpRequest(req, Freja._aux.xmlize(payload, 'record'));
+};

Added: trunk/src/QueryEngine.js
===================================================================
--- trunk/src/QueryEngine.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/src/QueryEngine.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,79 @@
+/**
+  * The baseclass for queryengines
+  * @abstract
+  */
+Freja.QueryEngine = function() {};
+Freja.QueryEngine.prototype.getElementById = function(document, id) {
+	// getElementById doesn't work on XML document without xml:id
+	var allElements = document.getElementsByTagName("*");
+	for (var i= 0; i < allElements.length; i++) {
+		if (allElements[i].getAttribute("id") == id) {
+			return allElements[i];
+		}
+	}
+};
+Freja.QueryEngine.prototype.get = function(document, expression) {
+	return this._find(document, expression).nodeValue;
+};
+Freja.QueryEngine.prototype.set = function(document, expression, value) {
+	this._find(document, expression).nodeValue = value;
+};
+/**
+  * XPath query engine.
+  */
+Freja.QueryEngine.XPath = function() {};
+Freja.Class.extend(Freja.QueryEngine.XPath, Freja.QueryEngine);
+Freja.QueryEngine.XPath.prototype._find = function(document, expression) {
+	var node = document.selectSingleNode(expression);
+	if (node && node.nodeType == 2) {
+		return node;
+	} else if (node && node.firstChild && node.firstChild.nodeType == 3) {
+		return node.firstChild;
+	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
+		return node.firstChild;
+	}
+	throw new Error("Can't evaluate expression " + expression);
+};
+/**
+  * SimplePath
+  */
+Freja.QueryEngine.SimplePath = function() {};
+Freja.Class.extend(Freja.QueryEngine.SimplePath, Freja.QueryEngine);
+Freja.QueryEngine.SimplePath.prototype._find = function(document, expression) {
+	if (!expression.match(/^[\d\w\/@\[\]]*$/)) {
+		throw new Error("Can't evaluate expression " + expression);
+	}
+	var parts = expression.split(/\//);
+	var node = document;
+	var regAttr = new RegExp("^@([\\d\\w]*)");
+	var regOffset = new RegExp("^([@\\d\\w]*)\\[([\\d]*)\\]$");
+	var attr = null;
+	var offset = 0;
+	for (var i = 0; i < parts.length; ++i) {
+		var part = parts[i];
+		offset = regOffset.exec(part);
+		if (offset) {
+			part = offset[1];
+			offset = offset[2] - 1;
+		} else {
+			offset = 0;
+		}
+		if (part != "") {
+			attr = regAttr.exec(part);
+			if (attr) {
+				node = node.getAttributeNode(attr[1]);
+			} else {
+				node = node.getElementsByTagName(part).item(offset);
+			}
+		}
+	}
+	if (node && node.firstChild && node.firstChild.nodeType == 3) {
+		return node.firstChild;
+	} else if (node && node.firstChild && node.firstChild.nodeType == 4) {
+		return node.firstChild;
+	}
+	if (!node) {
+		throw new Error("Can't evaluate expression " + expression);
+	}
+	return node;
+};
\ No newline at end of file

Added: trunk/src/UndoHistory.js
===================================================================
--- trunk/src/UndoHistory.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/src/UndoHistory.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,85 @@
+/**
+  * This is largely s copied with minor stylistic adjustments from Freja 1.1
+  * I renamed it from Controller.history to distinguish between window.history
+  */
+Freja.UndoHistory = function() {
+	this.cache = [];
+	this.maxLength = 5;
+	this._position = 0;
+	this._undoSteps = 0;
+};
+/**
+  * Creates a snapshot of the model and stores it.
+  */
+Freja.UndoHistory.prototype.add = function(model) {
+	var historyIndex = this._position % this.maxLength;
+
+	var modelDoc = model.document;
+	this.cache[historyIndex] = {};
+	this.cache[historyIndex].model = model;
+	this.cache[historyIndex].document = Freja._aux.cloneXMLDocument(modelDoc);
+
+	if (!this.cache[historyIndex].document) {
+		throw new Error("Couldn't add to history.");
+	} else {
+		this._position++;
+		// clear rest of the history if undo was used.
+		var clearHistoryIndex = historyIndex;
+		while (this._undoSteps > 0) {
+			clearHistoryIndex = (clearHistoryIndex + 1) % this.maxLength;
+			this.cache[clearHistoryIndex] = {};
+			this._undoSteps--;
+		}
+		return historyIndex; // what would anybody need this for ?
+	}
+};
+/**
+  * Rolls the state back one step.
+  */
+Freja.UndoHistory.prototype.undo = function(steps) {
+	if (this._undoSteps < this.cache.length) {
+		this._undoSteps++;
+		this._position--;
+		if (this._position < 0) {
+			this._position = this.maxLength - 1;
+		}
+
+		var model = this.cache[this._position].model;
+		if (this.cache[this._position].document) {
+			model.document = this.cache[this._position].document;
+		} else {
+			throw new Error("The model's DOMDocument wasn't properly copied into the history");
+		}
+		if (typeof(steps) != "undefined" && steps > 1) {
+			this.undo(steps - 1);
+		}
+	} else {
+		throw new Error("Nothing to undo");
+	}
+};
+/**
+  * Reverts the effects of undo.
+  */
+Freja.UndoHistory.prototype.redo = function() {
+	if (this._undoSteps > 0) {
+		this._undoSteps--;
+		this._position = (this._position + 1) % this.maxLength;
+
+		var model = this.cache[this._position].model;
+		model.document = this.cache[this._position].document;
+	} else {
+		throw new Error("Nothing to redo");
+	}
+};
+/**
+  * Removes the last entry in the cache
+  */
+Freja.UndoHistory.prototype.removeLast = function() {
+	this._position--;
+
+	if (this._position < 0) {
+		this._position = this.maxLength - 1;
+	}
+	this.cache[this._position] = {};
+	this._undoSteps = 0;
+};

Added: trunk/src/View.js
===================================================================
--- trunk/src/View.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/src/View.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,195 @@
+/**
+  * Standard view component
+  */
+Freja.View = function(url, renderer) {
+	this.url = url;
+	this.ready = false;
+	this.document = null;
+	this._renderer = renderer;
+	this._destination = null;
+	this.handlers = [];
+	this.placeholder = null;
+	Freja._aux.registerSignals(this, ["onload","onrendercomplete"]);
+	Freja._aux.connect(this, "onrendercomplete", Freja._aux.bind(this._connectBehaviour, this));
+};
+/**
+  * @param    model            Freja.Model
+  * @param    placeholder      string    If supplied, this will be used instead of the
+  *                                      default placeholder.
+  * @returns MochiKit.Async.Deferred
+  */
+Freja.View.prototype.render = function(model, placeholder) {
+	if (typeof(placeholder) == "undefined") placeholder = this.placeholder;
+
+	var Handler = function(model, view, deferred) {
+		this.model = model;
+		this.view = view;
+		this.deferred = deferred;
+	};
+
+	Handler.prototype.trigger = function() {
+		try {
+			if (!this.view.ready) {
+				Freja._aux.connect(this.view, "onload", Freja._aux.bind(this.trigger, this));
+				return;
+			}
+			if (typeof(this.model) == "object" && this.model instanceof Freja.Model && !this.model.ready) {
+				Freja._aux.connect(this.model, "onload", Freja._aux.bind(this.trigger, this));
+				return;
+			}
+			var model;
+			if (typeof(this.model) == "undefined") {
+				// supply dummy
+				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?><dummy/>")};
+			} else if (this.model instanceof Freja.Model) {
+				model = this.model;
+			} else {
+				// wrap pojo's in
+				model = { document : Freja._aux.loadXML("<?xml version='1.0' ?>\n" + Freja._aux.xmlize(this.model, "item")) };
+			}
+			var trans = this.view._renderer.transform(model, this.view);
+			trans.addCallback(Freja._aux.bind(function(html) {
+				this._destination.innerHTML = html;
+			}, this.view));
+			trans.addCallback(Freja._aux.bind(function() {
+				Freja._aux.signal(this, "onrendercomplete", this._destination)
+			}, this.view));
+			trans.addCallback(this.deferred.callback);
+			trans.addErrback(this.deferred.errback);
+		} catch (ex) {
+			this.deferred.errback(ex);
+		}
+	};
+
+	var d = Freja._aux.createDeferred();
+	try {
+		this._destination = Freja._aux.getElement(placeholder);
+		// @todo    Is this a good idea ?
+		// Perhaps we should leave it to the programmer to do this.
+		this._destination.innerHTML = Freja.AssetManager.THROBBER_HTML;
+
+		var h = new Handler(model, this, d);
+		h.trigger();
+	} catch (ex) {
+		d.errback(ex);
+	}
+	return d;
+};
+/**
+  * Decorates the output of the primary renderer, to inject behaviour.
+  * @note Maybe we could use cssQuery (http://dean.edwards.name/my/cssQuery/)
+  *       to identify targets for behaviour, rather than just the id-attribute.
+  */
+Freja.View.prototype._connectBehaviour = function(destination) {
+	try {
+		var connectCallback = function(node, eventType, callback) {
+			Freja._aux.connect(node, eventType, Freja._aux.bind(
+				function(e) {
+					var allow = false;
+					try {
+						allow = callback(this);
+					} catch (ex) {
+						throw new Error("An error ocurred in user handler.\n" + ex.message);
+					} finally {
+						if (!allow) {
+							e.stop();
+						}
+					}
+				}, node)
+			);
+		};
+		var applyHandlers = function(node, handlers) {
+			for (var i = 0, c = node.childNodes, l = c.length; i < l; ++i) {
+				var child = c[i];
+				if (child.nodeType == 1) {
+					var id = child.getAttribute("handler");
+					if (id != "") {
+						var handler = handlers[id];
+						if (handler) {
+							for (var eventType in handler) {
+								if (eventType == "init") {
+									handler.init(child);
+								} else {
+									connectCallback(child, eventType, handler[eventType]);
+								}
+							}
+						}
+					}
+					applyHandlers(child, handlers);
+				}
+			}
+		};
+		applyHandlers(destination, this.handlers);
+	} catch (ex) {
+		alert(ex.message);
+	}
+};
+/**
+  * Returns the values of a formview
+  */
+Freja.View.prototype.getValues = function() {
+	return formContents(this._destination);
+};
+/**
+  * Base object for viewrenderers
+  */
+Freja.View.Renderer = function() {};
+/**
+  * XSLT based render-engine
+  */
+Freja.View.Renderer.XSLTransformer = function() {};
+Freja.Class.extend(Freja.View.Renderer.XSLTransformer, Freja.View.Renderer);
+/**
+  * @returns MochiKit.Async.Deferred
+  */
+Freja.View.Renderer.XSLTransformer.prototype.transform = function(model, view) {
+        var d = Freja._aux.createDeferred();
+        try {
+		var html = Freja._aux.transformXSL(model.document, view.document);
+		if (!html) {
+			d.errback(new Error("XSL Transformation error."));
+		} else {
+			// fix empty textareas
+			// Can't this be fixed by outputting as html rather than xml ?
+			// <xsl:output method="html" />
+			html = html.replace(/<textarea([^\/>]*)\/>/gi,"<textarea $1></textarea>");
+			d.callback(html);
+		}
+	} catch (ex) {
+		d.errback(ex);
+	}
+	return d;
+};
+/**
+  * XSLT on a remote service for browser which have no native support.
+  * @param    url    URL of the transform service
+  */
+Freja.View.Renderer.RemoteXSLTransformer = function(url) {
+	this.url = url;
+};
+Freja.Class.extend(Freja.View.Renderer.RemoteXSLTransformer, Freja.View.Renderer);
+/**
+  * @returns MochiKit.Async.Deferred
+  */
+Freja.View.Renderer.RemoteXSLTransformer.prototype.transform = function(model, view) {
+        var d = Freja._aux.createDeferred();
+
+	// prepare posted data  (no need to send the XSL document, just its url)
+	var xslUrl = view.url;
+	var postedData = "xslFile=" + encodeURIComponent(xslUrl) + "&xmlData=" + encodeURIComponent(Freja._aux.serializeXML(model.document));
+//	if (xslParams)
+//		postedData  = postedData + "&xslParam=" + encodeURIComponent(xslParams.toString());
+	// send request to the server-side XSL transformation service
+	var req = Freja.AssetManager.openXMLHttpRequest("POST", Freja.AssetManager.XSLT_SERVICE_URL);
+	req.onreadystatechange = function() {
+		if (req.readyState == 4) {
+			if (req.status == 200) {
+				d.callback(req.responseText);
+			} else {
+				d.errback(req.responseText);
+			}
+		}
+	}
+	req.send(postedData);
+	return d;
+};
\ No newline at end of file

Added: trunk/src/auxiliary/default.js
===================================================================
--- trunk/src/auxiliary/default.js	2006-03-31 05:58:46 UTC (rev 19)
+++ trunk/src/auxiliary/default.js	2006-03-31 07:14:29 UTC (rev 20)
@@ -0,0 +1,132 @@
+/**
+  * Freja._aux
+  * wrapper for external dependencies (frameworks).
+  *
+  * This is the default auxiliary adapter. It bridges Freja to MochiKit + Sarissa
+  *
+  * You shouldn't rely on this functionality - it's merely a hook for Freja towards
+  * external dependencies. This is the only part of the application you'll need to
+  * adjust, to make Freja play ball with your favourite framework.
+  */
+if (typeof(dojo) != "undefined") {
+	dojo.require("MochiKit.Base");
+	dojo.require("MochiKit.Signal");
+	dojo.require("MochiKit.Async");
+	dojo.require("Sarissa");
+}
+if (typeof(JSAN) != "undefined") {
+	JSAN.use("MochiKit.Base", []);
+	JSAN.use("MochiKit.Signal", []);
+	JSAN.use("MochiKit.Async", []);
+	JSAN.use("Sarissa", []);
+}
+try {
+	if (typeof(MochiKit.Base) == "undefined") {
+		throw "";
+	}
+	if (typeof(MochiKit.Signal) == "undefined") {
+		throw "";
+	}
+	if (typeof(MochiKit.Async) == "undefined") {
+		throw "";
+	}
+	if (typeof(Sarissa) == "undefined") {
+		throw "";
+	}
+} catch (e) {
+	throw new Error("Freja depends on MochiKit.Base, MochiKit.Signal, MochiKit.Async and Sarissa!");
+}
+if (typeof(Freja) == "undefined") {
+	Freja = {};
+}
+Freja._aux = {};
+/** bind(func, self[, arg, ...]) : function */
+Freja._aux.bind = MochiKit.Base.bind;
+/** formContents(elem) : Array */
+Freja._aux.formContents = MochiKit.DOM.formContents;
+/** getElement() : HTMLElement */
+Freja._aux.getElement = MochiKit.DOM.getElement;
+
+/** registerSignals(src, signals) : void */
+Freja._aux.registerSignals = MochiKit.Signal.registerSignals;
+/** connect(src, signal, dest[, func]) : void */
+Freja._aux.connect = MochiKit.Signal.connect;
+/** signal(src, signal, ...) : void */
+Freja._aux.signal = MochiKit.Signal.signal;
+/** createDeferred() : Deferred */
+Freja._aux.createDeferred = function() {
+	return new MochiKit.Async.Deferred();
+};
+/** openXMLHttpRequest(method, url, async, user, pass) : XMLHttpRequest */
+Freja._aux.openXMLHttpRequest = function(method, url, async, user, pass) {
+	var req = new XMLHttpRequest();
+	if (user && pass) {
+		req.open(method, url, async, user, pass);
+	} else {
+		req.open(method, url, async);
+	}
+	if (method == "POST" || method == "PUT") {
+		req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
+	}
+	return req;
+};
+/** sendXMLHttpRequest(req, sendContent) : Deferred */
+Freja._aux.sendXMLHttpRequest = MochiKit.Async.sendXMLHttpRequest;
+/** xmlize(anyObject, objectName) : string */
+Freja._aux.xmlize = Sarissa.xmlize;
+/** serializeXML(node) : string */
+Freja._aux.serializeXML = Sarissa.serialize;
+/** loadXML(string) : XMLDocument */
+Freja._aux.loadXML = function(text) {
+	return (new DOMParser()).parseFromString(text, "text/xml");
+};
+/** transformXSL(XMLDocument, XSLDocument) : string */
+Freja._aux.transformXSL = function(xml, xsl) {
+	var processor = new XSLTProcessor();
+	processor.importStylesheet(xsl);
+	return Freja._aux.serializeXML(processor.transformToDocument(xml));
+
+};
+/** cloneXMLDocument(document) : XMLDocument */
+Freja._aux.cloneXMLDocument = function(xmlDoc) {
+	var clone = null;
+	try {
+		clone = xmlDoc.cloneNode(true);
+	} catch(e) { /* squelch */ }
+
+	// Can't clone a DocumentNode in Safari & Opera. Let's try something else.
+	// @note Wouldn't it be easier to serialize the document to string and the parse it to a new document ?
+	if (!clone) {
+		if (document.implementation && document.implementation.createDocument) {
+			clone = document.implementation.createDocument("", xmlDoc.documentElement.nodeName, null);
+			// importNode is not safe in Safari ! the source document is altered. used cloneNode to fix the prblm
+			var data = clone.importNode(xmlDoc.documentElement.cloneNode(true), true);
+			try {
+				clone.appendChild(data);
+			} catch(e) {
+				// Opera has already created a documentElement and can't append another root node
+				var rootNode = clone.documentElement;
+				for (var i = data.childNodes.length; i >= 0; i--) {
+					rootNode.insertBefore(data.childNodes[i], rootNode.firstChild);
+				}
+				// need to copy root node attributes
+				for (var i = 0; i < xmlDoc.documentElement.attributes.length; i++) {
+					var name  = xmlDoc.documentElement.attributes.item(i).name;
+					var value = xmlDoc.documentElement.attributes.item(i).value;
+					clone.documentElement.setAttribute(name, value);
+				}
+			}
+		}
+	}
+	return clone;
+};
+/** hasSupportForXSLT() : boolean */
+Freja._aux.hasSupportForXSLT = function() { return (typeof(XSLTProcessor) != "undefined"); };
+/** createQueryEngine() : Freja.QueryEngine */
+Freja._aux.createQueryEngine = function() {
+	if (Sarissa.IS_ENABLED_SELECT_NODES) {
+		return new Freja.QueryEngine.XPath();
+	} else {
+		return new Freja.QueryEngine.SimplePath();
+	}
+};



